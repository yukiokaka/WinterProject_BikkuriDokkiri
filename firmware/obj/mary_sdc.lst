
obj/mary_sdc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037b7  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  10000000  000037b8  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000013ac  10000004  000037bc  00010004  2**2
                  ALLOC
  3 .ARM.attributes 00000033  00000000  00000000  00010004  2**0
                  CONTENTS, READONLY
  4 .comment      0000002a  00000000  00000000  00010037  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00010061  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000438  00000000  00000000  000101a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000449b  00000000  00000000  000105d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ebf  00000000  00000000  00014a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001ac6  00000000  00000000  00015933  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ac8  00000000  00000000  000173fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000a40  00000000  00000000  00017ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006482  00000000  00000000  00018904  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000031a  00000000  00000000  0001ed86  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000130  00000000  00000000  0001f0a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <vector>:
static
void* alloc_pool (	/* Pointer to allocated memory block (NULL:no memory available) */
	JDEC* jd,		/* Pointer to the decompressor object */
	UINT nd			/* Number of bytes to allocate */
)
{
       0:	e0 1f 00 10 65 32 00 00 21 33 00 00 21 33 00 00     ....e2..!3..!3..
	...
	BYTE msk, s, *dp;
	UINT dc, v, f;


	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
	s = *dp; v = f = 0;
      2c:	21 33 00 00 00 00 00 00 00 00 00 00 21 33 00 00     !3..........!3..
	do {
		if (!msk) {				/* Next byte? */
			if (!dc) {			/* No input data is available, re-fill input buffer */
				dp = jd->inbuf;	/* Top of input buffer */
      3c:	99 11 00 00 35 33 00 00 35 33 00 00 35 33 00 00     ....53..53..53..
				dc = jd->infunc(jd, dp, JD_SZBUF);
				if (!dc) return 0 - (INT)JDR_INP;	/* Err: read error or wrong stream termination */
      4c:	35 33 00 00 35 33 00 00 35 33 00 00 35 33 00 00     53..53..53..53..
			}
			dc--;				/* Decrement number of available bytes */
			if (f) {			/* In flag sequence? */
				f = 0;			/* Exit flag sequence */
				if (*dp != 0) return 0 - (INT)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
				*dp = s = 0xFF;			/* The flag is a data 0xFF */
      5c:	35 33 00 00 35 33 00 00 35 33 00 00 35 33 00 00     53..53..53..53..
				}
			}
			msk = 0x80;		/* Read from MSB */
		}
		v <<= 1;	/* Get a bit */
		if (s & msk) v++;
      6c:	35 33 00 00 35 33 00 00 35 33 00 00 35 33 00 00     53..53..53..53..
		msk >>= 1;
		nbit--;
      7c:	cd 03 00 00 35 33 00 00 35 33 00 00 35 33 00 00     ....53..53..53..
	} while (nbit);
	jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
      8c:	35 33 00 00 35 33 00 00 11 01 00 00 00 00 00 00     53..53..........
				dp++;			/* Next data ptr */
			}
			dc--;				/* Decrement number of available bytes */
			if (f) {			/* In flag sequence? */
				f = 0;			/* Exit flag sequence */
				if (*dp != 0) return 0 - (INT)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
      9c:	00 00 00 00 35 33 00 00 35 33 00 00 35 33 00 00     ....53..53..53..
{
	BYTE msk, s, *dp;
	UINT dc, v, f, bl, nd;


	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
      ac:	00 00 00 00 35 33 00 00 35 33 00 00 35 33 00 00     ....53..53..53..
	s = *dp; v = f = 0;
      bc:	35 33 00 00                                         53..

000000c0 <main>:
	bl = 16;	/* Max code length */
	do {
		if (!msk) {		/* Next byte? */
      c0:	b508      	push	{r3, lr}
			if (!dc) {	/* No input data is available, re-fill input buffer */
				dp = jd->inbuf;	/* Top of input buffer */
				dc = jd->infunc(jd, dp, JD_SZBUF);
				if (!dc) return 0 - (INT)JDR_INP;	/* Err: read error or wrong stream termination */
			} else {
				dp++;	/* Next data ptr */
      c2:	4a0c      	ldr	r2, [pc, #48]	; (f4 <main+0x34>)
	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
	s = *dp; v = f = 0;
	bl = 16;	/* Max code length */
	do {
		if (!msk) {		/* Next byte? */
			if (!dc) {	/* No input data is available, re-fill input buffer */
      c4:	4b0c      	ldr	r3, [pc, #48]	; (f8 <main+0x38>)
      c6:	601a      	str	r2, [r3, #0]
				dp = jd->inbuf;	/* Top of input buffer */
      c8:	2207      	movs	r2, #7
				dc = jd->infunc(jd, dp, JD_SZBUF);
      ca:	3b04      	subs	r3, #4
      cc:	601a      	str	r2, [r3, #0]
      ce:	f000 f905 	bl	2dc <i2c0_init>
      d2:	f000 f8b5 	bl	240 <uart0_init>
				if (!dc) return 0 - (INT)JDR_INP;	/* Err: read error or wrong stream termination */
      d6:	4a09      	ldr	r2, [pc, #36]	; (fc <main+0x3c>)
      d8:	4b09      	ldr	r3, [pc, #36]	; (100 <main+0x40>)
			} else {
				dp++;	/* Next data ptr */
			}
			dc--;		/* Decrement number of available bytes */
			if (f) {		/* In flag sequence? */
      da:	480a      	ldr	r0, [pc, #40]	; (104 <main+0x44>)
				dc = jd->infunc(jd, dp, JD_SZBUF);
				if (!dc) return 0 - (INT)JDR_INP;	/* Err: read error or wrong stream termination */
			} else {
				dp++;	/* Next data ptr */
			}
			dc--;		/* Decrement number of available bytes */
      dc:	601a      	str	r2, [r3, #0]
      de:	4a0a      	ldr	r2, [pc, #40]	; (108 <main+0x48>)
			if (f) {		/* In flag sequence? */
      e0:	4b0a      	ldr	r3, [pc, #40]	; (10c <main+0x4c>)
      e2:	601a      	str	r2, [r3, #0]
				f = 0;		/* Exit flag sequence */
				if (*dp != 0)
      e4:	f000 fa42 	bl	56c <xputs>
					return 0 - (INT)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
				*dp = s = 0xFF;			/* The flag is a data 0xFF */
      e8:	f001 f85e 	bl	11a8 <terminal_init>
			} else {
				dp++;	/* Next data ptr */
			}
			dc--;		/* Decrement number of available bytes */
			if (f) {		/* In flag sequence? */
				f = 0;		/* Exit flag sequence */
      ec:	f001 f85d 	bl	11aa <terminal>
				if (*dp != 0)
					return 0 - (INT)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
				*dp = s = 0xFF;			/* The flag is a data 0xFF */
      f0:	e7fc      	b.n	ec <main+0x2c>
			} else {
				s = *dp;				/* Get next data byte */
				if (s == 0xFF) {		/* Is start of flag sequence? */
      f2:	46c0      	nop			; (mov r8, r8)
      f4:	00008c9f 	.word	0x00008c9f
				}
			}
			msk = 0x80;		/* Read from MSB */
		}
		v <<= 1;	/* Get a bit */
		if (s & msk) v++;
      f8:	e000e014 	.word	0xe000e014
      fc:	00000205 	.word	0x00000205
		msk >>= 1;

		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
     100:	10000134 	.word	0x10000134
				}
			}
			msk = 0x80;		/* Read from MSB */
		}
		v <<= 1;	/* Get a bit */
		if (s & msk) v++;
     104:	000035ac 	.word	0x000035ac
/*-----------------------------------------------------------------------*/
/* Extract a huffman decoded data from input stream                      */
/*-----------------------------------------------------------------------*/

static
INT huffext (			/* >=0: decoded data, <0: error code */
     108:	000001c9 	.word	0x000001c9
     10c:	10000130 	.word	0x10000130

00000110 <UART_IRQHandler>:
		v <<= 1;	/* Get a bit */
		if (s & msk) v++;
		msk >>= 1;

		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
			if (v == *hcode++) {		/* Matched? */
     110:	b510      	push	{r4, lr}
     112:	4b21      	ldr	r3, [pc, #132]	; (198 <UART_IRQHandler+0x88>)
     114:	681b      	ldr	r3, [r3, #0]
     116:	b2db      	uxtb	r3, r3
     118:	07da      	lsls	r2, r3, #31
				jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
				return *hdata;			/* Return the decoded data */
     11a:	d43b      	bmi.n	194 <UART_IRQHandler+0x84>
		if (s & msk) v++;
		msk >>= 1;

		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
			if (v == *hcode++) {		/* Matched? */
				jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
     11c:	2207      	movs	r2, #7
     11e:	4013      	ands	r3, r2
     120:	2b02      	cmp	r3, #2
				return *hdata;			/* Return the decoded data */
     122:	d018      	beq.n	156 <UART_IRQHandler+0x46>
     124:	491d      	ldr	r1, [pc, #116]	; (19c <UART_IRQHandler+0x8c>)
		v <<= 1;	/* Get a bit */
		if (s & msk) v++;
		msk >>= 1;

		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
			if (v == *hcode++) {		/* Matched? */
     126:	2b04      	cmp	r3, #4
     128:	d130      	bne.n	18c <UART_IRQHandler+0x7c>
     12a:	4b1d      	ldr	r3, [pc, #116]	; (1a0 <UART_IRQHandler+0x90>)
				jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
				return *hdata;			/* Return the decoded data */
			}
			hdata++;
     12c:	885a      	ldrh	r2, [r3, #2]
     12e:	889b      	ldrh	r3, [r3, #4]
     130:	e00a      	b.n	148 <UART_IRQHandler+0x38>
		}
		v <<= 1;	/* Get a bit */
		if (s & msk) v++;
		msk >>= 1;

		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
     132:	481c      	ldr	r0, [pc, #112]	; (1a4 <UART_IRQHandler+0x94>)
     134:	6804      	ldr	r4, [r0, #0]
     136:	2b7f      	cmp	r3, #127	; 0x7f
     138:	dc06      	bgt.n	148 <UART_IRQHandler+0x38>
				jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
				return *hdata;			/* Return the decoded data */
			}
			hdata++;
		}
		bl--;
     13a:	4819      	ldr	r0, [pc, #100]	; (1a0 <UART_IRQHandler+0x90>)
		}
		v <<= 1;	/* Get a bit */
		if (s & msk) v++;
		msk >>= 1;

		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
     13c:	3301      	adds	r3, #1
				jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
				return *hdata;			/* Return the decoded data */
			}
			hdata++;
		}
		bl--;
     13e:	1880      	adds	r0, r0, r2
		}
		v <<= 1;	/* Get a bit */
		if (s & msk) v++;
		msk >>= 1;

		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
     140:	7204      	strb	r4, [r0, #8]
				jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
				return *hdata;			/* Return the decoded data */
			}
			hdata++;
		}
		bl--;
     142:	3201      	adds	r2, #1
     144:	207f      	movs	r0, #127	; 0x7f
					return 0 - (INT)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
				*dp = s = 0xFF;			/* The flag is a data 0xFF */
			} else {
				s = *dp;				/* Get next data byte */
				if (s == 0xFF) {		/* Is start of flag sequence? */
					f = 1; continue;	/* Enter flag sequence, get trailing byte */
     146:	4002      	ands	r2, r0
     148:	6808      	ldr	r0, [r1, #0]
				return *hdata;			/* Return the decoded data */
			}
			hdata++;
		}
		bl--;
	} while (bl);
     14a:	07c4      	lsls	r4, r0, #31
     14c:	d4f1      	bmi.n	132 <UART_IRQHandler+0x22>
     14e:	4914      	ldr	r1, [pc, #80]	; (1a0 <UART_IRQHandler+0x90>)
     150:	804a      	strh	r2, [r1, #2]
	do {
		if (!msk) {		/* Next byte? */
			if (!dc) {	/* No input data is available, re-fill input buffer */
				dp = jd->inbuf;	/* Top of input buffer */
				dc = jd->infunc(jd, dp, JD_SZBUF);
				if (!dc) return 0 - (INT)JDR_INP;	/* Err: read error or wrong stream termination */
     152:	808b      	strh	r3, [r1, #4]
     154:	e7dd      	b.n	112 <UART_IRQHandler+0x2>
			}
			dc--;		/* Decrement number of available bytes */
			if (f) {		/* In flag sequence? */
				f = 0;		/* Exit flag sequence */
				if (*dp != 0)
					return 0 - (INT)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
     156:	4a14      	ldr	r2, [pc, #80]	; (1a8 <UART_IRQHandler+0x98>)
     158:	8993      	ldrh	r3, [r2, #12]
		}
		bl--;
	} while (bl);

	return 0 - (INT)JDR_FMT1;	/* Err: code not found (may be collapted data) */
}
     15a:	2b00      	cmp	r3, #0
     15c:	d014      	beq.n	188 <UART_IRQHandler+0x78>
	UINT (*infunc)(JDEC*, BYTE*, UINT),	/* JPEG strem input function */
	void* pool,			/* Working buffer for the decompression session */
	UINT sz_pool,		/* Size of working buffer */
	void* dev			/* I/O device identifier for the session */
)
{
     15e:	8912      	ldrh	r2, [r2, #8]
     160:	2010      	movs	r0, #16
     162:	e009      	b.n	178 <UART_IRQHandler+0x68>
	DWORD ofs;
	UINT n, i, j, len;
	JRESULT rc;


	if (!pool) return JDR_PAR;
     164:	1889      	adds	r1, r1, r2
     166:	7c0c      	ldrb	r4, [r1, #16]
     168:	490e      	ldr	r1, [pc, #56]	; (1a4 <UART_IRQHandler+0x94>)
     16a:	3201      	adds	r2, #1

	jd->pool = pool;		/* Work memroy */
	jd->sz_pool = sz_pool;	/* Size of given work memory */
     16c:	600c      	str	r4, [r1, #0]
	jd->infunc = infunc;	/* Stream input function */
	jd->device = dev;		/* I/O device identifier */
     16e:	3801      	subs	r0, #1

	if (!pool) return JDR_PAR;

	jd->pool = pool;		/* Work memroy */
	jd->sz_pool = sz_pool;	/* Size of given work memory */
	jd->infunc = infunc;	/* Stream input function */
     170:	217f      	movs	r1, #127	; 0x7f
	jd->device = dev;		/* I/O device identifier */
     172:	400a      	ands	r2, r1
			jd->huffdata[i][j] = 0;
		}
	}
	for (i = 0; i < 4; i++) jd->qttbl[i] = 0;

	jd->inbuf = seg = alloc_pool(jd, JD_SZBUF);		/* Allocate stream input buffer */
     174:	b2c0      	uxtb	r0, r0

	jd->pool = pool;		/* Work memroy */
	jd->sz_pool = sz_pool;	/* Size of given work memory */
	jd->infunc = infunc;	/* Stream input function */
	jd->device = dev;		/* I/O device identifier */
	jd->nrst = 0;			/* No restart interval (default) */
     176:	3b01      	subs	r3, #1
	JRESULT rc;


	if (!pool) return JDR_PAR;

	jd->pool = pool;		/* Work memroy */
     178:	490b      	ldr	r1, [pc, #44]	; (1a8 <UART_IRQHandler+0x98>)
	jd->sz_pool = sz_pool;	/* Size of given work memory */
	jd->infunc = infunc;	/* Stream input function */
	jd->device = dev;		/* I/O device identifier */
	jd->nrst = 0;			/* No restart interval (default) */
     17a:	2b00      	cmp	r3, #0

	for (i = 0; i < 2; i++) {	/* Nulls pointers */
		for (j = 0; j < 2; j++) {
			jd->huffbits[i][j] = 0;
     17c:	d001      	beq.n	182 <UART_IRQHandler+0x72>
			jd->huffcode[i][j] = 0;
     17e:	2800      	cmp	r0, #0
			jd->huffdata[i][j] = 0;
     180:	d1f0      	bne.n	164 <UART_IRQHandler+0x54>
	jd->device = dev;		/* I/O device identifier */
	jd->nrst = 0;			/* No restart interval (default) */

	for (i = 0; i < 2; i++) {	/* Nulls pointers */
		for (j = 0; j < 2; j++) {
			jd->huffbits[i][j] = 0;
     182:	810a      	strh	r2, [r1, #8]
			jd->huffcode[i][j] = 0;
     184:	818b      	strh	r3, [r1, #12]
			jd->huffdata[i][j] = 0;
     186:	e7c4      	b.n	112 <UART_IRQHandler+0x2>
	jd->device = dev;		/* I/O device identifier */
	jd->nrst = 0;			/* No restart interval (default) */

	for (i = 0; i < 2; i++) {	/* Nulls pointers */
		for (j = 0; j < 2; j++) {
			jd->huffbits[i][j] = 0;
     188:	81d3      	strh	r3, [r2, #14]
			jd->huffcode[i][j] = 0;
     18a:	e7c2      	b.n	112 <UART_IRQHandler+0x2>
			jd->huffdata[i][j] = 0;
     18c:	680b      	ldr	r3, [r1, #0]
	jd->device = dev;		/* I/O device identifier */
	jd->nrst = 0;			/* No restart interval (default) */

	for (i = 0; i < 2; i++) {	/* Nulls pointers */
		for (j = 0; j < 2; j++) {
			jd->huffbits[i][j] = 0;
     18e:	4b05      	ldr	r3, [pc, #20]	; (1a4 <UART_IRQHandler+0x94>)
			jd->huffcode[i][j] = 0;
     190:	681b      	ldr	r3, [r3, #0]
			jd->huffdata[i][j] = 0;
     192:	e7be      	b.n	112 <UART_IRQHandler+0x2>
		}
	}
	for (i = 0; i < 4; i++) jd->qttbl[i] = 0;
     194:	bd10      	pop	{r4, pc}
     196:	46c0      	nop			; (mov r8, r8)
     198:	40008008 	.word	0x40008008

	jd->inbuf = seg = alloc_pool(jd, JD_SZBUF);		/* Allocate stream input buffer */
     19c:	40008014 	.word	0x40008014
     1a0:	10000004 	.word	0x10000004
     1a4:	40008000 	.word	0x40008000
	if (!seg) return JDR_MEM1;
     1a8:	10000084 	.word	0x10000084

000001ac <uart0_test>:
     1ac:	b500      	push	{lr}

	if (jd->infunc(jd, seg, 2) != 2) return JDR_INP;/* Check SOI marker */
     1ae:	4b04      	ldr	r3, [pc, #16]	; (1c0 <uart0_test+0x14>)
     1b0:	2001      	movs	r0, #1
     1b2:	781b      	ldrb	r3, [r3, #0]
     1b4:	2b00      	cmp	r3, #0
     1b6:	d101      	bne.n	1bc <uart0_test+0x10>
     1b8:	4b02      	ldr	r3, [pc, #8]	; (1c4 <uart0_test+0x18>)
     1ba:	8898      	ldrh	r0, [r3, #4]
     1bc:	bd00      	pop	{pc}
     1be:	46c0      	nop			; (mov r8, r8)
	if (LDB_WORD(seg) != 0xFFD8) return JDR_FMT1;	/* Err: SOI is not detected */
     1c0:	1000012c 	.word	0x1000012c
     1c4:	10000004 	.word	0x10000004

000001c8 <uart0_getc>:
     1c8:	b500      	push	{lr}
     1ca:	4b0c      	ldr	r3, [pc, #48]	; (1fc <uart0_getc+0x34>)
     1cc:	7818      	ldrb	r0, [r3, #0]
     1ce:	2800      	cmp	r0, #0
     1d0:	d002      	beq.n	1d8 <uart0_getc+0x10>
     1d2:	2200      	movs	r2, #0
     1d4:	701a      	strb	r2, [r3, #0]
     1d6:	e00f      	b.n	1f8 <uart0_getc+0x30>
	ofs = 2;

	for (;;) {
		/* Get a JPEG marker */
		if (jd->infunc(jd, seg, 4) != 4) return JDR_INP;
     1d8:	4b09      	ldr	r3, [pc, #36]	; (200 <uart0_getc+0x38>)
     1da:	889a      	ldrh	r2, [r3, #4]
     1dc:	2a00      	cmp	r2, #0
     1de:	d0f4      	beq.n	1ca <uart0_getc+0x2>
     1e0:	881a      	ldrh	r2, [r3, #0]
     1e2:	1899      	adds	r1, r3, r2
     1e4:	7a08      	ldrb	r0, [r1, #8]
     1e6:	3201      	adds	r2, #1
		marker = LDB_WORD(seg);		/* Marker */
     1e8:	217f      	movs	r1, #127	; 0x7f
		len = LDB_WORD(seg + 2);	/* Length field */
     1ea:	400a      	ands	r2, r1
	ofs = 2;

	for (;;) {
		/* Get a JPEG marker */
		if (jd->infunc(jd, seg, 4) != 4) return JDR_INP;
		marker = LDB_WORD(seg);		/* Marker */
     1ec:	801a      	strh	r2, [r3, #0]
		len = LDB_WORD(seg + 2);	/* Length field */
     1ee:	b672      	cpsid	i
     1f0:	889a      	ldrh	r2, [r3, #4]
     1f2:	3a01      	subs	r2, #1
	ofs = 2;

	for (;;) {
		/* Get a JPEG marker */
		if (jd->infunc(jd, seg, 4) != 4) return JDR_INP;
		marker = LDB_WORD(seg);		/* Marker */
     1f4:	809a      	strh	r2, [r3, #4]
		len = LDB_WORD(seg + 2);	/* Length field */
		if (len <= 2 || (marker >> 8) != 0xFF) return JDR_FMT1;
     1f6:	b662      	cpsie	i
     1f8:	bd00      	pop	{pc}
     1fa:	46c0      	nop			; (mov r8, r8)
	ofs = 2;

	for (;;) {
		/* Get a JPEG marker */
		if (jd->infunc(jd, seg, 4) != 4) return JDR_INP;
		marker = LDB_WORD(seg);		/* Marker */
     1fc:	1000012c 	.word	0x1000012c
		len = LDB_WORD(seg + 2);	/* Length field */
		if (len <= 2 || (marker >> 8) != 0xFF) return JDR_FMT1;
     200:	10000004 	.word	0x10000004

00000204 <uart0_putc>:
     204:	b500      	push	{lr}
     206:	4b0c      	ldr	r3, [pc, #48]	; (238 <uart0_putc+0x34>)
		len -= 2;		/* Content size excluding length field */
		ofs += 4 + len;	/* Number of bytes loaded */
     208:	899a      	ldrh	r2, [r3, #12]
		/* Get a JPEG marker */
		if (jd->infunc(jd, seg, 4) != 4) return JDR_INP;
		marker = LDB_WORD(seg);		/* Marker */
		len = LDB_WORD(seg + 2);	/* Length field */
		if (len <= 2 || (marker >> 8) != 0xFF) return JDR_FMT1;
		len -= 2;		/* Content size excluding length field */
     20a:	2a7f      	cmp	r2, #127	; 0x7f
		ofs += 4 + len;	/* Number of bytes loaded */

		switch (marker & 0xFF) {
     20c:	d8fb      	bhi.n	206 <uart0_putc+0x2>
		if (jd->infunc(jd, seg, 4) != 4) return JDR_INP;
		marker = LDB_WORD(seg);		/* Marker */
		len = LDB_WORD(seg + 2);	/* Length field */
		if (len <= 2 || (marker >> 8) != 0xFF) return JDR_FMT1;
		len -= 2;		/* Content size excluding length field */
		ofs += 4 + len;	/* Number of bytes loaded */
     20e:	b672      	cpsid	i
     210:	89da      	ldrh	r2, [r3, #14]

		switch (marker & 0xFF) {
     212:	2a00      	cmp	r2, #0
		if (jd->infunc(jd, seg, 4) != 4) return JDR_INP;
		marker = LDB_WORD(seg);		/* Marker */
		len = LDB_WORD(seg + 2);	/* Length field */
		if (len <= 2 || (marker >> 8) != 0xFF) return JDR_FMT1;
		len -= 2;		/* Content size excluding length field */
		ofs += 4 + len;	/* Number of bytes loaded */
     214:	d00a      	beq.n	22c <uart0_putc+0x28>

		switch (marker & 0xFF) {
     216:	895a      	ldrh	r2, [r3, #10]
     218:	1899      	adds	r1, r3, r2
     21a:	7408      	strb	r0, [r1, #16]
     21c:	3201      	adds	r2, #1
     21e:	217f      	movs	r1, #127	; 0x7f
     220:	400a      	ands	r2, r1
     222:	815a      	strh	r2, [r3, #10]
     224:	899a      	ldrh	r2, [r3, #12]
     226:	3201      	adds	r2, #1
     228:	819a      	strh	r2, [r3, #12]
     22a:	e003      	b.n	234 <uart0_putc+0x30>
     22c:	2201      	movs	r2, #1
     22e:	81da      	strh	r2, [r3, #14]
     230:	4b02      	ldr	r3, [pc, #8]	; (23c <uart0_putc+0x38>)
     232:	6018      	str	r0, [r3, #0]
     234:	b662      	cpsie	i
     236:	bd00      	pop	{pc}
     238:	10000084 	.word	0x10000084
     23c:	40008000 	.word	0x40008000

00000240 <uart0_init>:
     240:	b530      	push	{r4, r5, lr}
     242:	b672      	cpsid	i
     244:	4b1b      	ldr	r3, [pc, #108]	; (2b4 <uart0_init+0x74>)
     246:	2280      	movs	r2, #128	; 0x80
     248:	6819      	ldr	r1, [r3, #0]
     24a:	0152      	lsls	r2, r2, #5
     24c:	430a      	orrs	r2, r1
     24e:	601a      	str	r2, [r3, #0]
     250:	2202      	movs	r2, #2
     252:	619a      	str	r2, [r3, #24]
     254:	4a18      	ldr	r2, [pc, #96]	; (2b8 <uart0_init+0x78>)
     256:	4919      	ldr	r1, [pc, #100]	; (2bc <uart0_init+0x7c>)
     258:	4c19      	ldr	r4, [pc, #100]	; (2c0 <uart0_init+0x80>)
     25a:	2383      	movs	r3, #131	; 0x83
		case 0xC0:	/* SOF0 (baseline JPEG) */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
     25c:	6013      	str	r3, [r2, #0]
     25e:	2003      	movs	r0, #3
     260:	3b83      	subs	r3, #131	; 0x83
     262:	2585      	movs	r5, #133	; 0x85
     264:	600b      	str	r3, [r1, #0]
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
     266:	6020      	str	r0, [r4, #0]
     268:	62a5      	str	r5, [r4, #40]	; 0x28
     26a:	6010      	str	r0, [r2, #0]
     26c:	3a04      	subs	r2, #4
     26e:	3084      	adds	r0, #132	; 0x84
     270:	6010      	str	r0, [r2, #0]
     272:	4c14      	ldr	r4, [pc, #80]	; (2c4 <uart0_init+0x84>)
     274:	3807      	subs	r0, #7

			jd->width = LDB_WORD(seg+3);		/* Image width in unit of pixel */
     276:	6290      	str	r0, [r2, #40]	; 0x28
     278:	22d1      	movs	r2, #209	; 0xd1
     27a:	6022      	str	r2, [r4, #0]
     27c:	6062      	str	r2, [r4, #4]
			jd->height = LDB_WORD(seg+1);		/* Image height in unit of pixel */
     27e:	4a12      	ldr	r2, [pc, #72]	; (2c8 <uart0_init+0x88>)
		case 0xC0:	/* SOF0 (baseline JPEG) */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;

			jd->width = LDB_WORD(seg+3);		/* Image width in unit of pixel */
     280:	6814      	ldr	r4, [r2, #0]
			jd->height = LDB_WORD(seg+1);		/* Image height in unit of pixel */
     282:	4320      	orrs	r0, r4
     284:	6010      	str	r0, [r2, #0]
     286:	4a11      	ldr	r2, [pc, #68]	; (2cc <uart0_init+0x8c>)
     288:	8113      	strh	r3, [r2, #8]
     28a:	8153      	strh	r3, [r2, #10]
			if (seg[5] != 3) return JDR_FMT3;	/* Err: Supports only Y/Cb/Cr format */
     28c:	8193      	strh	r3, [r2, #12]
     28e:	81d3      	strh	r3, [r2, #14]
     290:	4a0f      	ldr	r2, [pc, #60]	; (2d0 <uart0_init+0x90>)
     292:	8013      	strh	r3, [r2, #0]
     294:	8053      	strh	r3, [r2, #2]
     296:	8093      	strh	r3, [r2, #4]

			/* Check three image components */
			for (i = 0; i < 3; i++) {	
				b = seg[7 + 3 * i];							/* Get sampling factor */
     298:	3307      	adds	r3, #7
				if (!i) {	/* Y component */
     29a:	600b      	str	r3, [r1, #0]
     29c:	4b0d      	ldr	r3, [pc, #52]	; (2d4 <uart0_init+0x94>)
					if (b != 0x11 && b != 0x22 && b != 0x21)/* Check sampling factor */
     29e:	22ff      	movs	r2, #255	; 0xff
     2a0:	6819      	ldr	r1, [r3, #0]
     2a2:	0212      	lsls	r2, r2, #8
     2a4:	430a      	orrs	r2, r1
     2a6:	601a      	str	r2, [r3, #0]
     2a8:	4b0b      	ldr	r3, [pc, #44]	; (2d8 <uart0_init+0x98>)
     2aa:	2280      	movs	r2, #128	; 0x80
						return JDR_FMT3;					/* Err: Supports only 4:4:4, 4:2:0 or 4:2:2 */
					jd->msx = b >> 4; jd->msy = b & 15;		/* Size of MCU [blocks] */
     2ac:	0392      	lsls	r2, r2, #14
     2ae:	601a      	str	r2, [r3, #0]
     2b0:	b662      	cpsie	i
     2b2:	bd30      	pop	{r4, r5, pc}
     2b4:	40048080 	.word	0x40048080
				} else {	/* Cb/Cr component */
					if (b != 0x11) return JDR_FMT3;			/* Err: Sampling factor of Cr/Cb must be 1 */
     2b8:	4000800c 	.word	0x4000800c
     2bc:	40008004 	.word	0x40008004
				}
				b = seg[8 + 3 * i];							/* Get dequantizer table ID for this component */
				if (b > 3) return JDR_FMT3;					/* Err: Invalid ID */
     2c0:	40008000 	.word	0x40008000
     2c4:	400440a4 	.word	0x400440a4
			jd->width = LDB_WORD(seg+3);		/* Image width in unit of pixel */
			jd->height = LDB_WORD(seg+1);		/* Image height in unit of pixel */
			if (seg[5] != 3) return JDR_FMT3;	/* Err: Supports only Y/Cb/Cr format */

			/* Check three image components */
			for (i = 0; i < 3; i++) {	
     2c8:	50018000 	.word	0x50018000
     2cc:	10000084 	.word	0x10000084
     2d0:	10000004 	.word	0x10000004
			}
			break;

		case 0xDD:	/* DRI */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
     2d4:	e000e414 	.word	0xe000e414
     2d8:	e000e100 	.word	0xe000e100

000002dc <i2c0_init>:
     2dc:	b570      	push	{r4, r5, r6, lr}
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
     2de:	4c24      	ldr	r4, [pc, #144]	; (370 <i2c0_init+0x94>)
     2e0:	4824      	ldr	r0, [pc, #144]	; (374 <i2c0_init+0x98>)
     2e2:	4a25      	ldr	r2, [pc, #148]	; (378 <i2c0_init+0x9c>)
     2e4:	2300      	movs	r3, #0
     2e6:	6023      	str	r3, [r4, #0]
     2e8:	6003      	str	r3, [r0, #0]
     2ea:	6811      	ldr	r1, [r2, #0]
     2ec:	2510      	movs	r5, #16

			/* Get restart interval (MCUs) */
			jd->nrst = LDB_WORD(seg);
     2ee:	4329      	orrs	r1, r5
     2f0:	6011      	str	r1, [r2, #0]
     2f2:	6811      	ldr	r1, [r2, #0]
     2f4:	196d      	adds	r5, r5, r5
     2f6:	43a9      	bics	r1, r5
     2f8:	6011      	str	r1, [r2, #0]
			break;
     2fa:	4a20      	ldr	r2, [pc, #128]	; (37c <i2c0_init+0xa0>)

		case 0xC4:	/* DHT */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
     2fc:	2510      	movs	r5, #16
     2fe:	6811      	ldr	r1, [r2, #0]
     300:	1c16      	adds	r6, r2, #0
     302:	4329      	orrs	r1, r5
     304:	6011      	str	r1, [r2, #0]
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
     306:	2164      	movs	r1, #100	; 0x64
     308:	3901      	subs	r1, #1
     30a:	4d1c      	ldr	r5, [pc, #112]	; (37c <i2c0_init+0xa0>)
     30c:	6832      	ldr	r2, [r6, #0]
     30e:	2900      	cmp	r1, #0
     310:	d1fa      	bne.n	308 <i2c0_init+0x2c>
     312:	682a      	ldr	r2, [r5, #0]
     314:	3110      	adds	r1, #16
     316:	438a      	bics	r2, r1
	BYTE d, *pb, *pd;
	WORD hc, *ph;


	while (ndata) {	/* Process all tables in the segment */
		if (ndata < 17) return JDR_FMT1;	/* Err: wrong data size */
     318:	602a      	str	r2, [r5, #0]
     31a:	2264      	movs	r2, #100	; 0x64
     31c:	3a01      	subs	r2, #1
		ndata -= 17;
		d = *data++;						/* Get table number and class */
     31e:	6831      	ldr	r1, [r6, #0]
		cls = (d >> 4); num = d & 0x0F;		/* class = dc(0)/ac(1), table number = 0/1 */
		if (d & 0xEE) return JDR_FMT1;		/* Err: invalid class/number */
     320:	2a00      	cmp	r2, #0


	while (ndata) {	/* Process all tables in the segment */
		if (ndata < 17) return JDR_FMT1;	/* Err: wrong data size */
		ndata -= 17;
		d = *data++;						/* Get table number and class */
     322:	d1fb      	bne.n	31c <i2c0_init+0x40>
		cls = (d >> 4); num = d & 0x0F;		/* class = dc(0)/ac(1), table number = 0/1 */
		if (d & 0xEE) return JDR_FMT1;		/* Err: invalid class/number */
     324:	4a15      	ldr	r2, [pc, #84]	; (37c <i2c0_init+0xa0>)
     326:	6811      	ldr	r1, [r2, #0]
     328:	2220      	movs	r2, #32
     32a:	4211      	tst	r1, r2
     32c:	d101      	bne.n	332 <i2c0_init+0x56>
		pb = alloc_pool(jd, 16);			/* Allocate a memory block for the bit distribution table */
     32e:	2301      	movs	r3, #1
     330:	e7e3      	b.n	2fa <i2c0_init+0x1e>
     332:	3301      	adds	r3, #1
     334:	2b09      	cmp	r3, #9
     336:	dde0      	ble.n	2fa <i2c0_init+0x1e>
		if (!pb) return JDR_MEM1;			/* Err: not enough memory */
     338:	4b11      	ldr	r3, [pc, #68]	; (380 <i2c0_init+0xa4>)
     33a:	6819      	ldr	r1, [r3, #0]

	while (ndata) {	/* Process all tables in the segment */
		if (ndata < 17) return JDR_FMT1;	/* Err: wrong data size */
		ndata -= 17;
		d = *data++;						/* Get table number and class */
		cls = (d >> 4); num = d & 0x0F;		/* class = dc(0)/ac(1), table number = 0/1 */
     33c:	430a      	orrs	r2, r1
     33e:	601a      	str	r2, [r3, #0]
     340:	3b7c      	subs	r3, #124	; 0x7c
		if (d & 0xEE) return JDR_FMT1;		/* Err: invalid class/number */
		pb = alloc_pool(jd, 16);			/* Allocate a memory block for the bit distribution table */
		if (!pb) return JDR_MEM1;			/* Err: not enough memory */
		jd->huffbits[num][cls] = pb;
     342:	6819      	ldr	r1, [r3, #0]
     344:	2202      	movs	r2, #2
     346:	4391      	bics	r1, r2


	while (ndata) {	/* Process all tables in the segment */
		if (ndata < 17) return JDR_FMT1;	/* Err: wrong data size */
		ndata -= 17;
		d = *data++;						/* Get table number and class */
     348:	6019      	str	r1, [r3, #0]
		cls = (d >> 4); num = d & 0x0F;		/* class = dc(0)/ac(1), table number = 0/1 */
     34a:	6819      	ldr	r1, [r3, #0]
		if (d & 0xEE) return JDR_FMT1;		/* Err: invalid class/number */
		pb = alloc_pool(jd, 16);			/* Allocate a memory block for the bit distribution table */
		if (!pb) return JDR_MEM1;			/* Err: not enough memory */
		jd->huffbits[num][cls] = pb;
     34c:	430a      	orrs	r2, r1
     34e:	601a      	str	r2, [r3, #0]
		for (np = i = 0; i < 16; i++) {		/* Load number of patterns for 1 to 16-bit code */
     350:	4b0c      	ldr	r3, [pc, #48]	; (384 <i2c0_init+0xa8>)
		d = *data++;						/* Get table number and class */
		cls = (d >> 4); num = d & 0x0F;		/* class = dc(0)/ac(1), table number = 0/1 */
		if (d & 0xEE) return JDR_FMT1;		/* Err: invalid class/number */
		pb = alloc_pool(jd, 16);			/* Allocate a memory block for the bit distribution table */
		if (!pb) return JDR_MEM1;			/* Err: not enough memory */
		jd->huffbits[num][cls] = pb;
     352:	226c      	movs	r2, #108	; 0x6c

	while (ndata) {	/* Process all tables in the segment */
		if (ndata < 17) return JDR_FMT1;	/* Err: wrong data size */
		ndata -= 17;
		d = *data++;						/* Get table number and class */
		cls = (d >> 4); num = d & 0x0F;		/* class = dc(0)/ac(1), table number = 0/1 */
     354:	601a      	str	r2, [r3, #0]


	while (ndata) {	/* Process all tables in the segment */
		if (ndata < 17) return JDR_FMT1;	/* Err: wrong data size */
		ndata -= 17;
		d = *data++;						/* Get table number and class */
     356:	4a0c      	ldr	r2, [pc, #48]	; (388 <i2c0_init+0xac>)
		cls = (d >> 4); num = d & 0x0F;		/* class = dc(0)/ac(1), table number = 0/1 */
		if (d & 0xEE) return JDR_FMT1;		/* Err: invalid class/number */
		pb = alloc_pool(jd, 16);			/* Allocate a memory block for the bit distribution table */
		if (!pb) return JDR_MEM1;			/* Err: not enough memory */
		jd->huffbits[num][cls] = pb;
     358:	232d      	movs	r3, #45	; 0x2d
		for (np = i = 0; i < 16; i++) {		/* Load number of patterns for 1 to 16-bit code */
     35a:	6013      	str	r3, [r2, #0]
/*-----------------------------------------------------------------------*/

#define	LDB_WORD(ptr)		(WORD)(((WORD)*((BYTE*)(ptr))<<8)|(WORD)*(BYTE*)((ptr)+1))


JRESULT jd_prepare (
     35c:	6053      	str	r3, [r2, #4]
     35e:	4b0b      	ldr	r3, [pc, #44]	; (38c <i2c0_init+0xb0>)
		if (d & 0xEE) return JDR_FMT1;		/* Err: invalid class/number */
		pb = alloc_pool(jd, 16);			/* Allocate a memory block for the bit distribution table */
		if (!pb) return JDR_MEM1;			/* Err: not enough memory */
		jd->huffbits[num][cls] = pb;
		for (np = i = 0; i < 16; i++) {		/* Load number of patterns for 1 to 16-bit code */
			pb[i] = b = *data++;
     360:	2280      	movs	r2, #128	; 0x80
     362:	0212      	lsls	r2, r2, #8
			np += b;	/* Get sum of code words for each code */
     364:	601a      	str	r2, [r3, #0]
		if (d & 0xEE) return JDR_FMT1;		/* Err: invalid class/number */
		pb = alloc_pool(jd, 16);			/* Allocate a memory block for the bit distribution table */
		if (!pb) return JDR_MEM1;			/* Err: not enough memory */
		jd->huffbits[num][cls] = pb;
		for (np = i = 0; i < 16; i++) {		/* Load number of patterns for 1 to 16-bit code */
			pb[i] = b = *data++;
     366:	2301      	movs	r3, #1
		cls = (d >> 4); num = d & 0x0F;		/* class = dc(0)/ac(1), table number = 0/1 */
		if (d & 0xEE) return JDR_FMT1;		/* Err: invalid class/number */
		pb = alloc_pool(jd, 16);			/* Allocate a memory block for the bit distribution table */
		if (!pb) return JDR_MEM1;			/* Err: not enough memory */
		jd->huffbits[num][cls] = pb;
		for (np = i = 0; i < 16; i++) {		/* Load number of patterns for 1 to 16-bit code */
     368:	6023      	str	r3, [r4, #0]
     36a:	6003      	str	r3, [r0, #0]
     36c:	bd70      	pop	{r4, r5, r6, pc}
     36e:	46c0      	nop			; (mov r8, r8)
			pb[i] = b = *data++;
			np += b;	/* Get sum of code words for each code */
		}

		ph = alloc_pool(jd, np * sizeof (WORD));/* Allocate a memory block for the code word table */
     370:	40044030 	.word	0x40044030
		cls = (d >> 4); num = d & 0x0F;		/* class = dc(0)/ac(1), table number = 0/1 */
		if (d & 0xEE) return JDR_FMT1;		/* Err: invalid class/number */
		pb = alloc_pool(jd, 16);			/* Allocate a memory block for the bit distribution table */
		if (!pb) return JDR_MEM1;			/* Err: not enough memory */
		jd->huffbits[num][cls] = pb;
		for (np = i = 0; i < 16; i++) {		/* Load number of patterns for 1 to 16-bit code */
     374:	40044034 	.word	0x40044034
			pb[i] = b = *data++;
			np += b;	/* Get sum of code words for each code */
		}

		ph = alloc_pool(jd, np * sizeof (WORD));/* Allocate a memory block for the code word table */
     378:	50008000 	.word	0x50008000
		if (!ph) return JDR_MEM1;			/* Err: not enough memory */
     37c:	50003ffc 	.word	0x50003ffc
		jd->huffcode[num][cls] = ph;
     380:	40048080 	.word	0x40048080
     384:	40000018 	.word	0x40000018
     388:	40000010 	.word	0x40000010
     38c:	e000e100 	.word	0xe000e100

00000390 <i2c0_start>:
		hc = 0;
		for (j = i = 0; i < 16; i++) {		/* Re-build huffman code word table */
     390:	b500      	push	{lr}
     392:	4a07      	ldr	r2, [pc, #28]	; (3b0 <i2c0_start+0x20>)
     394:	2300      	movs	r3, #0
			b = pb[i];
     396:	6811      	ldr	r1, [r2, #0]
/*-----------------------------------------------------------------------*/

#define	LDB_WORD(ptr)		(WORD)(((WORD)*((BYTE*)(ptr))<<8)|(WORD)*(BYTE*)((ptr)+1))


JRESULT jd_prepare (
     398:	4299      	cmp	r1, r3
		ph = alloc_pool(jd, np * sizeof (WORD));/* Allocate a memory block for the code word table */
		if (!ph) return JDR_MEM1;			/* Err: not enough memory */
		jd->huffcode[num][cls] = ph;
		hc = 0;
		for (j = i = 0; i < 16; i++) {		/* Re-build huffman code word table */
			b = pb[i];
     39a:	d106      	bne.n	3aa <i2c0_start+0x1a>
     39c:	7003      	strb	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

#define	LDB_WORD(ptr)		(WORD)(((WORD)*((BYTE*)(ptr))<<8)|(WORD)*(BYTE*)((ptr)+1))


JRESULT jd_prepare (
     39e:	3380      	adds	r3, #128	; 0x80
     3a0:	6010      	str	r0, [r2, #0]
     3a2:	05db      	lsls	r3, r3, #23
		ph = alloc_pool(jd, np * sizeof (WORD));/* Allocate a memory block for the code word table */
		if (!ph) return JDR_MEM1;			/* Err: not enough memory */
		jd->huffcode[num][cls] = ph;
		hc = 0;
		for (j = i = 0; i < 16; i++) {		/* Re-build huffman code word table */
			b = pb[i];
     3a4:	2260      	movs	r2, #96	; 0x60
/*-----------------------------------------------------------------------*/

#define	LDB_WORD(ptr)		(WORD)(((WORD)*((BYTE*)(ptr))<<8)|(WORD)*(BYTE*)((ptr)+1))


JRESULT jd_prepare (
     3a6:	601a      	str	r2, [r3, #0]
		ph = alloc_pool(jd, np * sizeof (WORD));/* Allocate a memory block for the code word table */
		if (!ph) return JDR_MEM1;			/* Err: not enough memory */
		jd->huffcode[num][cls] = ph;
		hc = 0;
		for (j = i = 0; i < 16; i++) {		/* Re-build huffman code word table */
			b = pb[i];
     3a8:	2301      	movs	r3, #1
     3aa:	1c18      	adds	r0, r3, #0
     3ac:	bd00      	pop	{pc}
     3ae:	46c0      	nop			; (mov r8, r8)
			while (b--) ph[j++] = hc++;
     3b0:	10000114 	.word	0x10000114

000003b4 <i2c0_abort>:
     3b4:	4b03      	ldr	r3, [pc, #12]	; (3c4 <i2c0_abort+0x10>)
     3b6:	226c      	movs	r2, #108	; 0x6c
     3b8:	601a      	str	r2, [r3, #0]
     3ba:	4b03      	ldr	r3, [pc, #12]	; (3c8 <i2c0_abort+0x14>)
     3bc:	3a6c      	subs	r2, #108	; 0x6c
     3be:	601a      	str	r2, [r3, #0]
     3c0:	4770      	bx	lr
     3c2:	46c0      	nop			; (mov r8, r8)
     3c4:	40000018 	.word	0x40000018
     3c8:	10000114 	.word	0x10000114

000003cc <I2C_IRQHandler>:
     3cc:	b538      	push	{r3, r4, r5, lr}
     3ce:	4b56      	ldr	r3, [pc, #344]	; (528 <I2C_IRQHandler+0x15c>)

		ph = alloc_pool(jd, np * sizeof (WORD));/* Allocate a memory block for the code word table */
		if (!ph) return JDR_MEM1;			/* Err: not enough memory */
		jd->huffcode[num][cls] = ph;
		hc = 0;
		for (j = i = 0; i < 16; i++) {		/* Re-build huffman code word table */
     3d0:	4a56      	ldr	r2, [pc, #344]	; (52c <I2C_IRQHandler+0x160>)
     3d2:	681b      	ldr	r3, [r3, #0]
			b = pb[i];
			while (b--) ph[j++] = hc++;
			hc <<= 1;
     3d4:	2b00      	cmp	r3, #0
     3d6:	d101      	bne.n	3dc <I2C_IRQHandler+0x10>
     3d8:	336c      	adds	r3, #108	; 0x6c
	WORD hc, *ph;


	while (ndata) {	/* Process all tables in the segment */
		if (ndata < 17) return JDR_FMT1;	/* Err: wrong data size */
		ndata -= 17;
     3da:	e014      	b.n	406 <I2C_IRQHandler+0x3a>
			b = pb[i];
			while (b--) ph[j++] = hc++;
			hc <<= 1;
		}

		if (ndata < np) return JDR_FMT1;	/* Err: wrong data size */
     3dc:	4954      	ldr	r1, [pc, #336]	; (530 <I2C_IRQHandler+0x164>)
     3de:	6808      	ldr	r0, [r1, #0]
     3e0:	0600      	lsls	r0, r0, #24
		ndata -= np;
		pd = alloc_pool(jd, np);			/* Allocate a memory block for the decoded data */
     3e2:	0ec0      	lsrs	r0, r0, #27
     3e4:	3801      	subs	r0, #1
     3e6:	280a      	cmp	r0, #10
     3e8:	d900      	bls.n	3ec <I2C_IRQHandler+0x20>
		if (!pd) return JDR_MEM1;			/* Err: not enough memory */
     3ea:	e090      	b.n	50e <I2C_IRQHandler+0x142>
     3ec:	f003 f81a 	bl	3424 <__gnu_thumb1_case_uqi>
		jd->huffdata[num][cls] = pd;
     3f0:	160d5706 	.word	0x160d5706
     3f4:	5c8f6724 	.word	0x5c8f6724
     3f8:	6f67      	.short	0x6f67
     3fa:	83          	.byte	0x83
     3fb:	00          	.byte	0x00
     3fc:	7899      	ldrb	r1, [r3, #2]
		for (i = 0; i < np; i++) {			/* Load decoded data corresponds to each code ward */
     3fe:	0049      	lsls	r1, r1, #1
     400:	4b4c      	ldr	r3, [pc, #304]	; (534 <I2C_IRQHandler+0x168>)
			d = *data++;
     402:	6019      	str	r1, [r3, #0]
     404:	2328      	movs	r3, #40	; 0x28
			if (!cls && d > 11) return JDR_FMT1;
     406:	6013      	str	r3, [r2, #0]
     408:	e08d      	b.n	526 <I2C_IRQHandler+0x15a>
     40a:	7998      	ldrb	r0, [r3, #6]
     40c:	4949      	ldr	r1, [pc, #292]	; (534 <I2C_IRQHandler+0x168>)
     40e:	6008      	str	r0, [r1, #0]
     410:	2101      	movs	r1, #1
		ndata -= np;
		pd = alloc_pool(jd, np);			/* Allocate a memory block for the decoded data */
		if (!pd) return JDR_MEM1;			/* Err: not enough memory */
		jd->huffdata[num][cls] = pd;
		for (i = 0; i < np; i++) {			/* Load decoded data corresponds to each code ward */
			d = *data++;
     412:	7299      	strb	r1, [r3, #10]
     414:	78d9      	ldrb	r1, [r3, #3]
     416:	3901      	subs	r1, #1
			if (!cls && d > 11) return JDR_FMT1;
			*pd++ = d;
     418:	70d9      	strb	r1, [r3, #3]
		if (ndata < np) return JDR_FMT1;	/* Err: wrong data size */
		ndata -= np;
		pd = alloc_pool(jd, np);			/* Allocate a memory block for the decoded data */
		if (!pd) return JDR_MEM1;			/* Err: not enough memory */
		jd->huffdata[num][cls] = pd;
		for (i = 0; i < np; i++) {			/* Load decoded data corresponds to each code ward */
     41a:	e7f3      	b.n	404 <I2C_IRQHandler+0x38>
     41c:	8898      	ldrh	r0, [r3, #4]
     41e:	2180      	movs	r1, #128	; 0x80
			while (b--) ph[j++] = hc++;
			hc <<= 1;
		}

		if (ndata < np) return JDR_FMT1;	/* Err: wrong data size */
		ndata -= np;
     420:	05c9      	lsls	r1, r1, #23
	UINT i, j, b, np, cls, num;
	BYTE d, *pb, *pd;
	WORD hc, *ph;


	while (ndata) {	/* Process all tables in the segment */
     422:	2800      	cmp	r0, #0
     424:	d004      	beq.n	430 <I2C_IRQHandler+0x64>
     426:	2430      	movs	r4, #48	; 0x30
     428:	3801      	subs	r0, #1
     42a:	600c      	str	r4, [r1, #0]
     42c:	8098      	strh	r0, [r3, #4]
			if (rc) return rc;
			break;

		case 0xDB:	/* DQT */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
     42e:	e00f      	b.n	450 <I2C_IRQHandler+0x84>
     430:	2010      	movs	r0, #16
     432:	6008      	str	r0, [r1, #0]
     434:	380e      	subs	r0, #14
     436:	e02d      	b.n	494 <I2C_IRQHandler+0xc8>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
     438:	78dd      	ldrb	r5, [r3, #3]
     43a:	2d00      	cmp	r5, #0
     43c:	d00a      	beq.n	454 <I2C_IRQHandler+0x88>
     43e:	3d01      	subs	r5, #1
     440:	70dd      	strb	r5, [r3, #3]
     442:	7a99      	ldrb	r1, [r3, #10]
     444:	1858      	adds	r0, r3, r1
     446:	7984      	ldrb	r4, [r0, #6]
     448:	483a      	ldr	r0, [pc, #232]	; (534 <I2C_IRQHandler+0x168>)
	BYTE d, z;
	LONG *pb;


	while (ndata) {	/* Process all tables in the segment */
		if (ndata < 65) return JDR_FMT1;	/* Err: table size is unaligned */
     44a:	3101      	adds	r1, #1
     44c:	6004      	str	r4, [r0, #0]
     44e:	7299      	strb	r1, [r3, #10]
		ndata -= 65;
		d = *data++;							/* Get table property */
     450:	2000      	movs	r0, #0
		if (d & 0xF0) return JDR_FMT1;			/* Err: not 8-bit resolution */
     452:	e01f      	b.n	494 <I2C_IRQHandler+0xc8>


	while (ndata) {	/* Process all tables in the segment */
		if (ndata < 65) return JDR_FMT1;	/* Err: table size is unaligned */
		ndata -= 65;
		d = *data++;							/* Get table property */
     454:	8999      	ldrh	r1, [r3, #12]
		if (d & 0xF0) return JDR_FMT1;			/* Err: not 8-bit resolution */
     456:	7858      	ldrb	r0, [r3, #1]
     458:	2800      	cmp	r0, #0
     45a:	d110      	bne.n	47e <I2C_IRQHandler+0xb2>
		i = d & 3;								/* Get table ID */
		pb = alloc_pool(jd, 64 * sizeof (LONG));/* Allocate a memory block for the table */
     45c:	2900      	cmp	r1, #0
     45e:	d008      	beq.n	472 <I2C_IRQHandler+0xa6>
     460:	3901      	subs	r1, #1
     462:	8199      	strh	r1, [r3, #12]
     464:	6919      	ldr	r1, [r3, #16]
     466:	4c33      	ldr	r4, [pc, #204]	; (534 <I2C_IRQHandler+0x168>)
		if (!pb) return JDR_MEM1;				/* Err: not enough memory */
     468:	780d      	ldrb	r5, [r1, #0]
     46a:	3101      	adds	r1, #1
	while (ndata) {	/* Process all tables in the segment */
		if (ndata < 65) return JDR_FMT1;	/* Err: table size is unaligned */
		ndata -= 65;
		d = *data++;							/* Get table property */
		if (d & 0xF0) return JDR_FMT1;			/* Err: not 8-bit resolution */
		i = d & 3;								/* Get table ID */
     46c:	6025      	str	r5, [r4, #0]
		pb = alloc_pool(jd, 64 * sizeof (LONG));/* Allocate a memory block for the table */
		if (!pb) return JDR_MEM1;				/* Err: not enough memory */
		jd->qttbl[i] = pb;						/* Register the table */
     46e:	6119      	str	r1, [r3, #16]
	while (ndata) {	/* Process all tables in the segment */
		if (ndata < 65) return JDR_FMT1;	/* Err: table size is unaligned */
		ndata -= 65;
		d = *data++;							/* Get table property */
		if (d & 0xF0) return JDR_FMT1;			/* Err: not 8-bit resolution */
		i = d & 3;								/* Get table ID */
     470:	e010      	b.n	494 <I2C_IRQHandler+0xc8>
		pb = alloc_pool(jd, 64 * sizeof (LONG));/* Allocate a memory block for the table */
		if (!pb) return JDR_MEM1;				/* Err: not enough memory */
		jd->qttbl[i] = pb;						/* Register the table */
     472:	2180      	movs	r1, #128	; 0x80
     474:	2010      	movs	r0, #16
     476:	05c9      	lsls	r1, r1, #23
     478:	6008      	str	r0, [r1, #0]
     47a:	380f      	subs	r0, #15
/*-----------------------------------------------------------------------*/

#define	LDB_WORD(ptr)		(WORD)(((WORD)*((BYTE*)(ptr))<<8)|(WORD)*(BYTE*)((ptr)+1))


JRESULT jd_prepare (
     47c:	e00a      	b.n	494 <I2C_IRQHandler+0xc8>
     47e:	2480      	movs	r4, #128	; 0x80
     480:	05e4      	lsls	r4, r4, #23
		i = d & 3;								/* Get table ID */
		pb = alloc_pool(jd, 64 * sizeof (LONG));/* Allocate a memory block for the table */
		if (!pb) return JDR_MEM1;				/* Err: not enough memory */
		jd->qttbl[i] = pb;						/* Register the table */
		for (i = 0; i < 64; i++) {				/* Load the table */
			z = ZIG(i);							/* Zigzag-order to raster-order conversion */
     482:	2900      	cmp	r1, #0
			pb[z] = (LONG)((DWORD)*data++ * IPSF(z));	/* Apply scale factor of Arai algorithm to the de-quantizers */
     484:	d003      	beq.n	48e <I2C_IRQHandler+0xc2>
     486:	2120      	movs	r1, #32
     488:	6021      	str	r1, [r4, #0]
     48a:	1c28      	adds	r0, r5, #0
     48c:	e002      	b.n	494 <I2C_IRQHandler+0xc8>
     48e:	2110      	movs	r1, #16
     490:	6021      	str	r1, [r4, #0]
     492:	2001      	movs	r0, #1
     494:	2108      	movs	r1, #8
     496:	6011      	str	r1, [r2, #0]
		if (d & 0xF0) return JDR_FMT1;			/* Err: not 8-bit resolution */
		i = d & 3;								/* Get table ID */
		pb = alloc_pool(jd, 64 * sizeof (LONG));/* Allocate a memory block for the table */
		if (!pb) return JDR_MEM1;				/* Err: not enough memory */
		jd->qttbl[i] = pb;						/* Register the table */
		for (i = 0; i < 64; i++) {				/* Load the table */
     498:	2800      	cmp	r0, #0
     49a:	d13b      	bne.n	514 <I2C_IRQHandler+0x148>
	LONG *pb;


	while (ndata) {	/* Process all tables in the segment */
		if (ndata < 65) return JDR_FMT1;	/* Err: table size is unaligned */
		ndata -= 65;
     49c:	e043      	b.n	526 <I2C_IRQHandler+0x15a>
/*-----------------------------------------------------------------------*/

#define	LDB_WORD(ptr)		(WORD)(((WORD)*((BYTE*)(ptr))<<8)|(WORD)*(BYTE*)((ptr)+1))


JRESULT jd_prepare (
     49e:	7899      	ldrb	r1, [r3, #2]
	UINT i;
	BYTE d, z;
	LONG *pb;


	while (ndata) {	/* Process all tables in the segment */
     4a0:	2301      	movs	r3, #1
     4a2:	0049      	lsls	r1, r1, #1
     4a4:	4319      	orrs	r1, r3
     4a6:	e7ab      	b.n	400 <I2C_IRQHandler+0x34>
     4a8:	899b      	ldrh	r3, [r3, #12]
			if (rc) return rc;
			break;

		case 0xDA:	/* SOS */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
     4aa:	2b01      	cmp	r3, #1
     4ac:	d905      	bls.n	4ba <I2C_IRQHandler+0xee>
     4ae:	2380      	movs	r3, #128	; 0x80
     4b0:	05db      	lsls	r3, r3, #23
     4b2:	2104      	movs	r1, #4
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
     4b4:	6019      	str	r1, [r3, #0]
     4b6:	2308      	movs	r3, #8
     4b8:	e7a5      	b.n	406 <I2C_IRQHandler+0x3a>
     4ba:	230c      	movs	r3, #12
     4bc:	e7a3      	b.n	406 <I2C_IRQHandler+0x3a>
     4be:	2180      	movs	r1, #128	; 0x80
     4c0:	2010      	movs	r0, #16
     4c2:	05c9      	lsls	r1, r1, #23

			if (!jd->width || !jd->height) return JDR_FMT1;	/* Err: Invalid image size */
     4c4:	6008      	str	r0, [r1, #0]
     4c6:	2108      	movs	r1, #8
     4c8:	6011      	str	r1, [r2, #0]
     4ca:	380d      	subs	r0, #13
     4cc:	e022      	b.n	514 <I2C_IRQHandler+0x148>
     4ce:	4819      	ldr	r0, [pc, #100]	; (534 <I2C_IRQHandler+0x168>)
     4d0:	6919      	ldr	r1, [r3, #16]

			if (seg[0] != 3) return JDR_FMT3;				/* Err: Supports only three color components format */
     4d2:	6800      	ldr	r0, [r0, #0]
     4d4:	7008      	strb	r0, [r1, #0]
     4d6:	3101      	adds	r1, #1
     4d8:	6119      	str	r1, [r3, #16]
     4da:	8999      	ldrh	r1, [r3, #12]

			/* Check if all tables corresponding to each components have been loaded */
			for (i = 0; i < 3; i++) {
				b = seg[2 + 2 * i];	/* Get huffman table ID */
     4dc:	200c      	movs	r0, #12
/*-----------------------------------------------------------------------*/

#define	LDB_WORD(ptr)		(WORD)(((WORD)*((BYTE*)(ptr))<<8)|(WORD)*(BYTE*)((ptr)+1))


JRESULT jd_prepare (
     4de:	3901      	subs	r1, #1

			if (seg[0] != 3) return JDR_FMT3;				/* Err: Supports only three color components format */

			/* Check if all tables corresponding to each components have been loaded */
			for (i = 0; i < 3; i++) {
				b = seg[2 + 2 * i];	/* Get huffman table ID */
     4e0:	b289      	uxth	r1, r1
				if (b != 0x00 && b != 0x11)	return JDR_FMT3;	/* Err: Different table number for DC/AC element */
     4e2:	2901      	cmp	r1, #1
     4e4:	d904      	bls.n	4f0 <I2C_IRQHandler+0x124>
     4e6:	2080      	movs	r0, #128	; 0x80
     4e8:	05c0      	lsls	r0, r0, #23
				b = i ? 1 : 0;
				if (!jd->huffbits[b][0] || !jd->huffbits[b][1])	/* Check huffman table for this component */
     4ea:	2404      	movs	r4, #4
     4ec:	6004      	str	r4, [r0, #0]
     4ee:	2008      	movs	r0, #8
     4f0:	6010      	str	r0, [r2, #0]
     4f2:	8199      	strh	r1, [r3, #12]
     4f4:	e017      	b.n	526 <I2C_IRQHandler+0x15a>
     4f6:	480f      	ldr	r0, [pc, #60]	; (534 <I2C_IRQHandler+0x168>)
     4f8:	6919      	ldr	r1, [r3, #16]
     4fa:	6800      	ldr	r0, [r0, #0]
     4fc:	7008      	strb	r0, [r1, #0]
     4fe:	2180      	movs	r1, #128	; 0x80
     500:	2010      	movs	r0, #16
     502:	05c9      	lsls	r1, r1, #23
     504:	6008      	str	r0, [r1, #0]
/*-----------------------------------------------------------------------*/

#define	LDB_WORD(ptr)		(WORD)(((WORD)*((BYTE*)(ptr))<<8)|(WORD)*(BYTE*)((ptr)+1))


JRESULT jd_prepare (
     506:	2108      	movs	r1, #8
				b = seg[2 + 2 * i];	/* Get huffman table ID */
				if (b != 0x00 && b != 0x11)	return JDR_FMT3;	/* Err: Different table number for DC/AC element */
				b = i ? 1 : 0;
				if (!jd->huffbits[b][0] || !jd->huffbits[b][1])	/* Check huffman table for this component */
					return JDR_FMT1;							/* Err: Huffman table not loaded */
				if (!jd->qttbl[jd->qtid[i]]) return JDR_FMT1;	/* Err: Dequantizer table not loaded */
     508:	6011      	str	r1, [r2, #0]
     50a:	380f      	subs	r0, #15
     50c:	e002      	b.n	514 <I2C_IRQHandler+0x148>
     50e:	216c      	movs	r1, #108	; 0x6c
     510:	6011      	str	r1, [r2, #0]
     512:	2004      	movs	r0, #4
     514:	4a04      	ldr	r2, [pc, #16]	; (528 <I2C_IRQHandler+0x15c>)
			if (!jd->width || !jd->height) return JDR_FMT1;	/* Err: Invalid image size */

			if (seg[0] != 3) return JDR_FMT3;				/* Err: Supports only three color components format */

			/* Check if all tables corresponding to each components have been loaded */
			for (i = 0; i < 3; i++) {
     516:	2100      	movs	r1, #0
     518:	7018      	strb	r0, [r3, #0]
					return JDR_FMT1;							/* Err: Huffman table not loaded */
				if (!jd->qttbl[jd->qtid[i]]) return JDR_FMT1;	/* Err: Dequantizer table not loaded */
			}

			/* Allocate working buffer for MCU and RGB */
			n = jd->msy * jd->msx;						/* Number of Y blocks in the MCU */
     51a:	6011      	str	r1, [r2, #0]
     51c:	695a      	ldr	r2, [r3, #20]
			if (!n) return JDR_FMT1;					/* Err: SOF0 has not been loaded */
     51e:	428a      	cmp	r2, r1
					return JDR_FMT1;							/* Err: Huffman table not loaded */
				if (!jd->qttbl[jd->qtid[i]]) return JDR_FMT1;	/* Err: Dequantizer table not loaded */
			}

			/* Allocate working buffer for MCU and RGB */
			n = jd->msy * jd->msx;						/* Number of Y blocks in the MCU */
     520:	d001      	beq.n	526 <I2C_IRQHandler+0x15a>
			if (!n) return JDR_FMT1;					/* Err: SOF0 has not been loaded */
     522:	695b      	ldr	r3, [r3, #20]
     524:	4798      	blx	r3
			len = n * 64 * 2 + 64;						/* Allocate buffer for IDCT and RGB output */
     526:	bd38      	pop	{r3, r4, r5, pc}
     528:	10000114 	.word	0x10000114
			if (len < 256) len = 256;					/* but at least 256 byte is required for IDCT */
     52c:	40000018 	.word	0x40000018
     530:	40000004 	.word	0x40000004
			jd->workbuf = alloc_pool(jd, len);			/* and it may occupy a part of following MCU working buffer for RGB output */
     534:	40000008 	.word	0x40000008

00000538 <xputc>:
			if (!jd->workbuf) return JDR_MEM1;			/* Err: not enough memory */
     538:	b510      	push	{r4, lr}
			/* Allocate working buffer for MCU and RGB */
			n = jd->msy * jd->msx;						/* Number of Y blocks in the MCU */
			if (!n) return JDR_FMT1;					/* Err: SOF0 has not been loaded */
			len = n * 64 * 2 + 64;						/* Allocate buffer for IDCT and RGB output */
			if (len < 256) len = 256;					/* but at least 256 byte is required for IDCT */
			jd->workbuf = alloc_pool(jd, len);			/* and it may occupy a part of following MCU working buffer for RGB output */
     53a:	1c04      	adds	r4, r0, #0
			if (!jd->workbuf) return JDR_MEM1;			/* Err: not enough memory */
     53c:	280a      	cmp	r0, #10
     53e:	d102      	bne.n	546 <xputc+0xe>
			jd->mcubuf = alloc_pool(jd, (n + 2) * 64);	/* Allocate MCU working buffer */
     540:	200d      	movs	r0, #13
     542:	f7ff fff9 	bl	538 <xputc>
     546:	4a07      	ldr	r2, [pc, #28]	; (564 <xputc+0x2c>)
     548:	6813      	ldr	r3, [r2, #0]
     54a:	2b00      	cmp	r3, #0
			if (!jd->mcubuf) return JDR_MEM1;			/* Err: not enough memory */
     54c:	d003      	beq.n	556 <xputc+0x1e>
     54e:	701c      	strb	r4, [r3, #0]

			/* Pre-load the JPEG data to extract it from the bit stream */
			jd->dptr = seg; jd->dctr = 0; jd->dmsk = 0;	/* Prepare to read bit stream */
			if (ofs %= JD_SZBUF) {						/* Align read offset to JD_SZBUF */
     550:	3301      	adds	r3, #1
			if (!jd->workbuf) return JDR_MEM1;			/* Err: not enough memory */
			jd->mcubuf = alloc_pool(jd, (n + 2) * 64);	/* Allocate MCU working buffer */
			if (!jd->mcubuf) return JDR_MEM1;			/* Err: not enough memory */

			/* Pre-load the JPEG data to extract it from the bit stream */
			jd->dptr = seg; jd->dctr = 0; jd->dmsk = 0;	/* Prepare to read bit stream */
     552:	6013      	str	r3, [r2, #0]
			if (ofs %= JD_SZBUF) {						/* Align read offset to JD_SZBUF */
     554:	e005      	b.n	562 <xputc+0x2a>
     556:	4b04      	ldr	r3, [pc, #16]	; (568 <xputc+0x30>)
			if (!jd->workbuf) return JDR_MEM1;			/* Err: not enough memory */
			jd->mcubuf = alloc_pool(jd, (n + 2) * 64);	/* Allocate MCU working buffer */
			if (!jd->mcubuf) return JDR_MEM1;			/* Err: not enough memory */

			/* Pre-load the JPEG data to extract it from the bit stream */
			jd->dptr = seg; jd->dctr = 0; jd->dmsk = 0;	/* Prepare to read bit stream */
     558:	681b      	ldr	r3, [r3, #0]
     55a:	2b00      	cmp	r3, #0
     55c:	d001      	beq.n	562 <xputc+0x2a>
			if (ofs %= JD_SZBUF) {						/* Align read offset to JD_SZBUF */
     55e:	1c20      	adds	r0, r4, #0
     560:	4798      	blx	r3
				jd->dctr = jd->infunc(jd, seg + ofs, JD_SZBUF - (UINT)ofs);
     562:	bd10      	pop	{r4, pc}
     564:	10000118 	.word	0x10000118
     568:	10000134 	.word	0x10000134

0000056c <xputs>:
     56c:	b510      	push	{r4, lr}
     56e:	1c04      	adds	r4, r0, #0
				jd->dptr = seg + ofs - 1;
     570:	e002      	b.n	578 <xputs+0xc>
     572:	3401      	adds	r4, #1
			if (!jd->mcubuf) return JDR_MEM1;			/* Err: not enough memory */

			/* Pre-load the JPEG data to extract it from the bit stream */
			jd->dptr = seg; jd->dctr = 0; jd->dmsk = 0;	/* Prepare to read bit stream */
			if (ofs %= JD_SZBUF) {						/* Align read offset to JD_SZBUF */
				jd->dctr = jd->infunc(jd, seg + ofs, JD_SZBUF - (UINT)ofs);
     574:	f7ff ffe0 	bl	538 <xputc>
				jd->dptr = seg + ofs - 1;
			}

			return JDR_OK;		/* Initialization succeeded. Ready to decompress the JPEG image. */
     578:	7820      	ldrb	r0, [r4, #0]
     57a:	2800      	cmp	r0, #0
		case 0xD9:	/* EOI */
			return JDR_FMT3;	/* Unsuppoted JPEG standard (may be progressive JPEG) */

		default:	/* Unknown segment (comment, exif or etc..) */
			/* Skip segment data */
			if (jd->infunc(jd, 0, len) != len)	/* Null pointer specifies to skip bytes of stream */
     57c:	d1f9      	bne.n	572 <xputs+0x6>
     57e:	bd10      	pop	{r4, pc}

00000580 <xvprintf>:
     580:	b5f0      	push	{r4, r5, r6, r7, lr}
     582:	b08b      	sub	sp, #44	; 0x2c
     584:	1c04      	adds	r4, r0, #0
     586:	1c0e      	adds	r6, r1, #0
     588:	e000      	b.n	58c <xvprintf+0xc>
     58a:	9e03      	ldr	r6, [sp, #12]
     58c:	7820      	ldrb	r0, [r4, #0]
			if (rc) return rc;
			break;

		case 0xDB:	/* DQT */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
     58e:	2800      	cmp	r0, #0
     590:	d100      	bne.n	594 <xvprintf+0x14>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
     592:	e0d6      	b.n	742 <xvprintf+0x1c2>
     594:	3401      	adds	r4, #1
			if (seg[0] != 3) return JDR_FMT3;				/* Err: Supports only three color components format */

			/* Check if all tables corresponding to each components have been loaded */
			for (i = 0; i < 3; i++) {
				b = seg[2 + 2 * i];	/* Get huffman table ID */
				if (b != 0x00 && b != 0x11)	return JDR_FMT3;	/* Err: Different table number for DC/AC element */
     596:	2825      	cmp	r0, #37	; 0x25
     598:	d16f      	bne.n	67a <xvprintf+0xfa>
				b = i ? 1 : 0;
				if (!jd->huffbits[b][0] || !jd->huffbits[b][1])	/* Check huffman table for this component */
					return JDR_FMT1;							/* Err: Huffman table not loaded */
				if (!jd->qttbl[jd->qtid[i]]) return JDR_FMT1;	/* Err: Dequantizer table not loaded */
     59a:	7825      	ldrb	r5, [r4, #0]
			/* Skip segment data */
			if (jd->infunc(jd, 0, len) != len)	/* Null pointer specifies to skip bytes of stream */
				return JDR_INP;
		}
	}
}
     59c:	3401      	adds	r4, #1
     59e:	2d30      	cmp	r5, #48	; 0x30
     5a0:	d104      	bne.n	5ac <xvprintf+0x2c>
     5a2:	2101      	movs	r1, #1
     5a4:	7825      	ldrb	r5, [r4, #0]
     5a6:	9101      	str	r1, [sp, #4]
JRESULT jd_decomp (
	JDEC* jd,								/* Initialized decompression object */
	UINT (*outfunc)(JDEC*, void*, JRECT*),	/* RGB output function */
	BYTE scale								/* Output de-scaling factor (0 to 3) */
)
{
     5a8:	3401      	adds	r4, #1
     5aa:	e007      	b.n	5bc <xvprintf+0x3c>
     5ac:	2200      	movs	r2, #0
     5ae:	9201      	str	r2, [sp, #4]
	UINT x, y, mx, my;
	WORD rst, rsc;
	JRESULT rc;


	if (scale > (JD_USE_SCALE ? 3 : 0)) return JDR_PAR;
     5b0:	2d2d      	cmp	r5, #45	; 0x2d
     5b2:	d103      	bne.n	5bc <xvprintf+0x3c>
     5b4:	2302      	movs	r3, #2
     5b6:	7825      	ldrb	r5, [r4, #0]
	jd->scale = scale;

	mx = jd->msx * 8; my = jd->msy * 8;			/* Size of the MCU (pixel) */
     5b8:	9301      	str	r3, [sp, #4]
	WORD rst, rsc;
	JRESULT rc;


	if (scale > (JD_USE_SCALE ? 3 : 0)) return JDR_PAR;
	jd->scale = scale;
     5ba:	3401      	adds	r4, #1

	mx = jd->msx * 8; my = jd->msy * 8;			/* Size of the MCU (pixel) */
     5bc:	2100      	movs	r1, #0
     5be:	9102      	str	r1, [sp, #8]
     5c0:	e008      	b.n	5d4 <xvprintf+0x54>
     5c2:	9a02      	ldr	r2, [sp, #8]
     5c4:	0093      	lsls	r3, r2, #2

	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;	/* Initialize DC values */
     5c6:	189b      	adds	r3, r3, r2
     5c8:	005b      	lsls	r3, r3, #1
     5ca:	195d      	adds	r5, r3, r5
     5cc:	3d30      	subs	r5, #48	; 0x30
	rst = rsc = 0;
     5ce:	9502      	str	r5, [sp, #8]
     5d0:	7825      	ldrb	r5, [r4, #0]

	rc = JDR_OK;
	for (y = 0; y < jd->height; y += my) {		/* Vertical loop of MCUs */
     5d2:	3401      	adds	r4, #1
     5d4:	1c2b      	adds	r3, r5, #0
		for (x = 0; x < jd->width; x += mx) {	/* Horizontal loop of MCUs */
			if (jd->nrst && rst++ == jd->nrst) {	/* Process restart interval if enabled */
     5d6:	3b30      	subs	r3, #48	; 0x30
     5d8:	2b09      	cmp	r3, #9
     5da:	d9f2      	bls.n	5c2 <xvprintf+0x42>
     5dc:	2d4c      	cmp	r5, #76	; 0x4c
     5de:	d001      	beq.n	5e4 <xvprintf+0x64>
     5e0:	2d6c      	cmp	r5, #108	; 0x6c
     5e2:	d105      	bne.n	5f0 <xvprintf+0x70>
     5e4:	9901      	ldr	r1, [sp, #4]
     5e6:	2304      	movs	r3, #4
     5e8:	4319      	orrs	r1, r3
	WORD d;
	BYTE *dp;


	/* Discard padding bits and get two bytes from the input stream */
	dp = jd->dptr; dc = jd->dctr;
     5ea:	7825      	ldrb	r5, [r4, #0]
     5ec:	9101      	str	r1, [sp, #4]
     5ee:	3401      	adds	r4, #1
	d = 0;
     5f0:	2d00      	cmp	r5, #0
		if (!dc) {	/* No input data is available, re-fill input buffer */
			dp = jd->inbuf;
			dc = jd->infunc(jd, dp, JD_SZBUF);
			if (!dc) return JDR_INP;
		} else {
			dp++;
     5f2:	d100      	bne.n	5f6 <xvprintf+0x76>

	/* Discard padding bits and get two bytes from the input stream */
	dp = jd->dptr; dc = jd->dctr;
	d = 0;
	for (i = 0; i < 2; i++) {
		if (!dc) {	/* No input data is available, re-fill input buffer */
     5f4:	e0a5      	b.n	742 <xvprintf+0x1c2>
     5f6:	1c2b      	adds	r3, r5, #0
			dp = jd->inbuf;
     5f8:	2d60      	cmp	r5, #96	; 0x60
			dc = jd->infunc(jd, dp, JD_SZBUF);
     5fa:	d901      	bls.n	600 <xvprintf+0x80>
     5fc:	3b20      	subs	r3, #32
     5fe:	b2db      	uxtb	r3, r3
     600:	2b4f      	cmp	r3, #79	; 0x4f
     602:	d041      	beq.n	688 <xvprintf+0x108>
     604:	d806      	bhi.n	614 <xvprintf+0x94>
			if (!dc) return JDR_INP;
     606:	2b43      	cmp	r3, #67	; 0x43
     608:	d02e      	beq.n	668 <xvprintf+0xe8>
		} else {
			dp++;
		}
		dc--;
		d = (d << 8) | *dp;	/* Get a byte */
     60a:	2b44      	cmp	r3, #68	; 0x44
     60c:	d009      	beq.n	622 <xvprintf+0xa2>
     60e:	2b42      	cmp	r3, #66	; 0x42
     610:	d132      	bne.n	678 <xvprintf+0xf8>
			dc = jd->infunc(jd, dp, JD_SZBUF);
			if (!dc) return JDR_INP;
		} else {
			dp++;
		}
		dc--;
     612:	e036      	b.n	682 <xvprintf+0x102>
		d = (d << 8) | *dp;	/* Get a byte */
     614:	2b55      	cmp	r3, #85	; 0x55


	/* Discard padding bits and get two bytes from the input stream */
	dp = jd->dptr; dc = jd->dctr;
	d = 0;
	for (i = 0; i < 2; i++) {
     616:	d004      	beq.n	622 <xvprintf+0xa2>
     618:	2b58      	cmp	r3, #88	; 0x58
		d = (d << 8) | *dp;	/* Get a byte */
	}
	jd->dptr = dp; jd->dctr = dc; jd->dmsk = 0;

	/* Check the marker */
	if ((d & 0xFFD8) != 0xFFD0 || (d & 7) != (rstn & 7))
     61a:	d02b      	beq.n	674 <xvprintf+0xf4>
     61c:	2b53      	cmp	r3, #83	; 0x53
     61e:	d12b      	bne.n	678 <xvprintf+0xf8>
			dp++;
		}
		dc--;
		d = (d << 8) | *dp;	/* Get a byte */
	}
	jd->dptr = dp; jd->dctr = dc; jd->dmsk = 0;
     620:	e001      	b.n	626 <xvprintf+0xa6>
     622:	220a      	movs	r2, #10
     624:	e031      	b.n	68a <xvprintf+0x10a>

	/* Check the marker */
	if ((d & 0xFFD8) != 0xFFD0 || (d & 7) != (rstn & 7))
     626:	1d33      	adds	r3, r6, #4
     628:	9303      	str	r3, [sp, #12]
     62a:	6836      	ldr	r6, [r6, #0]
     62c:	2500      	movs	r5, #0
     62e:	e000      	b.n	632 <xvprintf+0xb2>
     630:	3501      	adds	r5, #1
     632:	5d73      	ldrb	r3, [r6, r5]
     634:	2b00      	cmp	r3, #0

	rc = JDR_OK;
	for (y = 0; y < jd->height; y += my) {		/* Vertical loop of MCUs */
		for (x = 0; x < jd->width; x += mx) {	/* Horizontal loop of MCUs */
			if (jd->nrst && rst++ == jd->nrst) {	/* Process restart interval if enabled */
				rc = restart(jd, rsc++);
     636:	d1fb      	bne.n	630 <xvprintf+0xb0>
     638:	e002      	b.n	640 <xvprintf+0xc0>
     63a:	2020      	movs	r0, #32
     63c:	f7ff ff7c 	bl	538 <xputc>
	/* Check the marker */
	if ((d & 0xFFD8) != 0xFFD0 || (d & 7) != (rstn & 7))
		return JDR_FMT1;	/* Err: expected RSTn marker is not detected (may be collapted data) */

	/* Reset DC offset */
	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;
     640:	9901      	ldr	r1, [sp, #4]
     642:	0789      	lsls	r1, r1, #30
	for (y = 0; y < jd->height; y += my) {		/* Vertical loop of MCUs */
		for (x = 0; x < jd->width; x += mx) {	/* Horizontal loop of MCUs */
			if (jd->nrst && rst++ == jd->nrst) {	/* Process restart interval if enabled */
				rc = restart(jd, rsc++);
				if (rc != JDR_OK) return rc;
				rst = 1;
     644:	d404      	bmi.n	650 <xvprintf+0xd0>
     646:	3501      	adds	r5, #1
     648:	9a02      	ldr	r2, [sp, #8]
	d = 0;
	for (i = 0; i < 2; i++) {
		if (!dc) {	/* No input data is available, re-fill input buffer */
			dp = jd->inbuf;
			dc = jd->infunc(jd, dp, JD_SZBUF);
			if (!dc) return JDR_INP;
     64a:	1e6b      	subs	r3, r5, #1
     64c:	4293      	cmp	r3, r2
static
JRESULT mcu_load (
	JDEC* jd		/* Pointer to the decompressor object */
)
{
	LONG *tmp = (LONG*)jd->workbuf;	/* Block working buffer for de-quantize and IDCT */
     64e:	d3f4      	bcc.n	63a <xvprintf+0xba>
	const LONG *dqf;


	nby = jd->msx * jd->msy;	/* Number of Y blocks (1, 2 or 4) */
	nbc = 2;					/* Number of C blocks (2) */
	bp = jd->mcubuf;			/* Pointer to the first block */
     650:	1c30      	adds	r0, r6, #0
static
JRESULT mcu_load (
	JDEC* jd		/* Pointer to the decompressor object */
)
{
	LONG *tmp = (LONG*)jd->workbuf;	/* Block working buffer for de-quantize and IDCT */
     652:	f7ff ff8b 	bl	56c <xputs>
	const BYTE *hb, *hd;
	const WORD *hc;
	const LONG *dqf;


	nby = jd->msx * jd->msy;	/* Number of Y blocks (1, 2 or 4) */
     656:	e003      	b.n	660 <xvprintf+0xe0>
	nbc = 2;					/* Number of C blocks (2) */
	bp = jd->mcubuf;			/* Pointer to the first block */

	for (blk = 0; blk < nby + nbc; blk++) {
     658:	2020      	movs	r0, #32
	const BYTE *hb, *hd;
	const WORD *hc;
	const LONG *dqf;


	nby = jd->msx * jd->msy;	/* Number of Y blocks (1, 2 or 4) */
     65a:	f7ff ff6d 	bl	538 <xputc>
     65e:	3501      	adds	r5, #1
	nbc = 2;					/* Number of C blocks (2) */
	bp = jd->mcubuf;			/* Pointer to the first block */

	for (blk = 0; blk < nby + nbc; blk++) {
     660:	9b02      	ldr	r3, [sp, #8]
     662:	429d      	cmp	r5, r3
		cmp = (blk < nby) ? 0 : blk - nby + 1;	/* Component number 0:Y, 1:Cb, 2:Cr */
     664:	d3f8      	bcc.n	658 <xvprintf+0xd8>
     666:	e790      	b.n	58a <xvprintf+0xa>
     668:	1d31      	adds	r1, r6, #4
     66a:	7830      	ldrb	r0, [r6, #0]
     66c:	9103      	str	r1, [sp, #12]
     66e:	f7ff ff63 	bl	538 <xputc>
		id = cmp ? 1 : 0;						/* Huffman table ID of the component */
     672:	e78a      	b.n	58a <xvprintf+0xa>
     674:	2210      	movs	r2, #16
     676:	e008      	b.n	68a <xvprintf+0x10a>
     678:	1c28      	adds	r0, r5, #0

		/* Extract a DC element from input stream */
		hb = jd->huffbits[id][0];				/* Huffman table for the DC element */
		hc = jd->huffcode[id][0];
		hd = jd->huffdata[id][0];
     67a:	f7ff ff5d 	bl	538 <xputc>
	for (blk = 0; blk < nby + nbc; blk++) {
		cmp = (blk < nby) ? 0 : blk - nby + 1;	/* Component number 0:Y, 1:Cb, 2:Cr */
		id = cmp ? 1 : 0;						/* Huffman table ID of the component */

		/* Extract a DC element from input stream */
		hb = jd->huffbits[id][0];				/* Huffman table for the DC element */
     67e:	9603      	str	r6, [sp, #12]
		hc = jd->huffcode[id][0];
     680:	e783      	b.n	58a <xvprintf+0xa>
		hd = jd->huffdata[id][0];
     682:	2102      	movs	r1, #2
	for (blk = 0; blk < nby + nbc; blk++) {
		cmp = (blk < nby) ? 0 : blk - nby + 1;	/* Component number 0:Y, 1:Cb, 2:Cr */
		id = cmp ? 1 : 0;						/* Huffman table ID of the component */

		/* Extract a DC element from input stream */
		hb = jd->huffbits[id][0];				/* Huffman table for the DC element */
     684:	9104      	str	r1, [sp, #16]
		hc = jd->huffcode[id][0];
     686:	e001      	b.n	68c <xvprintf+0x10c>
		hd = jd->huffdata[id][0];
     688:	2208      	movs	r2, #8
	for (blk = 0; blk < nby + nbc; blk++) {
		cmp = (blk < nby) ? 0 : blk - nby + 1;	/* Component number 0:Y, 1:Cb, 2:Cr */
		id = cmp ? 1 : 0;						/* Huffman table ID of the component */

		/* Extract a DC element from input stream */
		hb = jd->huffbits[id][0];				/* Huffman table for the DC element */
     68a:	9204      	str	r2, [sp, #16]
		hc = jd->huffcode[id][0];
     68c:	9901      	ldr	r1, [sp, #4]
		hd = jd->huffdata[id][0];
     68e:	1d32      	adds	r2, r6, #4
		b = huffext(jd, hb, hc, hd);			/* Extract a huffman coded data (bit length) */
     690:	0749      	lsls	r1, r1, #29
     692:	d502      	bpl.n	69a <xvprintf+0x11a>
     694:	9203      	str	r2, [sp, #12]
     696:	6837      	ldr	r7, [r6, #0]
     698:	e001      	b.n	69e <xvprintf+0x11e>
     69a:	6837      	ldr	r7, [r6, #0]
		if (b < 0) return 0 - b;				/* Err: invalid code or input */
     69c:	9203      	str	r2, [sp, #12]
     69e:	2f00      	cmp	r7, #0
     6a0:	da06      	bge.n	6b0 <xvprintf+0x130>
     6a2:	2b44      	cmp	r3, #68	; 0x44
		d = jd->dcv[cmp];						/* DC value of previous block */
     6a4:	d104      	bne.n	6b0 <xvprintf+0x130>
     6a6:	9a01      	ldr	r2, [sp, #4]
     6a8:	3b3c      	subs	r3, #60	; 0x3c
     6aa:	431a      	orrs	r2, r3
     6ac:	427f      	negs	r7, r7
     6ae:	9201      	str	r2, [sp, #4]
		if (b) {								/* If there is any difference from previous block */
     6b0:	2600      	movs	r6, #0
     6b2:	1c38      	adds	r0, r7, #0
			e = bitext(jd, b);					/* Extract data bits */
     6b4:	9904      	ldr	r1, [sp, #16]
     6b6:	f002 ff0d 	bl	34d4 <__aeabi_uidivmod>
     6ba:	b2c9      	uxtb	r1, r1
			if (e < 0) return 0 - e;			/* Err: input */
     6bc:	9105      	str	r1, [sp, #20]
     6be:	1c38      	adds	r0, r7, #0
			b = 1 << (b - 1);					/* MSB position */
     6c0:	9904      	ldr	r1, [sp, #16]
     6c2:	f002 fec3 	bl	344c <__aeabi_uidiv>
     6c6:	9b05      	ldr	r3, [sp, #20]
     6c8:	1c07      	adds	r7, r0, #0
			if (!(e & b)) e -= (b << 1) - 1;	/* Restore sign if needed */
     6ca:	2b09      	cmp	r3, #9
     6cc:	d907      	bls.n	6de <xvprintf+0x15e>
     6ce:	2307      	movs	r3, #7
     6d0:	2d78      	cmp	r5, #120	; 0x78
     6d2:	d100      	bne.n	6d6 <xvprintf+0x156>
			d += e;								/* Get current value */
			jd->dcv[cmp] = (SHORT)d;			/* Save current DC value for next block */
     6d4:	3320      	adds	r3, #32
     6d6:	9905      	ldr	r1, [sp, #20]
     6d8:	185b      	adds	r3, r3, r1
		if (b) {								/* If there is any difference from previous block */
			e = bitext(jd, b);					/* Extract data bits */
			if (e < 0) return 0 - e;			/* Err: input */
			b = 1 << (b - 1);					/* MSB position */
			if (!(e & b)) e -= (b << 1) - 1;	/* Restore sign if needed */
			d += e;								/* Get current value */
     6da:	b2db      	uxtb	r3, r3
			jd->dcv[cmp] = (SHORT)d;			/* Save current DC value for next block */
     6dc:	9305      	str	r3, [sp, #20]
     6de:	9b05      	ldr	r3, [sp, #20]
		}
		dqf = jd->qttbl[jd->qtid[cmp]];			/* De-quantizer table ID for this component */
     6e0:	aa06      	add	r2, sp, #24
     6e2:	3330      	adds	r3, #48	; 0x30

/*-----------------------------------------------------------------------*/
/* Start to decompress the JPEG picture                                  */
/*-----------------------------------------------------------------------*/

JRESULT jd_decomp (
     6e4:	5593      	strb	r3, [r2, r6]
			b = 1 << (b - 1);					/* MSB position */
			if (!(e & b)) e -= (b << 1) - 1;	/* Restore sign if needed */
			d += e;								/* Get current value */
			jd->dcv[cmp] = (SHORT)d;			/* Save current DC value for next block */
		}
		dqf = jd->qttbl[jd->qtid[cmp]];			/* De-quantizer table ID for this component */
     6e6:	3601      	adds	r6, #1
     6e8:	2e0f      	cmp	r6, #15
     6ea:	d801      	bhi.n	6f0 <xvprintf+0x170>
     6ec:	2f00      	cmp	r7, #0

/*-----------------------------------------------------------------------*/
/* Start to decompress the JPEG picture                                  */
/*-----------------------------------------------------------------------*/

JRESULT jd_decomp (
     6ee:	d1e0      	bne.n	6b2 <xvprintf+0x132>
			if (!(e & b)) e -= (b << 1) - 1;	/* Restore sign if needed */
			d += e;								/* Get current value */
			jd->dcv[cmp] = (SHORT)d;			/* Save current DC value for next block */
		}
		dqf = jd->qttbl[jd->qtid[cmp]];			/* De-quantizer table ID for this component */
		tmp[0] = d * dqf[0] >> 8;				/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
     6f0:	9b01      	ldr	r3, [sp, #4]

/*-----------------------------------------------------------------------*/
/* Start to decompress the JPEG picture                                  */
/*-----------------------------------------------------------------------*/

JRESULT jd_decomp (
     6f2:	071b      	lsls	r3, r3, #28
			if (!(e & b)) e -= (b << 1) - 1;	/* Restore sign if needed */
			d += e;								/* Get current value */
			jd->dcv[cmp] = (SHORT)d;			/* Save current DC value for next block */
		}
		dqf = jd->qttbl[jd->qtid[cmp]];			/* De-quantizer table ID for this component */
		tmp[0] = d * dqf[0] >> 8;				/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
     6f4:	d503      	bpl.n	6fe <xvprintf+0x17e>
     6f6:	232d      	movs	r3, #45	; 0x2d
     6f8:	a906      	add	r1, sp, #24
     6fa:	558b      	strb	r3, [r1, r6]

/*-----------------------------------------------------------------------*/
/* Start to decompress the JPEG picture                                  */
/*-----------------------------------------------------------------------*/

JRESULT jd_decomp (
     6fc:	3601      	adds	r6, #1
		}
		dqf = jd->qttbl[jd->qtid[cmp]];			/* De-quantizer table ID for this component */
		tmp[0] = d * dqf[0] >> 8;				/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */

		/* Extract following 63 AC elements from input stream */
		for (i = 1; i < 64; i++) tmp[i] = 0;	/* Clear rest of elements */
     6fe:	9a01      	ldr	r2, [sp, #4]
     700:	2720      	movs	r7, #32
     702:	07d2      	lsls	r2, r2, #31
     704:	d500      	bpl.n	708 <xvprintf+0x188>
     706:	3710      	adds	r7, #16
		hb = jd->huffbits[id][1];				/* Huffman table for the AC elements */
     708:	1c35      	adds	r5, r6, #0
		hc = jd->huffcode[id][1];
		hd = jd->huffdata[id][1];
		i = 1;					/* Top of the AC elements */
     70a:	e002      	b.n	712 <xvprintf+0x192>
		dqf = jd->qttbl[jd->qtid[cmp]];			/* De-quantizer table ID for this component */
		tmp[0] = d * dqf[0] >> 8;				/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */

		/* Extract following 63 AC elements from input stream */
		for (i = 1; i < 64; i++) tmp[i] = 0;	/* Clear rest of elements */
		hb = jd->huffbits[id][1];				/* Huffman table for the AC elements */
     70c:	1c38      	adds	r0, r7, #0
     70e:	f7ff ff13 	bl	538 <xputc>
		hc = jd->huffcode[id][1];
     712:	9b01      	ldr	r3, [sp, #4]
		hd = jd->huffdata[id][1];
     714:	079b      	lsls	r3, r3, #30
		dqf = jd->qttbl[jd->qtid[cmp]];			/* De-quantizer table ID for this component */
		tmp[0] = d * dqf[0] >> 8;				/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */

		/* Extract following 63 AC elements from input stream */
		for (i = 1; i < 64; i++) tmp[i] = 0;	/* Clear rest of elements */
		hb = jd->huffbits[id][1];				/* Huffman table for the AC elements */
     716:	d404      	bmi.n	722 <xvprintf+0x1a2>
		hc = jd->huffcode[id][1];
     718:	3501      	adds	r5, #1
		hd = jd->huffdata[id][1];
     71a:	9902      	ldr	r1, [sp, #8]
		i = 1;					/* Top of the AC elements */
		do {
			b = huffext(jd, hb, hc, hd);		/* Extract a huffman coded value (zero runs and bit length) */
     71c:	1e6b      	subs	r3, r5, #1
     71e:	428b      	cmp	r3, r1
     720:	d3f4      	bcc.n	70c <xvprintf+0x18c>
     722:	3e01      	subs	r6, #1
     724:	aa06      	add	r2, sp, #24
     726:	5d90      	ldrb	r0, [r2, r6]
			if (b == 0) break;					/* EOB? */
     728:	f7ff ff06 	bl	538 <xputc>
			if (b < 0) return 0 - b;			/* Err: invalid code or input error */
     72c:	2e00      	cmp	r6, #0
			z = (UINT)b >> 4;					/* Number of leading zero elements */
     72e:	d1f8      	bne.n	722 <xvprintf+0x1a2>
			if (z) {
     730:	e003      	b.n	73a <xvprintf+0x1ba>
     732:	2020      	movs	r0, #32
				i += z;							/* Skip zero elements */
     734:	f7ff ff00 	bl	538 <xputc>
				if (i >= 64) return JDR_FMT1;	/* Too long zero run */
     738:	3501      	adds	r5, #1
     73a:	9b02      	ldr	r3, [sp, #8]
			}
			if (b &= 0x0F) {					/* Bit length */
     73c:	429d      	cmp	r5, r3
     73e:	d3f8      	bcc.n	732 <xvprintf+0x1b2>
     740:	e723      	b.n	58a <xvprintf+0xa>
				d = bitext(jd, b);				/* Extract data bits */
     742:	b00b      	add	sp, #44	; 0x2c
     744:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000746 <xfputs>:
     746:	b570      	push	{r4, r5, r6, lr}
     748:	4d06      	ldr	r5, [pc, #24]	; (764 <xfputs+0x1e>)
				if (d < 0) return 0 - d;		/* Err: input device */
     74a:	1c0c      	adds	r4, r1, #0
     74c:	682e      	ldr	r6, [r5, #0]
     74e:	6028      	str	r0, [r5, #0]
     750:	e002      	b.n	758 <xfputs+0x12>
				rc = restart(jd, rsc++);
				if (rc != JDR_OK) return rc;
				rst = 1;
			}
			rc = mcu_load(jd);					/* Load an MCU (decompress huffman coded stream and apply IDCT) */
			if (rc != JDR_OK) return rc;
     752:	3401      	adds	r4, #1
     754:	f7ff fef0 	bl	538 <xputc>
     758:	7820      	ldrb	r0, [r4, #0]
				if (i >= 64) return JDR_FMT1;	/* Too long zero run */
			}
			if (b &= 0x0F) {					/* Bit length */
				d = bitext(jd, b);				/* Extract data bits */
				if (d < 0) return 0 - d;		/* Err: input device */
				b = 1 << (b - 1);				/* MSB position */
     75a:	2800      	cmp	r0, #0
     75c:	d1f9      	bne.n	752 <xfputs+0xc>
     75e:	602e      	str	r6, [r5, #0]
     760:	bd70      	pop	{r4, r5, r6, pc}
     762:	46c0      	nop			; (mov r8, r8)
				if (!(d & b)) d -= (b << 1) - 1;/* Restore negative value if needed */
     764:	10000134 	.word	0x10000134

00000768 <xprintf>:
     768:	b40f      	push	{r0, r1, r2, r3}
     76a:	b507      	push	{r0, r1, r2, lr}
     76c:	a904      	add	r1, sp, #16
				z = ZIG(i);						/* Zigzag-order to raster-order converted index */
     76e:	c901      	ldmia	r1!, {r0}
				tmp[z] = d * dqf[z] >> 8;		/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
     770:	9101      	str	r1, [sp, #4]
			if (b &= 0x0F) {					/* Bit length */
				d = bitext(jd, b);				/* Extract data bits */
				if (d < 0) return 0 - d;		/* Err: input device */
				b = 1 << (b - 1);				/* MSB position */
				if (!(d & b)) d -= (b << 1) - 1;/* Restore negative value if needed */
				z = ZIG(i);						/* Zigzag-order to raster-order converted index */
     772:	f7ff ff05 	bl	580 <xvprintf>
				tmp[z] = d * dqf[z] >> 8;		/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
     776:	b003      	add	sp, #12
     778:	bc08      	pop	{r3}
     77a:	b004      	add	sp, #16
     77c:	4718      	bx	r3

0000077e <xsprintf>:
			}
		} while (++i < 64);		/* Next AC element */
     77e:	b40e      	push	{r1, r2, r3}
     780:	b517      	push	{r0, r1, r2, r4, lr}
     782:	a905      	add	r1, sp, #20

		if (JD_USE_SCALE && jd->scale == 3)
     784:	c908      	ldmia	r1!, {r3}
     786:	4c07      	ldr	r4, [pc, #28]	; (7a4 <xsprintf+0x26>)
     788:	9101      	str	r1, [sp, #4]
			*bp = (*tmp / 256) + 128;	/* If scale ratio is 1/8, IDCT can be ommited and only DC element is used */
     78a:	6020      	str	r0, [r4, #0]
     78c:	1c18      	adds	r0, r3, #0
     78e:	f7ff fef7 	bl	580 <xvprintf>
     792:	6822      	ldr	r2, [r4, #0]
     794:	2300      	movs	r3, #0
     796:	7013      	strb	r3, [r2, #0]
     798:	6023      	str	r3, [r4, #0]
     79a:	bc17      	pop	{r0, r1, r2, r4}
     79c:	bc08      	pop	{r3}
     79e:	b003      	add	sp, #12
     7a0:	4718      	bx	r3
     7a2:	46c0      	nop			; (mov r8, r8)
     7a4:	10000118 	.word	0x10000118

000007a8 <xfprintf>:
     7a8:	b40e      	push	{r1, r2, r3}
     7aa:	b533      	push	{r0, r1, r4, r5, lr}

/*-----------------------------------------------------------------------*/
/* Start to decompress the JPEG picture                                  */
/*-----------------------------------------------------------------------*/

JRESULT jd_decomp (
     7ac:	4c06      	ldr	r4, [pc, #24]	; (7c8 <xfprintf+0x20>)
     7ae:	a905      	add	r1, sp, #20
     7b0:	c908      	ldmia	r1!, {r3}
     7b2:	6825      	ldr	r5, [r4, #0]
     7b4:	6020      	str	r0, [r4, #0]
     7b6:	1c18      	adds	r0, r3, #0
     7b8:	9101      	str	r1, [sp, #4]
	LONG t10, t11, t12, t13;
	UINT i;

	/* Process columns */
	for (i = 0; i < 8; i++) {
		v0 = src[8 * 0];	/* Get even elements */
     7ba:	f7ff fee1 	bl	580 <xvprintf>

/*-----------------------------------------------------------------------*/
/* Start to decompress the JPEG picture                                  */
/*-----------------------------------------------------------------------*/

JRESULT jd_decomp (
     7be:	6025      	str	r5, [r4, #0]
     7c0:	bc33      	pop	{r0, r1, r4, r5}
	/* Process columns */
	for (i = 0; i < 8; i++) {
		v0 = src[8 * 0];	/* Get even elements */
		v1 = src[8 * 2];
		v2 = src[8 * 4];
		v3 = src[8 * 6];
     7c2:	bc08      	pop	{r3}

		t10 = v0 + v2;		/* Process the even elements */
     7c4:	b003      	add	sp, #12
		t12 = v0 - v2;
     7c6:	4718      	bx	r3
		t11 = (v1 - v3) * M13 >> 12;
     7c8:	10000134 	.word	0x10000134

000007cc <put_dump>:
     7cc:	b570      	push	{r4, r5, r6, lr}
     7ce:	1c06      	adds	r6, r0, #0
     7d0:	1c1c      	adds	r4, r3, #0
		v3 += v1;
     7d2:	481d      	ldr	r0, [pc, #116]	; (848 <put_dump+0x7c>)
		v2 = src[8 * 4];
		v3 = src[8 * 6];

		t10 = v0 + v2;		/* Process the even elements */
		t12 = v0 - v2;
		t11 = (v1 - v3) * M13 >> 12;
     7d4:	1c15      	adds	r5, r2, #0
		v3 += v1;
     7d6:	f7ff ffc7 	bl	768 <xprintf>
		t11 -= v3;
		v0 = t10 + v3;
     7da:	2c02      	cmp	r4, #2
		v3 = t10 - v3;
     7dc:	d01e      	beq.n	81c <put_dump+0x50>
		v1 = t11 + t12;
     7de:	2c04      	cmp	r4, #4
		v2 = t12 - t11;
     7e0:	d026      	beq.n	830 <put_dump+0x64>
     7e2:	2c01      	cmp	r4, #1

/*-----------------------------------------------------------------------*/
/* Start to decompress the JPEG picture                                  */
/*-----------------------------------------------------------------------*/

JRESULT jd_decomp (
     7e4:	d12c      	bne.n	840 <put_dump+0x74>
     7e6:	e005      	b.n	7f4 <put_dump+0x28>
		v3 = t10 - v3;
		v1 = t11 + t12;
		v2 = t12 - t11;

		v4 = src[8 * 7];	/* Get odd elements */
		v5 = src[8 * 1];
     7e8:	5d31      	ldrb	r1, [r6, r4]
		t10 = v0 + v2;		/* Process the even elements */
		t12 = v0 - v2;
		t11 = (v1 - v3) * M13 >> 12;
		v3 += v1;
		t11 -= v3;
		v0 = t10 + v3;
     7ea:	4818      	ldr	r0, [pc, #96]	; (84c <put_dump+0x80>)
		v3 = t10 - v3;
		v1 = t11 + t12;
		v2 = t12 - t11;

		v4 = src[8 * 7];	/* Get odd elements */
     7ec:	f7ff ffbc 	bl	768 <xprintf>

/*-----------------------------------------------------------------------*/
/* Start to decompress the JPEG picture                                  */
/*-----------------------------------------------------------------------*/

JRESULT jd_decomp (
     7f0:	3401      	adds	r4, #1
     7f2:	e000      	b.n	7f6 <put_dump+0x2a>
		t11 = (v1 - v3) * M13 >> 12;
		v3 += v1;
		t11 -= v3;
		v0 = t10 + v3;
		v3 = t10 - v3;
		v1 = t11 + t12;
     7f4:	2400      	movs	r4, #0
		v4 = src[8 * 7];	/* Get odd elements */
		v5 = src[8 * 1];
		v6 = src[8 * 5];
		v7 = src[8 * 3];

		t10 = v5 - v4;		/* Process the odd elements */
     7f6:	42ac      	cmp	r4, r5
		t11 = v5 + v4;
     7f8:	dbf6      	blt.n	7e8 <put_dump+0x1c>
     7fa:	2020      	movs	r0, #32
		t12 = v6 - v7;
     7fc:	f7ff fe9c 	bl	538 <xputc>
     800:	2400      	movs	r4, #0
     802:	e008      	b.n	816 <put_dump+0x4a>
		v7 += v6;
     804:	5d30      	ldrb	r0, [r6, r4]
     806:	1c03      	adds	r3, r0, #0
		v5 = (t11 - v7) * M13 >> 12;
     808:	3b20      	subs	r3, #32
		v7 = src[8 * 3];

		t10 = v5 - v4;		/* Process the odd elements */
		t11 = v5 + v4;
		t12 = v6 - v7;
		v7 += v6;
     80a:	2b5e      	cmp	r3, #94	; 0x5e
		v5 = (t11 - v7) * M13 >> 12;
     80c:	d900      	bls.n	810 <put_dump+0x44>
     80e:	202e      	movs	r0, #46	; 0x2e
     810:	f7ff fe92 	bl	538 <xputc>
     814:	3401      	adds	r4, #1
     816:	42ac      	cmp	r4, r5
		v7 += t11;
     818:	dbf4      	blt.n	804 <put_dump+0x38>
     81a:	e011      	b.n	840 <put_dump+0x74>
     81c:	1c34      	adds	r4, r6, #0
     81e:	8821      	ldrh	r1, [r4, #0]
		t13 = (t10 + t12) * M5 >> 12;
     820:	480b      	ldr	r0, [pc, #44]	; (850 <put_dump+0x84>)
     822:	3d01      	subs	r5, #1
     824:	3402      	adds	r4, #2
     826:	f7ff ff9f 	bl	768 <xprintf>
		v4 = t13 - (t10 * M2 >> 12);
     82a:	2d00      	cmp	r5, #0
     82c:	d1f7      	bne.n	81e <put_dump+0x52>
     82e:	e007      	b.n	840 <put_dump+0x74>
     830:	1c34      	adds	r4, r6, #0
     832:	cc02      	ldmia	r4!, {r1}
     834:	4807      	ldr	r0, [pc, #28]	; (854 <put_dump+0x88>)
     836:	3d01      	subs	r5, #1
     838:	f7ff ff96 	bl	768 <xprintf>
		v6 = t13 - (t12 * M4 >> 12) - v7;
     83c:	2d00      	cmp	r5, #0
     83e:	d1f8      	bne.n	832 <put_dump+0x66>
     840:	200a      	movs	r0, #10
     842:	f7ff fe79 	bl	538 <xputc>
     846:	bd70      	pop	{r4, r5, r6, pc}
		v5 -= v6;
     848:	000035c8 	.word	0x000035c8
		v4 -= v5;
     84c:	000035cf 	.word	0x000035cf
     850:	000035d5 	.word	0x000035d5
     854:	000035db 	.word	0x000035db

00000858 <xgets>:

		src[8 * 0] = v0 + v7;	/* Write-back transformed values */
     858:	b570      	push	{r4, r5, r6, lr}
     85a:	4b12      	ldr	r3, [pc, #72]	; (8a4 <xgets+0x4c>)
     85c:	1c05      	adds	r5, r0, #0
		src[8 * 7] = v0 - v7;
     85e:	6818      	ldr	r0, [r3, #0]
     860:	1c0e      	adds	r6, r1, #0
     862:	2800      	cmp	r0, #0
		src[8 * 1] = v1 + v6;
     864:	d01d      	beq.n	8a2 <xgets+0x4a>
		src[8 * 6] = v1 - v6;
		src[8 * 2] = v2 + v5;
		src[8 * 5] = v2 - v5;
		src[8 * 3] = v3 + v4;
     866:	2400      	movs	r4, #0
		v5 -= v6;
		v4 -= v5;

		src[8 * 0] = v0 + v7;	/* Write-back transformed values */
		src[8 * 7] = v0 - v7;
		src[8 * 1] = v1 + v6;
     868:	4b0e      	ldr	r3, [pc, #56]	; (8a4 <xgets+0x4c>)
		src[8 * 6] = v1 - v6;
     86a:	681b      	ldr	r3, [r3, #0]
		v5 -= v6;
		v4 -= v5;

		src[8 * 0] = v0 + v7;	/* Write-back transformed values */
		src[8 * 7] = v0 - v7;
		src[8 * 1] = v1 + v6;
     86c:	4798      	blx	r3
		src[8 * 6] = v1 - v6;
     86e:	2800      	cmp	r0, #0
		src[8 * 2] = v2 + v5;
     870:	d017      	beq.n	8a2 <xgets+0x4a>
     872:	280d      	cmp	r0, #13
		src[8 * 5] = v2 - v5;
		src[8 * 3] = v3 + v4;
		src[8 * 4] = v3 - v4;
     874:	d00f      	beq.n	896 <xgets+0x3e>

		src[8 * 0] = v0 + v7;	/* Write-back transformed values */
		src[8 * 7] = v0 - v7;
		src[8 * 1] = v1 + v6;
		src[8 * 6] = v1 - v6;
		src[8 * 2] = v2 + v5;
     876:	2808      	cmp	r0, #8
     878:	d103      	bne.n	882 <xgets+0x2a>
		src[8 * 5] = v2 - v5;
     87a:	2c00      	cmp	r4, #0
     87c:	d001      	beq.n	882 <xgets+0x2a>
		src[8 * 3] = v3 + v4;
     87e:	3c01      	subs	r4, #1
		src[8 * 0] = v0 + v7;	/* Write-back transformed values */
		src[8 * 7] = v0 - v7;
		src[8 * 1] = v1 + v6;
		src[8 * 6] = v1 - v6;
		src[8 * 2] = v2 + v5;
		src[8 * 5] = v2 - v5;
     880:	e006      	b.n	890 <xgets+0x38>
		src[8 * 3] = v3 + v4;
     882:	281f      	cmp	r0, #31
	LONG v0, v1, v2, v3, v4, v5, v6, v7;
	LONG t10, t11, t12, t13;
	UINT i;

	/* Process columns */
	for (i = 0; i < 8; i++) {
     884:	ddf0      	ble.n	868 <xgets+0x10>
		src[8 * 7] = v0 - v7;
		src[8 * 1] = v1 + v6;
		src[8 * 6] = v1 - v6;
		src[8 * 2] = v2 + v5;
		src[8 * 5] = v2 - v5;
		src[8 * 3] = v3 + v4;
     886:	1e73      	subs	r3, r6, #1
		src[8 * 4] = v3 - v4;
     888:	429c      	cmp	r4, r3

		src++;	/* Next column */
     88a:	daed      	bge.n	868 <xgets+0x10>
		src[8 * 1] = v1 + v6;
		src[8 * 6] = v1 - v6;
		src[8 * 2] = v2 + v5;
		src[8 * 5] = v2 - v5;
		src[8 * 3] = v3 + v4;
		src[8 * 4] = v3 - v4;
     88c:	5528      	strb	r0, [r5, r4]
	LONG v0, v1, v2, v3, v4, v5, v6, v7;
	LONG t10, t11, t12, t13;
	UINT i;

	/* Process columns */
	for (i = 0; i < 8; i++) {
     88e:	3401      	adds	r4, #1
     890:	f7ff fe52 	bl	538 <xputc>

/*-----------------------------------------------------------------------*/
/* Start to decompress the JPEG picture                                  */
/*-----------------------------------------------------------------------*/

JRESULT jd_decomp (
     894:	e7e8      	b.n	868 <xgets+0x10>
     896:	2300      	movs	r3, #0
	src -= 8;
	for (i = 0; i < 8; i++) {
		v0 = src[0] + (128L << 8);	/* Get even elements (remove DC offset (-128) here) */
		v1 = src[2];
		v2 = src[4];
		v3 = src[6];
     898:	200a      	movs	r0, #10
	}

	/* Process rows */
	src -= 8;
	for (i = 0; i < 8; i++) {
		v0 = src[0] + (128L << 8);	/* Get even elements (remove DC offset (-128) here) */
     89a:	552b      	strb	r3, [r5, r4]
     89c:	f7ff fe4c 	bl	538 <xputc>
		v1 = src[2];
     8a0:	2001      	movs	r0, #1
		v2 = src[4];
		v3 = src[6];
     8a2:	bd70      	pop	{r4, r5, r6, pc}
	}

	/* Process rows */
	src -= 8;
	for (i = 0; i < 8; i++) {
		v0 = src[0] + (128L << 8);	/* Get even elements (remove DC offset (-128) here) */
     8a4:	10000130 	.word	0x10000130

000008a8 <xfgets>:
		v2 = src[4];
		v3 = src[6];

		t10 = v0 + v2;				/* Process the even elements */
		t12 = v0 - v2;
		t11 = (v1 - v3) * M13 >> 12;
     8a8:	b538      	push	{r3, r4, r5, lr}
		v0 = src[0] + (128L << 8);	/* Get even elements (remove DC offset (-128) here) */
		v1 = src[2];
		v2 = src[4];
		v3 = src[6];

		t10 = v0 + v2;				/* Process the even elements */
     8aa:	4c04      	ldr	r4, [pc, #16]	; (8bc <xfgets+0x14>)
		t12 = v0 - v2;
     8ac:	6825      	ldr	r5, [r4, #0]
		t11 = (v1 - v3) * M13 >> 12;
     8ae:	6020      	str	r0, [r4, #0]
     8b0:	1c08      	adds	r0, r1, #0
     8b2:	1c11      	adds	r1, r2, #0
     8b4:	f7ff ffd0 	bl	858 <xgets>
     8b8:	6025      	str	r5, [r4, #0]
		v3 += v1;
		t11 -= v3;
		v0 = t10 + v3;
     8ba:	bd38      	pop	{r3, r4, r5, pc}

		t10 = v0 + v2;				/* Process the even elements */
		t12 = v0 - v2;
		t11 = (v1 - v3) * M13 >> 12;
		v3 += v1;
		t11 -= v3;
     8bc:	10000130 	.word	0x10000130

000008c0 <xatoi>:
		v0 = t10 + v3;
		v3 = t10 - v3;
     8c0:	b570      	push	{r4, r5, r6, lr}
		v1 = t11 + t12;
		v2 = t12 - t11;

		v4 = src[7];				/* Get odd elements */
		v5 = src[1];
     8c2:	2200      	movs	r2, #0
		t11 = (v1 - v3) * M13 >> 12;
		v3 += v1;
		t11 -= v3;
		v0 = t10 + v3;
		v3 = t10 - v3;
		v1 = t11 + t12;
     8c4:	1c03      	adds	r3, r0, #0
     8c6:	600a      	str	r2, [r1, #0]
		v2 = t12 - t11;

		v4 = src[7];				/* Get odd elements */
		v5 = src[1];
     8c8:	e001      	b.n	8ce <xatoi+0xe>
		v6 = src[5];
		v7 = src[3];
     8ca:	3001      	adds	r0, #1
		v1 = t11 + t12;
		v2 = t12 - t11;

		v4 = src[7];				/* Get odd elements */
		v5 = src[1];
		v6 = src[5];
     8cc:	6018      	str	r0, [r3, #0]
		v3 += v1;
		t11 -= v3;
		v0 = t10 + v3;
		v3 = t10 - v3;
		v1 = t11 + t12;
		v2 = t12 - t11;
     8ce:	6818      	ldr	r0, [r3, #0]

		v4 = src[7];				/* Get odd elements */
     8d0:	7802      	ldrb	r2, [r0, #0]
		t10 = v0 + v2;				/* Process the even elements */
		t12 = v0 - v2;
		t11 = (v1 - v3) * M13 >> 12;
		v3 += v1;
		t11 -= v3;
		v0 = t10 + v3;
     8d2:	2a20      	cmp	r2, #32
		v4 = src[7];				/* Get odd elements */
		v5 = src[1];
		v6 = src[5];
		v7 = src[3];

		t10 = v5 - v4;				/* Process the odd elements */
     8d4:	d0f9      	beq.n	8ca <xatoi+0xa>
		v3 += v1;
		t11 -= v3;
		v0 = t10 + v3;
		v3 = t10 - v3;
		v1 = t11 + t12;
		v2 = t12 - t11;
     8d6:	2500      	movs	r5, #0
		v4 = src[7];				/* Get odd elements */
		v5 = src[1];
		v6 = src[5];
		v7 = src[3];

		t10 = v5 - v4;				/* Process the odd elements */
     8d8:	2a2d      	cmp	r2, #45	; 0x2d
		t11 = v5 + v4;
		t12 = v6 - v7;
     8da:	d103      	bne.n	8e4 <xatoi+0x24>
		v5 = src[1];
		v6 = src[5];
		v7 = src[3];

		t10 = v5 - v4;				/* Process the odd elements */
		t11 = v5 + v4;
     8dc:	1c42      	adds	r2, r0, #1
		t12 = v6 - v7;
		v7 += v6;
     8de:	601a      	str	r2, [r3, #0]
		v6 = src[5];
		v7 = src[3];

		t10 = v5 - v4;				/* Process the odd elements */
		t11 = v5 + v4;
		t12 = v6 - v7;
     8e0:	7842      	ldrb	r2, [r0, #1]
		v7 += v6;
		v5 = (t11 - v7) * M13 >> 12;
     8e2:	3501      	adds	r5, #1
     8e4:	2a30      	cmp	r2, #48	; 0x30
     8e6:	d11b      	bne.n	920 <xatoi+0x60>
		v7 += t11;
     8e8:	681a      	ldr	r2, [r3, #0]

		t10 = v5 - v4;				/* Process the odd elements */
		t11 = v5 + v4;
		t12 = v6 - v7;
		v7 += v6;
		v5 = (t11 - v7) * M13 >> 12;
     8ea:	1c50      	adds	r0, r2, #1
		v7 += t11;
		t13 = (t10 + t12) * M5 >> 12;
     8ec:	6018      	str	r0, [r3, #0]
     8ee:	7852      	ldrb	r2, [r2, #1]
     8f0:	2a62      	cmp	r2, #98	; 0x62
     8f2:	d006      	beq.n	902 <xatoi+0x42>
		v4 = t13 - (t10 * M2 >> 12);
     8f4:	2a78      	cmp	r2, #120	; 0x78
     8f6:	d109      	bne.n	90c <xatoi+0x4c>
     8f8:	1c42      	adds	r2, r0, #1
     8fa:	601a      	str	r2, [r3, #0]
     8fc:	7842      	ldrb	r2, [r0, #1]

		t10 = v5 - v4;				/* Process the odd elements */
		t11 = v5 + v4;
		t12 = v6 - v7;
		v7 += v6;
		v5 = (t11 - v7) * M13 >> 12;
     8fe:	2410      	movs	r4, #16
		v7 += t11;
		t13 = (t10 + t12) * M5 >> 12;
		v4 = t13 - (t10 * M2 >> 12);
     900:	e014      	b.n	92c <xatoi+0x6c>
		v6 = t13 - (t12 * M4 >> 12) - v7;
     902:	1c42      	adds	r2, r0, #1

		t10 = v5 - v4;				/* Process the odd elements */
		t11 = v5 + v4;
		t12 = v6 - v7;
		v7 += v6;
		v5 = (t11 - v7) * M13 >> 12;
     904:	601a      	str	r2, [r3, #0]
		v7 += t11;
		t13 = (t10 + t12) * M5 >> 12;
		v4 = t13 - (t10 * M2 >> 12);
		v6 = t13 - (t12 * M4 >> 12) - v7;
     906:	7842      	ldrb	r2, [r0, #1]
     908:	2402      	movs	r4, #2
		t11 = v5 + v4;
		t12 = v6 - v7;
		v7 += v6;
		v5 = (t11 - v7) * M13 >> 12;
		v7 += t11;
		t13 = (t10 + t12) * M5 >> 12;
     90a:	e00f      	b.n	92c <xatoi+0x6c>
		v4 = t13 - (t10 * M2 >> 12);
		v6 = t13 - (t12 * M4 >> 12) - v7;
     90c:	2001      	movs	r0, #1
		t12 = v6 - v7;
		v7 += v6;
		v5 = (t11 - v7) * M13 >> 12;
		v7 += t11;
		t13 = (t10 + t12) * M5 >> 12;
		v4 = t13 - (t10 * M2 >> 12);
     90e:	2a20      	cmp	r2, #32
     910:	d929      	bls.n	966 <xatoi+0xa6>
		v6 = t13 - (t12 * M4 >> 12) - v7;
     912:	1c14      	adds	r4, r2, #0
		v5 -= v6;
     914:	3c30      	subs	r4, #48	; 0x30
		v7 += v6;
		v5 = (t11 - v7) * M13 >> 12;
		v7 += t11;
		t13 = (t10 + t12) * M5 >> 12;
		v4 = t13 - (t10 * M2 >> 12);
		v6 = t13 - (t12 * M4 >> 12) - v7;
     916:	3801      	subs	r0, #1
		v5 -= v6;
     918:	2c09      	cmp	r4, #9
		v4 -= v5;

		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Descale the transformed values 8 bits and output */
     91a:	d824      	bhi.n	966 <xatoi+0xa6>
		v7 += t11;
		t13 = (t10 + t12) * M5 >> 12;
		v4 = t13 - (t10 * M2 >> 12);
		v6 = t13 - (t12 * M4 >> 12) - v7;
		v5 -= v6;
		v4 -= v5;
     91c:	2408      	movs	r4, #8
     91e:	e005      	b.n	92c <xatoi+0x6c>

		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Descale the transformed values 8 bits and output */
     920:	1c14      	adds	r4, r2, #0
     922:	3c30      	subs	r4, #48	; 0x30
     924:	2000      	movs	r0, #0
     926:	2c09      	cmp	r4, #9
     928:	d81d      	bhi.n	966 <xatoi+0xa6>
     92a:	240a      	movs	r4, #10
     92c:	2000      	movs	r0, #0
     92e:	e011      	b.n	954 <xatoi+0x94>
		dst[5] = BYTECLIP((v2 - v5) >> 8);
		dst[3] = BYTECLIP((v3 + v4) >> 8);
		dst[4] = BYTECLIP((v3 - v4) >> 8);
		dst += 8;

		src += 8;	/* Next row */
     930:	2a60      	cmp	r2, #96	; 0x60
		v4 = t13 - (t10 * M2 >> 12);
		v6 = t13 - (t12 * M4 >> 12) - v7;
		v5 -= v6;
		v4 -= v5;

		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Descale the transformed values 8 bits and output */
     932:	d901      	bls.n	938 <xatoi+0x78>
		dst[7] = BYTECLIP((v0 - v7) >> 8);
     934:	3a20      	subs	r2, #32
     936:	b2d2      	uxtb	r2, r2
     938:	3a30      	subs	r2, #48	; 0x30
     93a:	b2d2      	uxtb	r2, r2
     93c:	2a10      	cmp	r2, #16
     93e:	d901      	bls.n	944 <xatoi+0x84>
		dst[1] = BYTECLIP((v1 + v6) >> 8);
     940:	3a07      	subs	r2, #7
     942:	b2d2      	uxtb	r2, r2
		dst[6] = BYTECLIP((v1 - v6) >> 8);
     944:	42a2      	cmp	r2, r4
		v5 -= v6;
		v4 -= v5;

		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Descale the transformed values 8 bits and output */
		dst[7] = BYTECLIP((v0 - v7) >> 8);
		dst[1] = BYTECLIP((v1 + v6) >> 8);
     946:	d20d      	bcs.n	964 <xatoi+0xa4>
		dst[6] = BYTECLIP((v1 - v6) >> 8);
     948:	4360      	muls	r0, r4
		v5 -= v6;
		v4 -= v5;

		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Descale the transformed values 8 bits and output */
		dst[7] = BYTECLIP((v0 - v7) >> 8);
		dst[1] = BYTECLIP((v1 + v6) >> 8);
     94a:	1810      	adds	r0, r2, r0
		dst[6] = BYTECLIP((v1 - v6) >> 8);
     94c:	681a      	ldr	r2, [r3, #0]
		v5 -= v6;
		v4 -= v5;

		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Descale the transformed values 8 bits and output */
		dst[7] = BYTECLIP((v0 - v7) >> 8);
		dst[1] = BYTECLIP((v1 + v6) >> 8);
     94e:	1c56      	adds	r6, r2, #1
		dst[6] = BYTECLIP((v1 - v6) >> 8);
     950:	601e      	str	r6, [r3, #0]
		v5 -= v6;
		v4 -= v5;

		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Descale the transformed values 8 bits and output */
		dst[7] = BYTECLIP((v0 - v7) >> 8);
		dst[1] = BYTECLIP((v1 + v6) >> 8);
     952:	7852      	ldrb	r2, [r2, #1]
		dst[6] = BYTECLIP((v1 - v6) >> 8);
     954:	2a20      	cmp	r2, #32
		dst[2] = BYTECLIP((v2 + v5) >> 8);
     956:	d8eb      	bhi.n	930 <xatoi+0x70>
     958:	2d00      	cmp	r5, #0
		dst[5] = BYTECLIP((v2 - v5) >> 8);
     95a:	d000      	beq.n	95e <xatoi+0x9e>

		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Descale the transformed values 8 bits and output */
		dst[7] = BYTECLIP((v0 - v7) >> 8);
		dst[1] = BYTECLIP((v1 + v6) >> 8);
		dst[6] = BYTECLIP((v1 - v6) >> 8);
		dst[2] = BYTECLIP((v2 + v5) >> 8);
     95c:	4240      	negs	r0, r0
		dst[5] = BYTECLIP((v2 - v5) >> 8);
     95e:	6008      	str	r0, [r1, #0]

		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Descale the transformed values 8 bits and output */
		dst[7] = BYTECLIP((v0 - v7) >> 8);
		dst[1] = BYTECLIP((v1 + v6) >> 8);
		dst[6] = BYTECLIP((v1 - v6) >> 8);
		dst[2] = BYTECLIP((v2 + v5) >> 8);
     960:	2001      	movs	r0, #1
		dst[5] = BYTECLIP((v2 - v5) >> 8);
     962:	e000      	b.n	966 <xatoi+0xa6>

		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Descale the transformed values 8 bits and output */
		dst[7] = BYTECLIP((v0 - v7) >> 8);
		dst[1] = BYTECLIP((v1 + v6) >> 8);
		dst[6] = BYTECLIP((v1 - v6) >> 8);
		dst[2] = BYTECLIP((v2 + v5) >> 8);
     964:	2000      	movs	r0, #0
		dst[5] = BYTECLIP((v2 - v5) >> 8);
     966:	bd70      	pop	{r4, r5, r6, pc}

00000968 <rtc_gettime>:

		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Descale the transformed values 8 bits and output */
		dst[7] = BYTECLIP((v0 - v7) >> 8);
		dst[1] = BYTECLIP((v1 + v6) >> 8);
		dst[6] = BYTECLIP((v1 - v6) >> 8);
		dst[2] = BYTECLIP((v2 + v5) >> 8);
     968:	b5f0      	push	{r4, r5, r6, r7, lr}
		dst[5] = BYTECLIP((v2 - v5) >> 8);
     96a:	b089      	sub	sp, #36	; 0x24
		dst[3] = BYTECLIP((v3 + v4) >> 8);
     96c:	2368      	movs	r3, #104	; 0x68
     96e:	1c04      	adds	r4, r0, #0
     970:	4668      	mov	r0, sp
     972:	7083      	strb	r3, [r0, #2]
     974:	466a      	mov	r2, sp
     976:	3b68      	subs	r3, #104	; 0x68
     978:	8093      	strh	r3, [r2, #4]
		dst[4] = BYTECLIP((v3 - v4) >> 8);
     97a:	2201      	movs	r2, #1
     97c:	70c2      	strb	r2, [r0, #3]
     97e:	4669      	mov	r1, sp
     980:	7183      	strb	r3, [r0, #6]
     982:	7042      	strb	r2, [r0, #1]
     984:	3207      	adds	r2, #7
     986:	818a      	strh	r2, [r1, #12]
		src++;	/* Next column */
	}

	/* Process rows */
	src -= 8;
	for (i = 0; i < 8; i++) {
     988:	aa06      	add	r2, sp, #24
		dst[6] = BYTECLIP((v1 - v6) >> 8);
		dst[2] = BYTECLIP((v2 + v5) >> 8);
		dst[5] = BYTECLIP((v2 - v5) >> 8);
		dst[3] = BYTECLIP((v3 + v4) >> 8);
		dst[4] = BYTECLIP((v3 - v4) >> 8);
		dst += 8;
     98a:	9204      	str	r2, [sp, #16]
		src++;	/* Next column */
	}

	/* Process rows */
	src -= 8;
	for (i = 0; i < 8; i++) {
     98c:	9305      	str	r3, [sp, #20]
     98e:	f7ff fcff 	bl	390 <i2c0_start>

	nby = jd->msx * jd->msy;	/* Number of Y blocks (1, 2 or 4) */
	nbc = 2;					/* Number of C blocks (2) */
	bp = jd->mcubuf;			/* Pointer to the first block */

	for (blk = 0; blk < nby + nbc; blk++) {
     992:	466a      	mov	r2, sp
		if (JD_USE_SCALE && jd->scale == 3)
			*bp = (*tmp / 256) + 128;	/* If scale ratio is 1/8, IDCT can be ommited and only DC element is used */
		else
			block_idct(tmp, bp);		/* Apply IDCT and store the block to the MCU buffer */

		bp += 64;				/* Next block */
     994:	7813      	ldrb	r3, [r2, #0]

	nby = jd->msx * jd->msy;	/* Number of Y blocks (1, 2 or 4) */
	nbc = 2;					/* Number of C blocks (2) */
	bp = jd->mcubuf;			/* Pointer to the first block */

	for (blk = 0; blk < nby + nbc; blk++) {
     996:	2b00      	cmp	r3, #0
		if (JD_USE_SCALE && jd->scale == 3)
			*bp = (*tmp / 256) + 128;	/* If scale ratio is 1/8, IDCT can be ommited and only DC element is used */
		else
			block_idct(tmp, bp);		/* Apply IDCT and store the block to the MCU buffer */

		bp += 64;				/* Next block */
     998:	d0fb      	beq.n	992 <rtc_gettime+0x2a>

	nby = jd->msx * jd->msy;	/* Number of Y blocks (1, 2 or 4) */
	nbc = 2;					/* Number of C blocks (2) */
	bp = jd->mcubuf;			/* Pointer to the first block */

	for (blk = 0; blk < nby + nbc; blk++) {
     99a:	7810      	ldrb	r0, [r2, #0]
     99c:	2801      	cmp	r0, #1
     99e:	d143      	bne.n	a28 <rtc_gettime+0xc0>
     9a0:	ab06      	add	r3, sp, #24
     9a2:	79da      	ldrb	r2, [r3, #7]
     9a4:	0691      	lsls	r1, r2, #26
     9a6:	d43f      	bmi.n	a28 <rtc_gettime+0xc0>
	INT yy, cb, cr;
	BYTE *py, *pc, *rgb24;
	JRECT rect;


	mx = jd->msx * 8; my = jd->msy * 8;					/* MCU size (pixel) */
     9a8:	781d      	ldrb	r5, [r3, #0]
     9aa:	2107      	movs	r1, #7
     9ac:	092a      	lsrs	r2, r5, #4
	rx = (x + mx <= jd->width) ? mx : jd->width - x;	/* Output rectangular size (it may be clipped at right/bottom end) */
     9ae:	400a      	ands	r2, r1
	INT yy, cb, cr;
	BYTE *py, *pc, *rgb24;
	JRECT rect;


	mx = jd->msx * 8; my = jd->msy * 8;					/* MCU size (pixel) */
     9b0:	0096      	lsls	r6, r2, #2
     9b2:	18b2      	adds	r2, r6, r2
	rx = (x + mx <= jd->width) ? mx : jd->width - x;	/* Output rectangular size (it may be clipped at right/bottom end) */
     9b4:	0056      	lsls	r6, r2, #1
     9b6:	220f      	movs	r2, #15
	INT yy, cb, cr;
	BYTE *py, *pc, *rgb24;
	JRECT rect;


	mx = jd->msx * 8; my = jd->msy * 8;					/* MCU size (pixel) */
     9b8:	4015      	ands	r5, r2
	rx = (x + mx <= jd->width) ? mx : jd->width - x;	/* Output rectangular size (it may be clipped at right/bottom end) */
     9ba:	1975      	adds	r5, r6, r5
     9bc:	71e5      	strb	r5, [r4, #7]
     9be:	785d      	ldrb	r5, [r3, #1]
	ry = (y + my <= jd->height) ? my : jd->height - y;
     9c0:	092e      	lsrs	r6, r5, #4
     9c2:	00b7      	lsls	r7, r6, #2
     9c4:	19be      	adds	r6, r7, r6
     9c6:	0076      	lsls	r6, r6, #1
	INT yy, cb, cr;
	BYTE *py, *pc, *rgb24;
	JRECT rect;


	mx = jd->msx * 8; my = jd->msy * 8;					/* MCU size (pixel) */
     9c8:	4015      	ands	r5, r2
	rx = (x + mx <= jd->width) ? mx : jd->width - x;	/* Output rectangular size (it may be clipped at right/bottom end) */
	ry = (y + my <= jd->height) ? my : jd->height - y;
     9ca:	1975      	adds	r5, r6, r5
     9cc:	71a5      	strb	r5, [r4, #6]
     9ce:	789e      	ldrb	r6, [r3, #2]
     9d0:	2503      	movs	r5, #3
	if (JD_USE_SCALE) {
		rx >>= jd->scale; ry >>= jd->scale;
     9d2:	0937      	lsrs	r7, r6, #4
     9d4:	402f      	ands	r7, r5
     9d6:	00b9      	lsls	r1, r7, #2
     9d8:	468c      	mov	ip, r1
     9da:	4467      	add	r7, ip
		if (!rx || !ry) return JDR_OK;					/* Skip this MCU if all pixel is to be rounded off */
     9dc:	4016      	ands	r6, r2
     9de:	007f      	lsls	r7, r7, #1
     9e0:	19be      	adds	r6, r7, r6
     9e2:	7166      	strb	r6, [r4, #5]
     9e4:	78de      	ldrb	r6, [r3, #3]
     9e6:	2107      	movs	r1, #7
     9e8:	4031      	ands	r1, r6
     9ea:	7121      	strb	r1, [r4, #4]
     9ec:	7919      	ldrb	r1, [r3, #4]
		x >>= jd->scale; y >>= jd->scale;
     9ee:	090e      	lsrs	r6, r1, #4
	}
	rect.left = x; rect.right = x + rx - 1;				/* Rectangular area in the frame buffer */
     9f0:	4035      	ands	r5, r6
	rx = (x + mx <= jd->width) ? mx : jd->width - x;	/* Output rectangular size (it may be clipped at right/bottom end) */
	ry = (y + my <= jd->height) ? my : jd->height - y;
	if (JD_USE_SCALE) {
		rx >>= jd->scale; ry >>= jd->scale;
		if (!rx || !ry) return JDR_OK;					/* Skip this MCU if all pixel is to be rounded off */
		x >>= jd->scale; y >>= jd->scale;
     9f2:	00ae      	lsls	r6, r5, #2
	}
	rect.left = x; rect.right = x + rx - 1;				/* Rectangular area in the frame buffer */
     9f4:	1975      	adds	r5, r6, r5
     9f6:	006d      	lsls	r5, r5, #1
     9f8:	4011      	ands	r1, r2
     9fa:	1869      	adds	r1, r5, r1
     9fc:	70e1      	strb	r1, [r4, #3]
     9fe:	7959      	ldrb	r1, [r3, #5]
     a00:	090d      	lsrs	r5, r1, #4
	rx = (x + mx <= jd->width) ? mx : jd->width - x;	/* Output rectangular size (it may be clipped at right/bottom end) */
	ry = (y + my <= jd->height) ? my : jd->height - y;
	if (JD_USE_SCALE) {
		rx >>= jd->scale; ry >>= jd->scale;
		if (!rx || !ry) return JDR_OK;					/* Skip this MCU if all pixel is to be rounded off */
		x >>= jd->scale; y >>= jd->scale;
     a02:	4005      	ands	r5, r0
	}
	rect.left = x; rect.right = x + rx - 1;				/* Rectangular area in the frame buffer */
	rect.top = y; rect.bottom = y + ry - 1;
     a04:	00ae      	lsls	r6, r5, #2
	rx = (x + mx <= jd->width) ? mx : jd->width - x;	/* Output rectangular size (it may be clipped at right/bottom end) */
	ry = (y + my <= jd->height) ? my : jd->height - y;
	if (JD_USE_SCALE) {
		rx >>= jd->scale; ry >>= jd->scale;
		if (!rx || !ry) return JDR_OK;					/* Skip this MCU if all pixel is to be rounded off */
		x >>= jd->scale; y >>= jd->scale;
     a06:	1975      	adds	r5, r6, r5
	}
	rect.left = x; rect.right = x + rx - 1;				/* Rectangular area in the frame buffer */
	rect.top = y; rect.bottom = y + ry - 1;
     a08:	4011      	ands	r1, r2
     a0a:	006d      	lsls	r5, r5, #1
     a0c:	1869      	adds	r1, r5, r1
     a0e:	70a1      	strb	r1, [r4, #2]
     a10:	799b      	ldrb	r3, [r3, #6]
     a12:	21fa      	movs	r1, #250	; 0xfa
     a14:	401a      	ands	r2, r3
     a16:	00c9      	lsls	r1, r1, #3
     a18:	091b      	lsrs	r3, r3, #4


	if (!JD_USE_SCALE || jd->scale != 3) {	/* Not for 1/8 scaling */
     a1a:	1852      	adds	r2, r2, r1
     a1c:	0099      	lsls	r1, r3, #2
     a1e:	18cb      	adds	r3, r1, r3

		/* Build an RGB MCU from discrete comopnents */
		rgb24 = (BYTE*)jd->workbuf;
     a20:	005b      	lsls	r3, r3, #1
     a22:	18d2      	adds	r2, r2, r3
     a24:	8022      	strh	r2, [r4, #0]
		for (iy = 0; iy < my; iy++) {
			pc = jd->mcubuf;
     a26:	e009      	b.n	a3c <rtc_gettime+0xd4>
     a28:	2301      	movs	r3, #1
			py = pc + iy * 8;
			if (my == 16) {		/* Double block height? */
     a2a:	70e3      	strb	r3, [r4, #3]

		/* Build an RGB MCU from discrete comopnents */
		rgb24 = (BYTE*)jd->workbuf;
		for (iy = 0; iy < my; iy++) {
			pc = jd->mcubuf;
			py = pc + iy * 8;
     a2c:	70a3      	strb	r3, [r4, #2]
     a2e:	4b04      	ldr	r3, [pc, #16]	; (a40 <rtc_gettime+0xd8>)
			if (my == 16) {		/* Double block height? */
     a30:	2000      	movs	r0, #0
     a32:	71e0      	strb	r0, [r4, #7]
				pc += 64 * 4 + (iy >> 1) * 8;
     a34:	71a0      	strb	r0, [r4, #6]
     a36:	7160      	strb	r0, [r4, #5]
     a38:	7120      	strb	r0, [r4, #4]
     a3a:	8023      	strh	r3, [r4, #0]
				if (iy >= 8) py += 64;
     a3c:	b009      	add	sp, #36	; 0x24
     a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a40:	000007db 	.word	0x000007db

00000a44 <rtc_settime>:

/*-----------------------------------------------------------------------*/
/* Start to decompress the JPEG picture                                  */
/*-----------------------------------------------------------------------*/

JRESULT jd_decomp (
     a44:	b5f0      	push	{r4, r5, r6, r7, lr}
			py = pc + iy * 8;
			if (my == 16) {		/* Double block height? */
				pc += 64 * 4 + (iy >> 1) * 8;
				if (iy >= 8) py += 64;
			} else {			/* Single block height */
				pc += mx * 8 + iy * 8;
     a46:	79c6      	ldrb	r6, [r0, #7]
     a48:	b08b      	sub	sp, #44	; 0x2c
	INT yy, cb, cr;
	BYTE *py, *pc, *rgb24;
	JRECT rect;


	mx = jd->msx * 8; my = jd->msy * 8;					/* MCU size (pixel) */
     a4a:	1c05      	adds	r5, r0, #0
     a4c:	210a      	movs	r1, #10
     a4e:	1c30      	adds	r0, r6, #0
     a50:	f002 fcfc 	bl	344c <__aeabi_uidiv>
			} else {			/* Single block height */
				pc += mx * 8 + iy * 8;
			}
			for (ix = 0; ix < mx; ix++) {
				cb = pc[0] - 128; 	/* Get Cb/Cr component and restore right level */
				cr = pc[64] - 128;
     a54:	210a      	movs	r1, #10
     a56:	0107      	lsls	r7, r0, #4
				if (iy >= 8) py += 64;
			} else {			/* Single block height */
				pc += mx * 8 + iy * 8;
			}
			for (ix = 0; ix < mx; ix++) {
				cb = pc[0] - 128; 	/* Get Cb/Cr component and restore right level */
     a58:	1c30      	adds	r0, r6, #0
				cr = pc[64] - 128;
     a5a:	f002 fd3b 	bl	34d4 <__aeabi_uidivmod>
     a5e:	ac07      	add	r4, sp, #28
				if (mx == 16) {					/* Double block width? */
     a60:	187f      	adds	r7, r7, r1
     a62:	7027      	strb	r7, [r4, #0]
					if (ix == 8) py += 64 - 8;	/* Jump to next block if double block heigt */
     a64:	79ae      	ldrb	r6, [r5, #6]
     a66:	210a      	movs	r1, #10
     a68:	1c30      	adds	r0, r6, #0
					pc += ix & 1;				/* Increase chroma pointer every two pixels */
     a6a:	f002 fcef 	bl	344c <__aeabi_uidiv>
     a6e:	210a      	movs	r1, #10
     a70:	0107      	lsls	r7, r0, #4
				} else {						/* Single block width */
					pc++;						/* Increase chroma pointer every pixel */
     a72:	1c30      	adds	r0, r6, #0
				}
				yy = *py++;			/* Get Y component */
     a74:	f002 fd2e 	bl	34d4 <__aeabi_uidivmod>
     a78:	187f      	adds	r7, r7, r1

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((INT)(1.402 * CVACC) * cr) / CVACC);
     a7a:	7067      	strb	r7, [r4, #1]
					if (ix == 8) py += 64 - 8;	/* Jump to next block if double block heigt */
					pc += ix & 1;				/* Increase chroma pointer every two pixels */
				} else {						/* Single block width */
					pc++;						/* Increase chroma pointer every pixel */
				}
				yy = *py++;			/* Get Y component */
     a7c:	796e      	ldrb	r6, [r5, #5]

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((INT)(1.402 * CVACC) * cr) / CVACC);
     a7e:	210a      	movs	r1, #10
     a80:	1c30      	adds	r0, r6, #0
     a82:	f002 fce3 	bl	344c <__aeabi_uidiv>
     a86:	210a      	movs	r1, #10
     a88:	0107      	lsls	r7, r0, #4
     a8a:	1c30      	adds	r0, r6, #0
     a8c:	f002 fd22 	bl	34d4 <__aeabi_uidivmod>
     a90:	187f      	adds	r7, r7, r1
     a92:	70a7      	strb	r7, [r4, #2]
				*rgb24++ = /* G */ BYTECLIP(yy - ((INT)(0.344 * CVACC) * cb + (INT)(0.714 * CVACC) * cr) / CVACC);
     a94:	792a      	ldrb	r2, [r5, #4]
					pc++;						/* Increase chroma pointer every pixel */
				}
				yy = *py++;			/* Get Y component */

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((INT)(1.402 * CVACC) * cr) / CVACC);
     a96:	2307      	movs	r3, #7
				*rgb24++ = /* G */ BYTECLIP(yy - ((INT)(0.344 * CVACC) * cb + (INT)(0.714 * CVACC) * cr) / CVACC);
     a98:	4013      	ands	r3, r2
				pc += 64 * 4 + (iy >> 1) * 8;
				if (iy >= 8) py += 64;
			} else {			/* Single block height */
				pc += mx * 8 + iy * 8;
			}
			for (ix = 0; ix < mx; ix++) {
     a9a:	70e3      	strb	r3, [r4, #3]
				}
				yy = *py++;			/* Get Y component */

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((INT)(1.402 * CVACC) * cr) / CVACC);
				*rgb24++ = /* G */ BYTECLIP(yy - ((INT)(0.344 * CVACC) * cb + (INT)(0.714 * CVACC) * cr) / CVACC);
     a9c:	78ee      	ldrb	r6, [r5, #3]
     a9e:	210a      	movs	r1, #10
     aa0:	1c30      	adds	r0, r6, #0
     aa2:	f002 fcd3 	bl	344c <__aeabi_uidiv>
     aa6:	210a      	movs	r1, #10
     aa8:	0107      	lsls	r7, r0, #4
     aaa:	1c30      	adds	r0, r6, #0
     aac:	f002 fd12 	bl	34d4 <__aeabi_uidivmod>
     ab0:	187f      	adds	r7, r7, r1
     ab2:	7127      	strb	r7, [r4, #4]
     ab4:	78ae      	ldrb	r6, [r5, #2]
     ab6:	210a      	movs	r1, #10
     ab8:	1c30      	adds	r0, r6, #0
     aba:	f002 fcc7 	bl	344c <__aeabi_uidiv>
     abe:	210a      	movs	r1, #10
				*rgb24++ = /* B */ BYTECLIP(yy + ((INT)(1.772 * CVACC) * cb) / CVACC);
     ac0:	0107      	lsls	r7, r0, #4
     ac2:	1c30      	adds	r0, r6, #0
     ac4:	f002 fd06 	bl	34d4 <__aeabi_uidivmod>
     ac8:	187f      	adds	r7, r7, r1
     aca:	7167      	strb	r7, [r4, #5]
     acc:	882d      	ldrh	r5, [r5, #0]
     ace:	4b13      	ldr	r3, [pc, #76]	; (b1c <rtc_settime+0xd8>)
     ad0:	210a      	movs	r1, #10
     ad2:	18ed      	adds	r5, r5, r3
     ad4:	1c28      	adds	r0, r5, #0
     ad6:	f002 fd07 	bl	34e8 <__aeabi_idiv>
				pc += 64 * 4 + (iy >> 1) * 8;
				if (iy >= 8) py += 64;
			} else {			/* Single block height */
				pc += mx * 8 + iy * 8;
			}
			for (ix = 0; ix < mx; ix++) {
     ada:	210a      	movs	r1, #10
     adc:	0106      	lsls	r6, r0, #4

/*-----------------------------------------------------------------------*/
/* Start to decompress the JPEG picture                                  */
/*-----------------------------------------------------------------------*/

JRESULT jd_decomp (
     ade:	1c28      	adds	r0, r5, #0
     ae0:	f002 fd58 	bl	3594 <__aeabi_idivmod>
     ae4:	a801      	add	r0, sp, #4
     ae6:	2268      	movs	r2, #104	; 0x68
     ae8:	7082      	strb	r2, [r0, #2]

	if (!JD_USE_SCALE || jd->scale != 3) {	/* Not for 1/8 scaling */

		/* Build an RGB MCU from discrete comopnents */
		rgb24 = (BYTE*)jd->workbuf;
		for (iy = 0; iy < my; iy++) {
     aea:	2300      	movs	r3, #0
     aec:	3a67      	subs	r2, #103	; 0x67
     aee:	8083      	strh	r3, [r0, #4]
     af0:	70c2      	strb	r2, [r0, #3]
     af2:	3207      	adds	r2, #7
				*rgb24++ = /* B */ BYTECLIP(yy + ((INT)(1.772 * CVACC) * cb) / CVACC);
			}
		}

		/* Descale the MCU rectangular if needed */
		if (JD_USE_SCALE && jd->scale) {
     af4:	7183      	strb	r3, [r0, #6]
     af6:	1876      	adds	r6, r6, r1
     af8:	7043      	strb	r3, [r0, #1]
     afa:	8182      	strh	r2, [r0, #12]
			UINT x, y, r, g, b, s, w, a;
			BYTE *op;

			/* Get averaged RGB value of each square correcponds to a pixel */
			s = jd->scale * 2;	/* Bumber of shifts for averaging */
			w = 1 << jd->scale;	/* Width of square */
     afc:	6104      	str	r4, [r0, #16]
     afe:	6143      	str	r3, [r0, #20]
		if (JD_USE_SCALE && jd->scale) {
			UINT x, y, r, g, b, s, w, a;
			BYTE *op;

			/* Get averaged RGB value of each square correcponds to a pixel */
			s = jd->scale * 2;	/* Bumber of shifts for averaging */
     b00:	71a6      	strb	r6, [r4, #6]
			w = 1 << jd->scale;	/* Width of square */
     b02:	71e3      	strb	r3, [r4, #7]
			a = (mx - w) * 3;	/* Bytes to skip for next line in the square */
     b04:	f7ff fc44 	bl	390 <i2c0_start>
     b08:	ab01      	add	r3, sp, #4

/*-----------------------------------------------------------------------*/
/* Start to decompress the JPEG picture                                  */
/*-----------------------------------------------------------------------*/

JRESULT jd_decomp (
     b0a:	781a      	ldrb	r2, [r3, #0]
     b0c:	2a00      	cmp	r2, #0
		if (JD_USE_SCALE && jd->scale) {
			UINT x, y, r, g, b, s, w, a;
			BYTE *op;

			/* Get averaged RGB value of each square correcponds to a pixel */
			s = jd->scale * 2;	/* Bumber of shifts for averaging */
     b0e:	d0fb      	beq.n	b08 <rtc_settime+0xc4>

/*-----------------------------------------------------------------------*/
/* Start to decompress the JPEG picture                                  */
/*-----------------------------------------------------------------------*/

JRESULT jd_decomp (
     b10:	7818      	ldrb	r0, [r3, #0]
     b12:	b00b      	add	sp, #44	; 0x2c
     b14:	3801      	subs	r0, #1
			BYTE *op;

			/* Get averaged RGB value of each square correcponds to a pixel */
			s = jd->scale * 2;	/* Bumber of shifts for averaging */
			w = 1 << jd->scale;	/* Width of square */
			a = (mx - w) * 3;	/* Bytes to skip for next line in the square */
     b16:	4243      	negs	r3, r0

/*-----------------------------------------------------------------------*/
/* Start to decompress the JPEG picture                                  */
/*-----------------------------------------------------------------------*/

JRESULT jd_decomp (
     b18:	4158      	adcs	r0, r3

			/* Get averaged RGB value of each square correcponds to a pixel */
			s = jd->scale * 2;	/* Bumber of shifts for averaging */
			w = 1 << jd->scale;	/* Width of square */
			a = (mx - w) * 3;	/* Bytes to skip for next line in the square */
			op = (BYTE*)jd->workbuf;
     b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for (iy = 0; iy < my; iy += w) {
     b1c:	fffff830 	.word	0xfffff830

00000b20 <xchg_spi>:
     b20:	b500      	push	{lr}
				for (ix = 0; ix < mx; ix += w) {
					rgb24 = (BYTE*)jd->workbuf + (iy * mx + ix) * 3;
     b22:	4b04      	ldr	r3, [pc, #16]	; (b34 <xchg_spi+0x14>)
     b24:	6018      	str	r0, [r3, #0]
     b26:	4a04      	ldr	r2, [pc, #16]	; (b38 <xchg_spi+0x18>)
					r = g = b = 0;
     b28:	6812      	ldr	r2, [r2, #0]
			w = 1 << jd->scale;	/* Width of square */
			a = (mx - w) * 3;	/* Bytes to skip for next line in the square */
			op = (BYTE*)jd->workbuf;
			for (iy = 0; iy < my; iy += w) {
				for (ix = 0; ix < mx; ix += w) {
					rgb24 = (BYTE*)jd->workbuf + (iy * mx + ix) * 3;
     b2a:	0751      	lsls	r1, r2, #29
					r = g = b = 0;
     b2c:	d5fb      	bpl.n	b26 <xchg_spi+0x6>
     b2e:	6818      	ldr	r0, [r3, #0]
					for (y = 0; y < w; y++) {	/* Accumulate RGB value in the square */
     b30:	b2c0      	uxtb	r0, r0
     b32:	bd00      	pop	{pc}
						for (x = 0; x < w; x++) {
							r += *rgb24++;
     b34:	40040008 	.word	0x40040008
			for (iy = 0; iy < my; iy += w) {
				for (ix = 0; ix < mx; ix += w) {
					rgb24 = (BYTE*)jd->workbuf + (iy * mx + ix) * 3;
					r = g = b = 0;
					for (y = 0; y < w; y++) {	/* Accumulate RGB value in the square */
						for (x = 0; x < w; x++) {
     b38:	4004000c 	.word	0x4004000c

00000b3c <wait_ready>:
							r += *rgb24++;
     b3c:	b510      	push	{r4, lr}
							g += *rgb24++;
     b3e:	4c06      	ldr	r4, [pc, #24]	; (b58 <wait_ready+0x1c>)
     b40:	20ff      	movs	r0, #255	; 0xff
     b42:	f7ff ffed 	bl	b20 <xchg_spi>
							b += *rgb24++;
     b46:	28ff      	cmp	r0, #255	; 0xff

/*-----------------------------------------------------------------------*/
/* Start to decompress the JPEG picture                                  */
/*-----------------------------------------------------------------------*/

JRESULT jd_decomp (
     b48:	d002      	beq.n	b50 <wait_ready+0x14>
					r = g = b = 0;
					for (y = 0; y < w; y++) {	/* Accumulate RGB value in the square */
						for (x = 0; x < w; x++) {
							r += *rgb24++;
							g += *rgb24++;
							b += *rgb24++;
     b4a:	3c01      	subs	r4, #1
     b4c:	2c00      	cmp	r4, #0
     b4e:	d1f7      	bne.n	b40 <wait_ready+0x4>
     b50:	38ff      	subs	r0, #255	; 0xff
     b52:	4243      	negs	r3, r0
     b54:	4158      	adcs	r0, r3
     b56:	bd10      	pop	{r4, pc}
     b58:	00030d40 	.word	0x00030d40

00000b5c <deselect>:
     b5c:	b508      	push	{r3, lr}
     b5e:	4b03      	ldr	r3, [pc, #12]	; (b6c <deselect+0x10>)
     b60:	2210      	movs	r2, #16
     b62:	601a      	str	r2, [r3, #0]
     b64:	20ff      	movs	r0, #255	; 0xff
     b66:	f7ff ffdb 	bl	b20 <xchg_spi>
     b6a:	bd08      	pop	{r3, pc}
			op = (BYTE*)jd->workbuf;
			for (iy = 0; iy < my; iy += w) {
				for (ix = 0; ix < mx; ix += w) {
					rgb24 = (BYTE*)jd->workbuf + (iy * mx + ix) * 3;
					r = g = b = 0;
					for (y = 0; y < w; y++) {	/* Accumulate RGB value in the square */
     b6c:	50030040 	.word	0x50030040

00000b70 <select>:
     b70:	b510      	push	{r4, lr}
						for (x = 0; x < w; x++) {
     b72:	e001      	b.n	b78 <select+0x8>
     b74:	4b0c      	ldr	r3, [pc, #48]	; (ba8 <select+0x38>)

/*-----------------------------------------------------------------------*/
/* Start to decompress the JPEG picture                                  */
/*-----------------------------------------------------------------------*/

JRESULT jd_decomp (
     b76:	681b      	ldr	r3, [r3, #0]
     b78:	4b0c      	ldr	r3, [pc, #48]	; (bac <select+0x3c>)
     b7a:	681a      	ldr	r2, [r3, #0]
     b7c:	2304      	movs	r3, #4
     b7e:	4013      	ands	r3, r2
			op = (BYTE*)jd->workbuf;
			for (iy = 0; iy < my; iy += w) {
				for (ix = 0; ix < mx; ix += w) {
					rgb24 = (BYTE*)jd->workbuf + (iy * mx + ix) * 3;
					r = g = b = 0;
					for (y = 0; y < w; y++) {	/* Accumulate RGB value in the square */
     b80:	d1f8      	bne.n	b74 <select+0x4>
     b82:	4a0b      	ldr	r2, [pc, #44]	; (bb0 <select+0x40>)
     b84:	2107      	movs	r1, #7

/*-----------------------------------------------------------------------*/
/* Start to decompress the JPEG picture                                  */
/*-----------------------------------------------------------------------*/

JRESULT jd_decomp (
     b86:	6011      	str	r1, [r2, #0]
			op = (BYTE*)jd->workbuf;
			for (iy = 0; iy < my; iy += w) {
				for (ix = 0; ix < mx; ix += w) {
					rgb24 = (BYTE*)jd->workbuf + (iy * mx + ix) * 3;
					r = g = b = 0;
					for (y = 0; y < w; y++) {	/* Accumulate RGB value in the square */
     b88:	490a      	ldr	r1, [pc, #40]	; (bb4 <select+0x44>)
     b8a:	20ff      	movs	r0, #255	; 0xff
     b8c:	600b      	str	r3, [r1, #0]
     b8e:	f7ff ffc7 	bl	b20 <xchg_spi>
							g += *rgb24++;
							b += *rgb24++;
						}
						rgb24 += a;
					}							/* Put the averaged RGB value as a pixel */
					*op++ = (BYTE)(r >> s);
     b92:	f7ff ffd3 	bl	b3c <wait_ready>
     b96:	1c04      	adds	r4, r0, #0
     b98:	2001      	movs	r0, #1
					*op++ = (BYTE)(g >> s);
     b9a:	2c00      	cmp	r4, #0
					*op++ = (BYTE)(b >> s);
     b9c:	d102      	bne.n	ba4 <select+0x34>
							b += *rgb24++;
						}
						rgb24 += a;
					}							/* Put the averaged RGB value as a pixel */
					*op++ = (BYTE)(r >> s);
					*op++ = (BYTE)(g >> s);
     b9e:	f7ff ffdd 	bl	b5c <deselect>
			s = jd->scale * 2;	/* Bumber of shifts for averaging */
			w = 1 << jd->scale;	/* Width of square */
			a = (mx - w) * 3;	/* Bytes to skip for next line in the square */
			op = (BYTE*)jd->workbuf;
			for (iy = 0; iy < my; iy += w) {
				for (ix = 0; ix < mx; ix += w) {
     ba2:	1c20      	adds	r0, r4, #0
     ba4:	bd10      	pop	{r4, pc}
     ba6:	46c0      	nop			; (mov r8, r8)
     ba8:	40040008 	.word	0x40040008

/*-----------------------------------------------------------------------*/
/* Start to decompress the JPEG picture                                  */
/*-----------------------------------------------------------------------*/

JRESULT jd_decomp (
     bac:	4004000c 	.word	0x4004000c
			s = jd->scale * 2;	/* Bumber of shifts for averaging */
			w = 1 << jd->scale;	/* Width of square */
			a = (mx - w) * 3;	/* Bytes to skip for next line in the square */
			op = (BYTE*)jd->workbuf;
			for (iy = 0; iy < my; iy += w) {
				for (ix = 0; ix < mx; ix += w) {
     bb0:	40040000 	.word	0x40040000
     bb4:	50030040 	.word	0x50030040

00000bb8 <rcvr_datablock>:
			/* Get averaged RGB value of each square correcponds to a pixel */
			s = jd->scale * 2;	/* Bumber of shifts for averaging */
			w = 1 << jd->scale;	/* Width of square */
			a = (mx - w) * 3;	/* Bytes to skip for next line in the square */
			op = (BYTE*)jd->workbuf;
			for (iy = 0; iy < my; iy += w) {
     bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bba:	4d27      	ldr	r5, [pc, #156]	; (c58 <rcvr_datablock+0xa0>)
     bbc:	1c04      	adds	r4, r0, #0
     bbe:	1c0e      	adds	r6, r1, #0
     bc0:	20ff      	movs	r0, #255	; 0xff
     bc2:	f7ff ffad 	bl	b20 <xchg_spi>
     bc6:	28ff      	cmp	r0, #255	; 0xff
     bc8:	d103      	bne.n	bd2 <rcvr_datablock+0x1a>

/*-----------------------------------------------------------------------*/
/* Start to decompress the JPEG picture                                  */
/*-----------------------------------------------------------------------*/

JRESULT jd_decomp (
     bca:	3d01      	subs	r5, #1
     bcc:	2d00      	cmp	r5, #0
     bce:	d1f7      	bne.n	bc0 <rcvr_datablock+0x8>
     bd0:	e040      	b.n	c54 <rcvr_datablock+0x9c>
     bd2:	2500      	movs	r5, #0
     bd4:	28fe      	cmp	r0, #254	; 0xfe
     bd6:	d13d      	bne.n	c54 <rcvr_datablock+0x9c>

	} else {	/* For only 1/8 scaling (left-top pixel in each block are the DC value of the block) */

		/* Build a 1/8 descaled RGB MCU from discrete comopnents */
		rgb24 = (BYTE*)jd->workbuf;
		pc = jd->mcubuf + mx * my;
     bd8:	4920      	ldr	r1, [pc, #128]	; (c5c <rcvr_datablock+0xa4>)
     bda:	230f      	movs	r3, #15
     bdc:	600b      	str	r3, [r1, #0]
     bde:	4a20      	ldr	r2, [pc, #128]	; (c60 <rcvr_datablock+0xa8>)
		cb = pc[0] - 128;		/* Get Cb/Cr component and restore right level */
     be0:	4b20      	ldr	r3, [pc, #128]	; (c64 <rcvr_datablock+0xac>)
		cr = pc[64] - 128;
     be2:	3e10      	subs	r6, #16
     be4:	6013      	str	r3, [r2, #0]
			for (ix = 0; ix < mx; ix += 8) {
				yy = *py;	/* Get Y component */
				py += 64;

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((INT)(1.402 * CVACC) * cr / CVACC));
     be6:	1c0d      	adds	r5, r1, #0

		/* Build a 1/8 descaled RGB MCU from discrete comopnents */
		rgb24 = (BYTE*)jd->workbuf;
		pc = jd->mcubuf + mx * my;
		cb = pc[0] - 128;		/* Get Cb/Cr component and restore right level */
		cr = pc[64] - 128;
     be8:	6013      	str	r3, [r2, #0]
			for (ix = 0; ix < mx; ix += 8) {
				yy = *py;	/* Get Y component */
				py += 64;

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((INT)(1.402 * CVACC) * cr / CVACC));
     bea:	6013      	str	r3, [r2, #0]
     bec:	6013      	str	r3, [r2, #0]
     bee:	6013      	str	r3, [r2, #0]
     bf0:	6013      	str	r3, [r2, #0]
     bf2:	6013      	str	r3, [r2, #0]
     bf4:	6013      	str	r3, [r2, #0]
				*rgb24++ = /* G */ BYTECLIP(yy - ((INT)(0.344 * CVACC) * cb + (INT)(0.714 * CVACC) * cr) / CVACC);
     bf6:	e013      	b.n	c20 <rcvr_datablock+0x68>
	} else {	/* For only 1/8 scaling (left-top pixel in each block are the DC value of the block) */

		/* Build a 1/8 descaled RGB MCU from discrete comopnents */
		rgb24 = (BYTE*)jd->workbuf;
		pc = jd->mcubuf + mx * my;
		cb = pc[0] - 128;		/* Get Cb/Cr component and restore right level */
     bf8:	6808      	ldr	r0, [r1, #0]
				yy = *py;	/* Get Y component */
				py += 64;

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((INT)(1.402 * CVACC) * cr / CVACC));
				*rgb24++ = /* G */ BYTECLIP(yy - ((INT)(0.344 * CVACC) * cb + (INT)(0.714 * CVACC) * cr) / CVACC);
     bfa:	0747      	lsls	r7, r0, #29
     bfc:	d5fc      	bpl.n	bf8 <rcvr_datablock+0x40>
     bfe:	6810      	ldr	r0, [r2, #0]
     c00:	6013      	str	r3, [r2, #0]
     c02:	b280      	uxth	r0, r0
     c04:	0a07      	lsrs	r7, r0, #8
     c06:	7027      	strb	r7, [r4, #0]
     c08:	7060      	strb	r0, [r4, #1]
     c0a:	6808      	ldr	r0, [r1, #0]
     c0c:	0747      	lsls	r7, r0, #29
     c0e:	d5fc      	bpl.n	c0a <rcvr_datablock+0x52>
     c10:	6811      	ldr	r1, [r2, #0]
     c12:	3e04      	subs	r6, #4
				*rgb24++ = /* B */ BYTECLIP(yy + ((INT)(1.772 * CVACC) * cb / CVACC));
     c14:	b289      	uxth	r1, r1
     c16:	0a08      	lsrs	r0, r1, #8
     c18:	6013      	str	r3, [r2, #0]
     c1a:	70a0      	strb	r0, [r4, #2]
     c1c:	70e1      	strb	r1, [r4, #3]
     c1e:	3404      	adds	r4, #4
     c20:	4911      	ldr	r1, [pc, #68]	; (c68 <rcvr_datablock+0xb0>)
     c22:	2e00      	cmp	r6, #0
     c24:	d1e8      	bne.n	bf8 <rcvr_datablock+0x40>
		rgb24 = (BYTE*)jd->workbuf;
		pc = jd->mcubuf + mx * my;
		cb = pc[0] - 128;		/* Get Cb/Cr component and restore right level */
		cr = pc[64] - 128;
		for (iy = 0; iy < my; iy += 8) {
			py = jd->mcubuf;
     c26:	1c26      	adds	r6, r4, #0
			if (iy == 8) py += 64 * 2;
     c28:	360e      	adds	r6, #14
     c2a:	6808      	ldr	r0, [r1, #0]
     c2c:	0747      	lsls	r7, r0, #29
			/* Get averaged RGB value of each square correcponds to a pixel */
			s = jd->scale * 2;	/* Bumber of shifts for averaging */
			w = 1 << jd->scale;	/* Width of square */
			a = (mx - w) * 3;	/* Bytes to skip for next line in the square */
			op = (BYTE*)jd->workbuf;
			for (iy = 0; iy < my; iy += w) {
     c2e:	d5fc      	bpl.n	c2a <rcvr_datablock+0x72>
     c30:	6810      	ldr	r0, [r2, #0]
     c32:	b280      	uxth	r0, r0
		cr = pc[64] - 128;
		for (iy = 0; iy < my; iy += 8) {
			py = jd->mcubuf;
			if (iy == 8) py += 64 * 2;
			for (ix = 0; ix < mx; ix += 8) {
				yy = *py;	/* Get Y component */
     c34:	0a07      	lsrs	r7, r0, #8
				py += 64;

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((INT)(1.402 * CVACC) * cr / CVACC));
     c36:	7027      	strb	r7, [r4, #0]
     c38:	7060      	strb	r0, [r4, #1]
     c3a:	42b4      	cmp	r4, r6
     c3c:	d001      	beq.n	c42 <rcvr_datablock+0x8a>
     c3e:	3402      	adds	r4, #2
     c40:	e7f3      	b.n	c2a <rcvr_datablock+0x72>
     c42:	4807      	ldr	r0, [pc, #28]	; (c60 <rcvr_datablock+0xa8>)
		for (iy = 0; iy < my; iy += 8) {
			py = jd->mcubuf;
			if (iy == 8) py += 64 * 2;
			for (ix = 0; ix < mx; ix += 8) {
				yy = *py;	/* Get Y component */
				py += 64;
     c44:	6003      	str	r3, [r0, #0]

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((INT)(1.402 * CVACC) * cr / CVACC));
     c46:	680b      	ldr	r3, [r1, #0]
				*rgb24++ = /* G */ BYTECLIP(yy - ((INT)(0.344 * CVACC) * cb + (INT)(0.714 * CVACC) * cr) / CVACC);
     c48:	0758      	lsls	r0, r3, #29
		cb = pc[0] - 128;		/* Get Cb/Cr component and restore right level */
		cr = pc[64] - 128;
		for (iy = 0; iy < my; iy += 8) {
			py = jd->mcubuf;
			if (iy == 8) py += 64 * 2;
			for (ix = 0; ix < mx; ix += 8) {
     c4a:	d5fc      	bpl.n	c46 <rcvr_datablock+0x8e>
				yy = *py;	/* Get Y component */
				py += 64;

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((INT)(1.402 * CVACC) * cr / CVACC));
				*rgb24++ = /* G */ BYTECLIP(yy - ((INT)(0.344 * CVACC) * cb + (INT)(0.714 * CVACC) * cr) / CVACC);
     c4c:	6813      	ldr	r3, [r2, #0]
     c4e:	2307      	movs	r3, #7
     c50:	602b      	str	r3, [r5, #0]
     c52:	2501      	movs	r5, #1
     c54:	1c28      	adds	r0, r5, #0
				*rgb24++ = /* B */ BYTECLIP(yy + ((INT)(1.772 * CVACC) * cb / CVACC));
     c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c58:	00030d40 	.word	0x00030d40
     c5c:	40040000 	.word	0x40040000
     c60:	40040008 	.word	0x40040008
		cb = pc[0] - 128;		/* Get Cb/Cr component and restore right level */
		cr = pc[64] - 128;
		for (iy = 0; iy < my; iy += 8) {
			py = jd->mcubuf;
			if (iy == 8) py += 64 * 2;
			for (ix = 0; ix < mx; ix += 8) {
     c64:	0000ffff 	.word	0x0000ffff
     c68:	4004000c 	.word	0x4004000c

00000c6c <xmit_datablock>:
		/* Build a 1/8 descaled RGB MCU from discrete comopnents */
		rgb24 = (BYTE*)jd->workbuf;
		pc = jd->mcubuf + mx * my;
		cb = pc[0] - 128;		/* Get Cb/Cr component and restore right level */
		cr = pc[64] - 128;
		for (iy = 0; iy < my; iy += 8) {
     c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c6e:	1c04      	adds	r4, r0, #0
     c70:	1c0d      	adds	r5, r1, #0
     c72:	f7ff ff63 	bl	b3c <wait_ready>
		}
	}

	/* Squeeze up pixel table if a part of MCU is to be truncated */
	mx >>= jd->scale;
	if (rx < mx) {
     c76:	2800      	cmp	r0, #0
			}
		}
	}

	/* Squeeze up pixel table if a part of MCU is to be truncated */
	mx >>= jd->scale;
     c78:	d049      	beq.n	d0e <xmit_datablock+0xa2>
	if (rx < mx) {
     c7a:	1c28      	adds	r0, r5, #0
     c7c:	f7ff ff50 	bl	b20 <xchg_spi>
		BYTE *s, *d;
		UINT x, y;

		s = d = (BYTE*)jd->workbuf;
     c80:	2001      	movs	r0, #1
			for (x = 0; x < rx; x++) {	/* Copy effective pixels */
				*d++ = *s++;
				*d++ = *s++;
				*d++ = *s++;
			}
			s += (mx - rx) * 3;	/* Skip truncated pixels */
     c82:	2dfd      	cmp	r5, #253	; 0xfd
     c84:	d043      	beq.n	d0e <xmit_datablock+0xa2>
	if (rx < mx) {
		BYTE *s, *d;
		UINT x, y;

		s = d = (BYTE*)jd->workbuf;
		for (y = 0; y < ry; y++) {
     c86:	4a22      	ldr	r2, [pc, #136]	; (d10 <xmit_datablock+0xa4>)
	mx >>= jd->scale;
	if (rx < mx) {
		BYTE *s, *d;
		UINT x, y;

		s = d = (BYTE*)jd->workbuf;
     c88:	230f      	movs	r3, #15
     c8a:	1c21      	adds	r1, r4, #0
		for (y = 0; y < ry; y++) {
			for (x = 0; x < rx; x++) {	/* Copy effective pixels */
				*d++ = *s++;
     c8c:	6013      	str	r3, [r2, #0]
		BYTE *s, *d;
		UINT x, y;

		s = d = (BYTE*)jd->workbuf;
		for (y = 0; y < ry; y++) {
			for (x = 0; x < rx; x++) {	/* Copy effective pixels */
     c8e:	3110      	adds	r1, #16
				*d++ = *s++;
     c90:	1c23      	adds	r3, r4, #0
				*d++ = *s++;
     c92:	1c10      	adds	r0, r2, #0
     c94:	781d      	ldrb	r5, [r3, #0]
				*d++ = *s++;
     c96:	785a      	ldrb	r2, [r3, #1]

/*-----------------------------------------------------------------------*/
/* Start to decompress the JPEG picture                                  */
/*-----------------------------------------------------------------------*/

JRESULT jd_decomp (
     c98:	022d      	lsls	r5, r5, #8
		s = d = (BYTE*)jd->workbuf;
		for (y = 0; y < ry; y++) {
			for (x = 0; x < rx; x++) {	/* Copy effective pixels */
				*d++ = *s++;
				*d++ = *s++;
				*d++ = *s++;
     c9a:	4315      	orrs	r5, r2
		BYTE *s, *d;
		UINT x, y;

		s = d = (BYTE*)jd->workbuf;
		for (y = 0; y < ry; y++) {
			for (x = 0; x < rx; x++) {	/* Copy effective pixels */
     c9c:	4a1d      	ldr	r2, [pc, #116]	; (d14 <xmit_datablock+0xa8>)

/*-----------------------------------------------------------------------*/
/* Start to decompress the JPEG picture                                  */
/*-----------------------------------------------------------------------*/

JRESULT jd_decomp (
     c9e:	3302      	adds	r3, #2
		BYTE *s, *d;
		UINT x, y;

		s = d = (BYTE*)jd->workbuf;
		for (y = 0; y < ry; y++) {
			for (x = 0; x < rx; x++) {	/* Copy effective pixels */
     ca0:	6015      	str	r5, [r2, #0]
     ca2:	428b      	cmp	r3, r1
	if (rx < mx) {
		BYTE *s, *d;
		UINT x, y;

		s = d = (BYTE*)jd->workbuf;
		for (y = 0; y < ry; y++) {
     ca4:	d1f6      	bne.n	c94 <xmit_datablock+0x28>
     ca6:	1c23      	adds	r3, r4, #0
     ca8:	34fd      	adds	r4, #253	; 0xfd
     caa:	3310      	adds	r3, #16
			for (x = 0; x < rx; x++) {	/* Copy effective pixels */
				*d++ = *s++;
				*d++ = *s++;
				*d++ = *s++;
			}
			s += (mx - rx) * 3;	/* Skip truncated pixels */
     cac:	34ff      	adds	r4, #255	; 0xff
		/* Build a 1/8 descaled RGB MCU from discrete comopnents */
		rgb24 = (BYTE*)jd->workbuf;
		pc = jd->mcubuf + mx * my;
		cb = pc[0] - 128;		/* Get Cb/Cr component and restore right level */
		cr = pc[64] - 128;
		for (iy = 0; iy < my; iy += 8) {
     cae:	781d      	ldrb	r5, [r3, #0]
     cb0:	7859      	ldrb	r1, [r3, #1]

	/* Convert RGB888 to RGB565 if needed */
	if (JD_FORMAT == 1) {
		BYTE *s = (BYTE*)jd->workbuf;
		WORD w, *d = (WORD*)s;
		UINT n = rx * ry;
     cb2:	022d      	lsls	r5, r5, #8
     cb4:	430d      	orrs	r5, r1
		}
	}

	/* Convert RGB888 to RGB565 if needed */
	if (JD_FORMAT == 1) {
		BYTE *s = (BYTE*)jd->workbuf;
     cb6:	4918      	ldr	r1, [pc, #96]	; (d18 <xmit_datablock+0xac>)
		WORD w, *d = (WORD*)s;
		UINT n = rx * ry;
     cb8:	680e      	ldr	r6, [r1, #0]
		}
	}

	/* Convert RGB888 to RGB565 if needed */
	if (JD_FORMAT == 1) {
		BYTE *s = (BYTE*)jd->workbuf;
     cba:	0777      	lsls	r7, r6, #29
		WORD w, *d = (WORD*)s;
     cbc:	d5fb      	bpl.n	cb6 <xmit_datablock+0x4a>
		UINT n = rx * ry;

		do {
			w = (*s++ & 0xF8) << 8;		/* RRRRR----------- */
			w |= (*s++ & 0xFC) << 3;	/* -----GGGGGG----- */
     cbe:	6816      	ldr	r6, [r2, #0]
		BYTE *s = (BYTE*)jd->workbuf;
		WORD w, *d = (WORD*)s;
		UINT n = rx * ry;

		do {
			w = (*s++ & 0xF8) << 8;		/* RRRRR----------- */
     cc0:	6015      	str	r5, [r2, #0]
			w |= (*s++ & 0xFC) << 3;	/* -----GGGGGG----- */
     cc2:	789d      	ldrb	r5, [r3, #2]
     cc4:	78de      	ldrb	r6, [r3, #3]
		BYTE *s = (BYTE*)jd->workbuf;
		WORD w, *d = (WORD*)s;
		UINT n = rx * ry;

		do {
			w = (*s++ & 0xF8) << 8;		/* RRRRR----------- */
     cc6:	022d      	lsls	r5, r5, #8
     cc8:	4335      	orrs	r5, r6
     cca:	680e      	ldr	r6, [r1, #0]
			w |= (*s++ & 0xFC) << 3;	/* -----GGGGGG----- */
     ccc:	0777      	lsls	r7, r6, #29
     cce:	d5fc      	bpl.n	cca <xmit_datablock+0x5e>
			w |= *s++ >> 3;				/* -----------BBBBB */
     cd0:	6816      	ldr	r6, [r2, #0]
			*d++ = w;
		} while (--n);
     cd2:	6015      	str	r5, [r2, #0]
		UINT n = rx * ry;

		do {
			w = (*s++ & 0xF8) << 8;		/* RRRRR----------- */
			w |= (*s++ & 0xFC) << 3;	/* -----GGGGGG----- */
			w |= *s++ >> 3;				/* -----------BBBBB */
     cd4:	42a3      	cmp	r3, r4
     cd6:	d001      	beq.n	cdc <xmit_datablock+0x70>
			*d++ = w;
     cd8:	3304      	adds	r3, #4

/*-----------------------------------------------------------------------*/
/* Start to decompress the JPEG picture                                  */
/*-----------------------------------------------------------------------*/

JRESULT jd_decomp (
     cda:	e7e8      	b.n	cae <xmit_datablock+0x42>

		do {
			w = (*s++ & 0xF8) << 8;		/* RRRRR----------- */
			w |= (*s++ & 0xFC) << 3;	/* -----GGGGGG----- */
			w |= *s++ >> 3;				/* -----------BBBBB */
			*d++ = w;
     cdc:	2300      	movs	r3, #0
		} while (--n);
     cde:	680c      	ldr	r4, [r1, #0]
     ce0:	0765      	lsls	r5, r4, #29
	}

	/* Output the RGB rectangular */
	return outfunc(jd, jd->workbuf, &rect) ? JDR_OK : JDR_INTR; 
     ce2:	d5fc      	bpl.n	cde <xmit_datablock+0x72>
     ce4:	3301      	adds	r3, #1
     ce6:	6814      	ldr	r4, [r2, #0]
     ce8:	2b08      	cmp	r3, #8
				rst = 1;
			}
			rc = mcu_load(jd);					/* Load an MCU (decompress huffman coded stream and apply IDCT) */
			if (rc != JDR_OK) return rc;
			rc = mcu_output(jd, outfunc, x, y);	/* Output the MCU (color space conversion, scaling and output) */
			if (rc != JDR_OK) return rc;
     cea:	d1f8      	bne.n	cde <xmit_datablock+0x72>
     cec:	4c0b      	ldr	r4, [pc, #44]	; (d1c <xmit_datablock+0xb0>)
	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;	/* Initialize DC values */
	rst = rsc = 0;

	rc = JDR_OK;
	for (y = 0; y < jd->height; y += my) {		/* Vertical loop of MCUs */
		for (x = 0; x < jd->width; x += mx) {	/* Horizontal loop of MCUs */
     cee:	4b09      	ldr	r3, [pc, #36]	; (d14 <xmit_datablock+0xa8>)
     cf0:	601c      	str	r4, [r3, #0]
     cf2:	680b      	ldr	r3, [r1, #0]
     cf4:	075f      	lsls	r7, r3, #29
     cf6:	d5fc      	bpl.n	cf2 <xmit_datablock+0x86>
     cf8:	6813      	ldr	r3, [r2, #0]
     cfa:	2307      	movs	r3, #7
     cfc:	6003      	str	r3, [r0, #0]
     cfe:	20ff      	movs	r0, #255	; 0xff

	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;	/* Initialize DC values */
	rst = rsc = 0;

	rc = JDR_OK;
	for (y = 0; y < jd->height; y += my) {		/* Vertical loop of MCUs */
     d00:	f7ff ff0e 	bl	b20 <xchg_spi>
     d04:	231f      	movs	r3, #31
     d06:	4018      	ands	r0, r3
     d08:	3805      	subs	r0, #5
     d0a:	4243      	negs	r3, r0
     d0c:	4158      	adcs	r0, r3
     d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d10:	40040000 	.word	0x40040000
     d14:	40040008 	.word	0x40040008
			if (b == 0) break;					/* EOB? */
			if (b < 0) return 0 - b;			/* Err: invalid code or input error */
			z = (UINT)b >> 4;					/* Number of leading zero elements */
			if (z) {
				i += z;							/* Skip zero elements */
				if (i >= 64) return JDR_FMT1;	/* Too long zero run */
     d18:	4004000c 	.word	0x4004000c
				rst = 1;
			}
			rc = mcu_load(jd);					/* Load an MCU (decompress huffman coded stream and apply IDCT) */
			if (rc != JDR_OK) return rc;
			rc = mcu_output(jd, outfunc, x, y);	/* Output the MCU (color space conversion, scaling and output) */
			if (rc != JDR_OK) return rc;
     d1c:	0000ffff 	.word	0x0000ffff

00000d20 <send_cmd>:
		}
	}

	return rc;
}
     d20:	b538      	push	{r3, r4, r5, lr}
     d22:	b243      	sxtb	r3, r0
     d24:	1c04      	adds	r4, r0, #0
     d26:	1c0d      	adds	r5, r1, #0
     d28:	2b00      	cmp	r3, #0
     d2a:	da07      	bge.n	d3c <send_cmd+0x1c>
     d2c:	2037      	movs	r0, #55	; 0x37
     d2e:	2100      	movs	r1, #0
     d30:	f7ff fff6 	bl	d20 <send_cmd>


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
     d34:	2801      	cmp	r0, #1
     d36:	d835      	bhi.n	da4 <send_cmd+0x84>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     d38:	237f      	movs	r3, #127	; 0x7f
     d3a:	401c      	ands	r4, r3
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
     d3c:	2c0c      	cmp	r4, #12
     d3e:	d007      	beq.n	d50 <send_cmd+0x30>
		deselect();
     d40:	f7ff ff0c 	bl	b5c <deselect>
		if (!select()) return 0xFF;
     d44:	f7ff ff14 	bl	b70 <select>
     d48:	1c03      	adds	r3, r0, #0
     d4a:	20ff      	movs	r0, #255	; 0xff
     d4c:	2b00      	cmp	r3, #0
     d4e:	d029      	beq.n	da4 <send_cmd+0x84>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
     d50:	2040      	movs	r0, #64	; 0x40
     d52:	4320      	orrs	r0, r4
     d54:	f7ff fee4 	bl	b20 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     d58:	0e28      	lsrs	r0, r5, #24
     d5a:	f7ff fee1 	bl	b20 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     d5e:	0c28      	lsrs	r0, r5, #16
     d60:	b2c0      	uxtb	r0, r0
     d62:	f7ff fedd 	bl	b20 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     d66:	0a28      	lsrs	r0, r5, #8
     d68:	b2c0      	uxtb	r0, r0
     d6a:	f7ff fed9 	bl	b20 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
     d6e:	b2e8      	uxtb	r0, r5
     d70:	f7ff fed6 	bl	b20 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     d74:	2095      	movs	r0, #149	; 0x95
     d76:	2c00      	cmp	r4, #0
     d78:	d003      	beq.n	d82 <send_cmd+0x62>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     d7a:	380e      	subs	r0, #14
     d7c:	2c08      	cmp	r4, #8
     d7e:	d000      	beq.n	d82 <send_cmd+0x62>
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
     d80:	3886      	subs	r0, #134	; 0x86
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
	xchg_spi(n);
     d82:	f7ff fecd 	bl	b20 <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Skip a stuff byte when stop reading */
     d86:	2c0c      	cmp	r4, #12
     d88:	d102      	bne.n	d90 <send_cmd+0x70>
     d8a:	20ff      	movs	r0, #255	; 0xff
     d8c:	f7ff fec8 	bl	b20 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     d90:	240a      	movs	r4, #10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
     d92:	20ff      	movs	r0, #255	; 0xff
     d94:	f7ff fec4 	bl	b20 <xchg_spi>
	while ((res & 0x80) && --n);
     d98:	0603      	lsls	r3, r0, #24
     d9a:	d503      	bpl.n	da4 <send_cmd+0x84>
     d9c:	3c01      	subs	r4, #1
     d9e:	b2e4      	uxtb	r4, r4
     da0:	2c00      	cmp	r4, #0
     da2:	d1f6      	bne.n	d92 <send_cmd+0x72>

	return res;			/* Return with the response value */
}
     da4:	bd38      	pop	{r3, r4, r5, pc}

00000da6 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     da6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	BYTE n, cmd, ty, ocr[4];
	long tmr;


	if (drv) return STA_NOINIT;			/* Supports only single drive */
     da8:	2201      	movs	r2, #1
     daa:	2800      	cmp	r0, #0
     dac:	d000      	beq.n	db0 <disk_initialize+0xa>
     dae:	e09b      	b.n	ee8 <disk_initialize+0x142>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
     db0:	4b4e      	ldr	r3, [pc, #312]	; (eec <disk_initialize+0x146>)
     db2:	781a      	ldrb	r2, [r3, #0]
     db4:	2302      	movs	r3, #2
     db6:	421a      	tst	r2, r3
     db8:	d000      	beq.n	dbc <disk_initialize+0x16>
     dba:	e095      	b.n	ee8 <disk_initialize+0x142>
void power_on (void)
{
#if BOARD_TYPE == 1
	GPIO0DIR |= _BV(2);		/* CS# (P0_2) = output */
#elif BOARD_TYPE == 2
	GPIO3DIR |= _BV(4);		/* CS# (P3_4) = output */
     dbc:	494c      	ldr	r1, [pc, #304]	; (ef0 <disk_initialize+0x14a>)
     dbe:	2210      	movs	r2, #16
     dc0:	6808      	ldr	r0, [r1, #0]
	SSP0CR0 = 0x0007;		/* Mode-0, 8-bit */
	SSP0CR1 = 0x02;			/* Enable SPI */
	IOCON_SCK_LOC = 0x02;	/* SCK0 location = PIO0_6 */
	IOCON_PIO0_6 = 0x02;	/* SCK0 */
	IOCON_PIO0_9 = 0x01;	/* MOSI0 */
	IOCON_PIO0_8 = 0x11;	/* MISO0/pull-up */
     dc2:	250a      	movs	r5, #10
void power_on (void)
{
#if BOARD_TYPE == 1
	GPIO0DIR |= _BV(2);		/* CS# (P0_2) = output */
#elif BOARD_TYPE == 2
	GPIO3DIR |= _BV(4);		/* CS# (P3_4) = output */
     dc4:	4310      	orrs	r0, r2
     dc6:	6008      	str	r0, [r1, #0]
#endif
	CS_HIGH();
     dc8:	494a      	ldr	r1, [pc, #296]	; (ef4 <disk_initialize+0x14e>)
     dca:	600a      	str	r2, [r1, #0]

	/* Initialize SPI0 module and attach it to the I/O pad */
	__enable_ahbclk(PCSSP0);
     dcc:	4a4a      	ldr	r2, [pc, #296]	; (ef8 <disk_initialize+0x152>)
     dce:	2180      	movs	r1, #128	; 0x80
     dd0:	6810      	ldr	r0, [r2, #0]
     dd2:	0109      	lsls	r1, r1, #4
     dd4:	4301      	orrs	r1, r0
     dd6:	6011      	str	r1, [r2, #0]
	PRESETCTRL &= ~_BV(0);	/* Set SSP0 reset */
     dd8:	4948      	ldr	r1, [pc, #288]	; (efc <disk_initialize+0x156>)
     dda:	2201      	movs	r2, #1
     ddc:	6808      	ldr	r0, [r1, #0]
     dde:	4390      	bics	r0, r2
     de0:	6008      	str	r0, [r1, #0]
	PRESETCTRL |= _BV(0);	/* Release SSP0 reset */
     de2:	6808      	ldr	r0, [r1, #0]
     de4:	4310      	orrs	r0, r2
     de6:	6008      	str	r0, [r1, #0]
	SSP0CLKDIV = 1;			/* PCLK = sysclk */
     de8:	3190      	adds	r1, #144	; 0x90
     dea:	600a      	str	r2, [r1, #0]
	SSP0CPSR = 0x02;		/* fc=PCLK/2 */
     dec:	4944      	ldr	r1, [pc, #272]	; (f00 <disk_initialize+0x15a>)
	SSP0CR0 = 0x0007;		/* Mode-0, 8-bit */
     dee:	2007      	movs	r0, #7
	/* Initialize SPI0 module and attach it to the I/O pad */
	__enable_ahbclk(PCSSP0);
	PRESETCTRL &= ~_BV(0);	/* Set SSP0 reset */
	PRESETCTRL |= _BV(0);	/* Release SSP0 reset */
	SSP0CLKDIV = 1;			/* PCLK = sysclk */
	SSP0CPSR = 0x02;		/* fc=PCLK/2 */
     df0:	600b      	str	r3, [r1, #0]
	SSP0CR0 = 0x0007;		/* Mode-0, 8-bit */
     df2:	3910      	subs	r1, #16
     df4:	6008      	str	r0, [r1, #0]
	SSP0CR1 = 0x02;			/* Enable SPI */
     df6:	604b      	str	r3, [r1, #4]
	IOCON_SCK_LOC = 0x02;	/* SCK0 location = PIO0_6 */
     df8:	4942      	ldr	r1, [pc, #264]	; (f04 <disk_initialize+0x15e>)
     dfa:	600b      	str	r3, [r1, #0]
	IOCON_PIO0_6 = 0x02;	/* SCK0 */
     dfc:	3964      	subs	r1, #100	; 0x64
     dfe:	600b      	str	r3, [r1, #0]
	IOCON_PIO0_9 = 0x01;	/* MOSI0 */
     e00:	4b41      	ldr	r3, [pc, #260]	; (f08 <disk_initialize+0x162>)
     e02:	601a      	str	r2, [r3, #0]
	IOCON_PIO0_8 = 0x11;	/* MISO0/pull-up */
     e04:	3210      	adds	r2, #16
     e06:	3b04      	subs	r3, #4
     e08:	601a      	str	r2, [r3, #0]

	if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	power_on();							/* Force socket power on */
	for (n = 10; n; n--) xchg_spi(0xFF); /* 80 dummy clocks */
     e0a:	3d01      	subs	r5, #1
     e0c:	20ff      	movs	r0, #255	; 0xff
     e0e:	b2ed      	uxtb	r5, r5
     e10:	f7ff fe86 	bl	b20 <xchg_spi>
     e14:	2d00      	cmp	r5, #0
     e16:	d1f8      	bne.n	e0a <disk_initialize+0x64>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     e18:	1c28      	adds	r0, r5, #0
     e1a:	1c29      	adds	r1, r5, #0
     e1c:	f7ff ff80 	bl	d20 <send_cmd>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	power_on();							/* Force socket power on */
	for (n = 10; n; n--) xchg_spi(0xFF); /* 80 dummy clocks */

	ty = 0;
     e20:	1c2c      	adds	r4, r5, #0
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     e22:	1c06      	adds	r6, r0, #0
     e24:	2801      	cmp	r0, #1
     e26:	d14f      	bne.n	ec8 <disk_initialize+0x122>
		tmr = 10000;
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
     e28:	21d5      	movs	r1, #213	; 0xd5
     e2a:	2008      	movs	r0, #8
     e2c:	0049      	lsls	r1, r1, #1
     e2e:	f7ff ff77 	bl	d20 <send_cmd>
     e32:	2801      	cmp	r0, #1
     e34:	d12e      	bne.n	e94 <disk_initialize+0xee>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get trailing return value of R7 resp */
     e36:	20ff      	movs	r0, #255	; 0xff
     e38:	f7ff fe72 	bl	b20 <xchg_spi>
     e3c:	ab01      	add	r3, sp, #4
     e3e:	5558      	strb	r0, [r3, r5]
     e40:	3501      	adds	r5, #1
     e42:	2d04      	cmp	r5, #4
     e44:	d1f7      	bne.n	e36 <disk_initialize+0x90>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     e46:	789a      	ldrb	r2, [r3, #2]
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	power_on();							/* Force socket power on */
	for (n = 10; n; n--) xchg_spi(0xFF); /* 80 dummy clocks */

	ty = 0;
     e48:	2400      	movs	r4, #0
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		tmr = 10000;
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     e4a:	2a01      	cmp	r2, #1
     e4c:	d13c      	bne.n	ec8 <disk_initialize+0x122>
     e4e:	78db      	ldrb	r3, [r3, #3]
     e50:	2baa      	cmp	r3, #170	; 0xaa
     e52:	d139      	bne.n	ec8 <disk_initialize+0x122>
     e54:	4c2d      	ldr	r4, [pc, #180]	; (f0c <disk_initialize+0x166>)
				while (--tmr && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     e56:	3c01      	subs	r4, #1
     e58:	2c00      	cmp	r4, #0
     e5a:	d035      	beq.n	ec8 <disk_initialize+0x122>
     e5c:	2180      	movs	r1, #128	; 0x80
     e5e:	20a9      	movs	r0, #169	; 0xa9
     e60:	05c9      	lsls	r1, r1, #23
     e62:	f7ff ff5d 	bl	d20 <send_cmd>
     e66:	1e05      	subs	r5, r0, #0
     e68:	d1f5      	bne.n	e56 <disk_initialize+0xb0>
				if (tmr && send_cmd(CMD58, 0) == 0) {			/* Check CCS bit in the OCR */
     e6a:	203a      	movs	r0, #58	; 0x3a
     e6c:	1c29      	adds	r1, r5, #0
     e6e:	f7ff ff57 	bl	d20 <send_cmd>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	power_on();							/* Force socket power on */
	for (n = 10; n; n--) xchg_spi(0xFF); /* 80 dummy clocks */

	ty = 0;
     e72:	1c2c      	adds	r4, r5, #0
		tmr = 10000;
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (--tmr && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {			/* Check CCS bit in the OCR */
     e74:	2800      	cmp	r0, #0
     e76:	d127      	bne.n	ec8 <disk_initialize+0x122>
     e78:	1c04      	adds	r4, r0, #0
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
     e7a:	20ff      	movs	r0, #255	; 0xff
     e7c:	f7ff fe50 	bl	b20 <xchg_spi>
     e80:	ab01      	add	r3, sp, #4
     e82:	5518      	strb	r0, [r3, r4]
     e84:	3401      	adds	r4, #1
     e86:	2c04      	cmp	r4, #4
     e88:	d1f7      	bne.n	e7a <disk_initialize+0xd4>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     e8a:	781b      	ldrb	r3, [r3, #0]
     e8c:	065a      	lsls	r2, r3, #25
     e8e:	d51b      	bpl.n	ec8 <disk_initialize+0x122>
     e90:	3408      	adds	r4, #8
     e92:	e019      	b.n	ec8 <disk_initialize+0x122>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) {
     e94:	20a9      	movs	r0, #169	; 0xa9
     e96:	1c29      	adds	r1, r5, #0
     e98:	f7ff ff42 	bl	d20 <send_cmd>
     e9c:	2801      	cmp	r0, #1
     e9e:	d802      	bhi.n	ea6 <disk_initialize+0x100>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
     ea0:	2402      	movs	r4, #2
     ea2:	25a9      	movs	r5, #169	; 0xa9
     ea4:	e001      	b.n	eaa <disk_initialize+0x104>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     ea6:	1c34      	adds	r4, r6, #0
     ea8:	1c35      	adds	r5, r6, #0
			}
			while (tmr && send_cmd(cmd, 0));		/* Wait for leaving idle state */
     eaa:	1c28      	adds	r0, r5, #0
     eac:	2100      	movs	r1, #0
     eae:	f7ff ff37 	bl	d20 <send_cmd>
     eb2:	2800      	cmp	r0, #0
     eb4:	d1f9      	bne.n	eaa <disk_initialize+0x104>
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     eb6:	2180      	movs	r1, #128	; 0x80
     eb8:	3010      	adds	r0, #16
     eba:	0089      	lsls	r1, r1, #2
     ebc:	f7ff ff30 	bl	d20 <send_cmd>
				ty = 0;
     ec0:	4243      	negs	r3, r0
     ec2:	4158      	adcs	r0, r3
     ec4:	4240      	negs	r0, r0
     ec6:	4004      	ands	r4, r0
		}
	}
	CardType = ty;
     ec8:	4b11      	ldr	r3, [pc, #68]	; (f10 <disk_initialize+0x16a>)
     eca:	701c      	strb	r4, [r3, #0]
	deselect();
     ecc:	f7ff fe46 	bl	b5c <deselect>
     ed0:	4b06      	ldr	r3, [pc, #24]	; (eec <disk_initialize+0x146>)
     ed2:	2201      	movs	r2, #1

	if (ty) {			/* Initialization succeded */
     ed4:	2c00      	cmp	r4, #0
     ed6:	d003      	beq.n	ee0 <disk_initialize+0x13a>
		Stat &= ~STA_NOINIT;
     ed8:	7819      	ldrb	r1, [r3, #0]
     eda:	4391      	bics	r1, r2
     edc:	1c0a      	adds	r2, r1, #0
     ede:	e001      	b.n	ee4 <disk_initialize+0x13e>
	} else {			/* Initialization failed */
		Stat |= STA_NOINIT;
     ee0:	7819      	ldrb	r1, [r3, #0]
     ee2:	430a      	orrs	r2, r1
     ee4:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
     ee6:	781a      	ldrb	r2, [r3, #0]
}
     ee8:	1c10      	adds	r0, r2, #0
     eea:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
     eec:	10000000 	.word	0x10000000
     ef0:	50038000 	.word	0x50038000
     ef4:	50030040 	.word	0x50030040
     ef8:	40048080 	.word	0x40048080
     efc:	40048004 	.word	0x40048004
     f00:	40040010 	.word	0x40040010
     f04:	400440b0 	.word	0x400440b0
     f08:	40044064 	.word	0x40044064
     f0c:	00002710 	.word	0x00002710
     f10:	1000011c 	.word	0x1000011c

00000f14 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     f14:	b538      	push	{r3, r4, r5, lr}
     f16:	2401      	movs	r4, #1
	int n;
	DSTATUS st;


	if (drv) return STA_NOINIT;		/* Supports only single drive */
     f18:	1c25      	adds	r5, r4, #0
     f1a:	2800      	cmp	r0, #0
     f1c:	d116      	bne.n	f4c <disk_status+0x38>

	st = Stat;
     f1e:	4b0c      	ldr	r3, [pc, #48]	; (f50 <disk_status+0x3c>)
     f20:	781c      	ldrb	r4, [r3, #0]
	if (!(st & STA_NOINIT)) {
     f22:	1c21      	adds	r1, r4, #0
     f24:	4029      	ands	r1, r5
     f26:	d10f      	bne.n	f48 <disk_status+0x34>
		if (send_cmd(CMD58, 0))		/* Check if the card is kept initialized */
     f28:	303a      	adds	r0, #58	; 0x3a
     f2a:	f7ff fef9 	bl	d20 <send_cmd>
     f2e:	2800      	cmp	r0, #0
     f30:	d000      	beq.n	f34 <disk_status+0x20>
			st = STA_NOINIT;
     f32:	1c2c      	adds	r4, r5, #0
     f34:	2504      	movs	r5, #4
		for (n = 0; n < 4; n++) xchg_spi(0xFF);
     f36:	20ff      	movs	r0, #255	; 0xff
     f38:	3d01      	subs	r5, #1
     f3a:	f7ff fdf1 	bl	b20 <xchg_spi>
     f3e:	2d00      	cmp	r5, #0
     f40:	d1f9      	bne.n	f36 <disk_status+0x22>
		CS_HIGH();
     f42:	4b04      	ldr	r3, [pc, #16]	; (f54 <disk_status+0x40>)
     f44:	2210      	movs	r2, #16
     f46:	601a      	str	r2, [r3, #0]
	}
	Stat = st;
     f48:	4b01      	ldr	r3, [pc, #4]	; (f50 <disk_status+0x3c>)
     f4a:	701c      	strb	r4, [r3, #0]

	return st;
}
     f4c:	1c20      	adds	r0, r4, #0
     f4e:	bd38      	pop	{r3, r4, r5, pc}
     f50:	10000000 	.word	0x10000000
     f54:	50030040 	.word	0x50030040

00000f58 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     f58:	b538      	push	{r3, r4, r5, lr}
     f5a:	1c0d      	adds	r5, r1, #0
     f5c:	1c11      	adds	r1, r2, #0
	if (drv || !count) return RES_PARERR;
     f5e:	1e1c      	subs	r4, r3, #0
     f60:	d03a      	beq.n	fd8 <disk_read+0x80>
     f62:	2800      	cmp	r0, #0
     f64:	d138      	bne.n	fd8 <disk_read+0x80>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     f66:	4b1d      	ldr	r3, [pc, #116]	; (fdc <disk_read+0x84>)
     f68:	3003      	adds	r0, #3
     f6a:	781b      	ldrb	r3, [r3, #0]
     f6c:	07da      	lsls	r2, r3, #31
     f6e:	d434      	bmi.n	fda <disk_read+0x82>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     f70:	4b1b      	ldr	r3, [pc, #108]	; (fe0 <disk_read+0x88>)
     f72:	781b      	ldrb	r3, [r3, #0]
     f74:	071a      	lsls	r2, r3, #28
     f76:	d400      	bmi.n	f7a <disk_read+0x22>
     f78:	0249      	lsls	r1, r1, #9

	if (count == 1) {	/* Single block read */
     f7a:	2c01      	cmp	r4, #1
     f7c:	d10e      	bne.n	f9c <disk_read+0x44>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
     f7e:	2011      	movs	r0, #17
     f80:	f7ff fece 	bl	d20 <send_cmd>
     f84:	2800      	cmp	r0, #0
     f86:	d121      	bne.n	fcc <disk_read+0x74>
			&& rcvr_datablock(buff, 512))
     f88:	2180      	movs	r1, #128	; 0x80
     f8a:	1c28      	adds	r0, r5, #0
     f8c:	0089      	lsls	r1, r1, #2
     f8e:	f7ff fe13 	bl	bb8 <rcvr_datablock>
			count = 0;
     f92:	4243      	negs	r3, r0
     f94:	4158      	adcs	r0, r3
     f96:	4240      	negs	r0, r0
     f98:	4004      	ands	r4, r0
     f9a:	e017      	b.n	fcc <disk_read+0x74>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
     f9c:	2012      	movs	r0, #18
     f9e:	f7ff febf 	bl	d20 <send_cmd>
     fa2:	2800      	cmp	r0, #0
     fa4:	d112      	bne.n	fcc <disk_read+0x74>
			do {
				if (!rcvr_datablock(buff, 512)) break;
     fa6:	2180      	movs	r1, #128	; 0x80
     fa8:	1c28      	adds	r0, r5, #0
     faa:	0089      	lsls	r1, r1, #2
     fac:	f7ff fe04 	bl	bb8 <rcvr_datablock>
     fb0:	2800      	cmp	r0, #0
     fb2:	d007      	beq.n	fc4 <disk_read+0x6c>
				buff += 512;
			} while (--count);
     fb4:	3c01      	subs	r4, #1
     fb6:	b2e4      	uxtb	r4, r4
     fb8:	2c00      	cmp	r4, #0
     fba:	d003      	beq.n	fc4 <disk_read+0x6c>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
     fbc:	2380      	movs	r3, #128	; 0x80
     fbe:	009b      	lsls	r3, r3, #2
     fc0:	18ed      	adds	r5, r5, r3
     fc2:	e7f0      	b.n	fa6 <disk_read+0x4e>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
     fc4:	200c      	movs	r0, #12
     fc6:	2100      	movs	r1, #0
     fc8:	f7ff feaa 	bl	d20 <send_cmd>
		}
	}
	deselect();
     fcc:	f7ff fdc6 	bl	b5c <deselect>

	return count ? RES_ERROR : RES_OK;
     fd0:	1c20      	adds	r0, r4, #0
     fd2:	1e44      	subs	r4, r0, #1
     fd4:	41a0      	sbcs	r0, r4
     fd6:	e000      	b.n	fda <disk_read+0x82>
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
     fd8:	2004      	movs	r0, #4
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     fda:	bd38      	pop	{r3, r4, r5, pc}
     fdc:	10000000 	.word	0x10000000
     fe0:	1000011c 	.word	0x1000011c

00000fe4 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     fe4:	b570      	push	{r4, r5, r6, lr}
     fe6:	1c0d      	adds	r5, r1, #0
     fe8:	1c16      	adds	r6, r2, #0
	if (drv || !count) return RES_PARERR;
     fea:	1e1c      	subs	r4, r3, #0
     fec:	d044      	beq.n	1078 <disk_write+0x94>
     fee:	2800      	cmp	r0, #0
     ff0:	d142      	bne.n	1078 <disk_write+0x94>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     ff2:	4b22      	ldr	r3, [pc, #136]	; (107c <disk_write+0x98>)
     ff4:	3003      	adds	r0, #3
     ff6:	781b      	ldrb	r3, [r3, #0]
     ff8:	07da      	lsls	r2, r3, #31
     ffa:	d43e      	bmi.n	107a <disk_write+0x96>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     ffc:	4b20      	ldr	r3, [pc, #128]	; (1080 <disk_write+0x9c>)
     ffe:	781b      	ldrb	r3, [r3, #0]
    1000:	071a      	lsls	r2, r3, #28
    1002:	d400      	bmi.n	1006 <disk_write+0x22>
    1004:	0276      	lsls	r6, r6, #9

	if (count == 1) {	/* Single block write */
    1006:	2c01      	cmp	r4, #1
    1008:	d10e      	bne.n	1028 <disk_write+0x44>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    100a:	2018      	movs	r0, #24
    100c:	1c31      	adds	r1, r6, #0
    100e:	f7ff fe87 	bl	d20 <send_cmd>
    1012:	2800      	cmp	r0, #0
    1014:	d12a      	bne.n	106c <disk_write+0x88>
			&& xmit_datablock(buff, 0xFE))
    1016:	1c28      	adds	r0, r5, #0
    1018:	21fe      	movs	r1, #254	; 0xfe
    101a:	f7ff fe27 	bl	c6c <xmit_datablock>
			count = 0;
    101e:	4243      	negs	r3, r0
    1020:	4158      	adcs	r0, r3
    1022:	4240      	negs	r0, r0
    1024:	4004      	ands	r4, r0
    1026:	e021      	b.n	106c <disk_write+0x88>
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    1028:	2206      	movs	r2, #6
    102a:	4213      	tst	r3, r2
    102c:	d003      	beq.n	1036 <disk_write+0x52>
    102e:	2097      	movs	r0, #151	; 0x97
    1030:	1c21      	adds	r1, r4, #0
    1032:	f7ff fe75 	bl	d20 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    1036:	2019      	movs	r0, #25
    1038:	1c31      	adds	r1, r6, #0
    103a:	f7ff fe71 	bl	d20 <send_cmd>
    103e:	2800      	cmp	r0, #0
    1040:	d114      	bne.n	106c <disk_write+0x88>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    1042:	1c28      	adds	r0, r5, #0
    1044:	21fc      	movs	r1, #252	; 0xfc
    1046:	f7ff fe11 	bl	c6c <xmit_datablock>
    104a:	2800      	cmp	r0, #0
    104c:	d007      	beq.n	105e <disk_write+0x7a>
				buff += 512;
			} while (--count);
    104e:	3c01      	subs	r4, #1
    1050:	b2e4      	uxtb	r4, r4
    1052:	2c00      	cmp	r4, #0
    1054:	d003      	beq.n	105e <disk_write+0x7a>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
    1056:	2380      	movs	r3, #128	; 0x80
    1058:	009b      	lsls	r3, r3, #2
    105a:	18ed      	adds	r5, r5, r3
    105c:	e7f1      	b.n	1042 <disk_write+0x5e>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    105e:	2000      	movs	r0, #0
    1060:	21fd      	movs	r1, #253	; 0xfd
    1062:	f7ff fe03 	bl	c6c <xmit_datablock>
    1066:	2800      	cmp	r0, #0
    1068:	d100      	bne.n	106c <disk_write+0x88>
				count = 1;
    106a:	2401      	movs	r4, #1
		}
	}
	deselect();
    106c:	f7ff fd76 	bl	b5c <deselect>

	return count ? RES_ERROR : RES_OK;
    1070:	1c20      	adds	r0, r4, #0
    1072:	1e44      	subs	r4, r0, #1
    1074:	41a0      	sbcs	r0, r4
    1076:	e000      	b.n	107a <disk_write+0x96>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
    1078:	2004      	movs	r0, #4
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    107a:	bd70      	pop	{r4, r5, r6, pc}
    107c:	10000000 	.word	0x10000000
    1080:	1000011c 	.word	0x1000011c

00001084 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    1084:	b5f0      	push	{r4, r5, r6, r7, lr}
    1086:	b085      	sub	sp, #20
    1088:	1c0e      	adds	r6, r1, #0
    108a:	1c15      	adds	r5, r2, #0
	DRESULT res;
	BYTE n, csd[16];
	DWORD csize;


	if (drv) return RES_PARERR;
    108c:	2404      	movs	r4, #4
    108e:	2800      	cmp	r0, #0
    1090:	d148      	bne.n	1124 <disk_ioctl+0xa0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    1092:	4b26      	ldr	r3, [pc, #152]	; (112c <disk_ioctl+0xa8>)
    1094:	3c01      	subs	r4, #1
    1096:	7819      	ldrb	r1, [r3, #0]
    1098:	2301      	movs	r3, #1
    109a:	4019      	ands	r1, r3
    109c:	d142      	bne.n	1124 <disk_ioctl+0xa0>

	res = RES_ERROR;

	switch (ctrl) {
    109e:	2e00      	cmp	r6, #0
    10a0:	d003      	beq.n	10aa <disk_ioctl+0x26>
			res = RES_OK;
		}
		break;

	default:
		res = RES_PARERR;
    10a2:	2404      	movs	r4, #4
	if (drv) return RES_PARERR;
	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;

	switch (ctrl) {
    10a4:	429e      	cmp	r6, r3
    10a6:	d13d      	bne.n	1124 <disk_ioctl+0xa0>
    10a8:	e004      	b.n	10b4 <disk_ioctl+0x30>
	case CTRL_SYNC :		/* Finalize internal write process of the card */
		if (select()) res = RES_OK;
    10aa:	f7ff fd61 	bl	b70 <select>
	DRESULT res;
	BYTE n, csd[16];
	DWORD csize;


	if (drv) return RES_PARERR;
    10ae:	4244      	negs	r4, r0
    10b0:	4144      	adcs	r4, r0
    10b2:	e037      	b.n	1124 <disk_ioctl+0xa0>
	case CTRL_SYNC :		/* Finalize internal write process of the card */
		if (select()) res = RES_OK;
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    10b4:	2009      	movs	r0, #9
    10b6:	f7ff fe33 	bl	d20 <send_cmd>


	if (drv) return RES_PARERR;
	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    10ba:	1c34      	adds	r4, r6, #0
	case CTRL_SYNC :		/* Finalize internal write process of the card */
		if (select()) res = RES_OK;
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    10bc:	1e07      	subs	r7, r0, #0
    10be:	d131      	bne.n	1124 <disk_ioctl+0xa0>
    10c0:	4668      	mov	r0, sp
    10c2:	2110      	movs	r1, #16
    10c4:	f7ff fd78 	bl	bb8 <rcvr_datablock>
    10c8:	2800      	cmp	r0, #0
    10ca:	d02b      	beq.n	1124 <disk_ioctl+0xa0>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    10cc:	4668      	mov	r0, sp
    10ce:	7801      	ldrb	r1, [r0, #0]
    10d0:	79c3      	ldrb	r3, [r0, #7]
    10d2:	0989      	lsrs	r1, r1, #6
    10d4:	7a02      	ldrb	r2, [r0, #8]
    10d6:	2901      	cmp	r1, #1
    10d8:	d10a      	bne.n	10f0 <disk_ioctl+0x6c>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    10da:	313e      	adds	r1, #62	; 0x3e
    10dc:	400b      	ands	r3, r1
    10de:	7a41      	ldrb	r1, [r0, #9]
    10e0:	041b      	lsls	r3, r3, #16
    10e2:	0212      	lsls	r2, r2, #8
    10e4:	3301      	adds	r3, #1
    10e6:	1852      	adds	r2, r2, r1
    10e8:	189a      	adds	r2, r3, r2
				*(DWORD*)buff = csize << 10;
    10ea:	0292      	lsls	r2, r2, #10
    10ec:	602a      	str	r2, [r5, #0]
    10ee:	e018      	b.n	1122 <disk_ioctl+0x9e>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    10f0:	009b      	lsls	r3, r3, #2
    10f2:	0992      	lsrs	r2, r2, #6
    10f4:	18d2      	adds	r2, r2, r3
    10f6:	466b      	mov	r3, sp
    10f8:	7999      	ldrb	r1, [r3, #6]
    10fa:	2303      	movs	r3, #3
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    10fc:	466c      	mov	r4, sp
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    10fe:	4019      	ands	r1, r3
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    1100:	7960      	ldrb	r0, [r4, #5]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    1102:	0289      	lsls	r1, r1, #10
    1104:	3201      	adds	r2, #1
    1106:	1852      	adds	r2, r2, r1
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    1108:	210f      	movs	r1, #15
    110a:	4001      	ands	r1, r0
    110c:	7aa0      	ldrb	r0, [r4, #10]
    110e:	09c0      	lsrs	r0, r0, #7
    1110:	1809      	adds	r1, r1, r0
    1112:	7a60      	ldrb	r0, [r4, #9]
    1114:	4003      	ands	r3, r0
    1116:	005b      	lsls	r3, r3, #1
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    1118:	18c9      	adds	r1, r1, r3
    111a:	3907      	subs	r1, #7
    111c:	1c13      	adds	r3, r2, #0
    111e:	408b      	lsls	r3, r1
    1120:	602b      	str	r3, [r5, #0]
			}
			res = RES_OK;
    1122:	1c3c      	adds	r4, r7, #0
	default:
		res = RES_PARERR;
	}

	return res;
}
    1124:	b005      	add	sp, #20
    1126:	1c20      	adds	r0, r4, #0
    1128:	bdf0      	pop	{r4, r5, r6, r7, pc}
    112a:	46c0      	nop			; (mov r8, r8)
    112c:	10000000 	.word	0x10000000

00001130 <put_rc>:
/* Put FatFs result code                                        */
/*--------------------------------------------------------------*/

static
void put_rc (FRESULT rc)
{
    1130:	b508      	push	{r3, lr}
    1132:	1c01      	adds	r1, r0, #0
		"INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
		"INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0"
		"LOCKED\0" "NOT_ENOUGH_CORE\0" "TOO_MANY_OPEN_FILES\0";
	FRESULT i;

	for (i = 0; i != rc && *str; i++) {
    1134:	2300      	movs	r3, #0

static
void put_rc (FRESULT rc)
{
	const char *str =
		"OK\0" "DISK_ERR\0" "INT_ERR\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0"
    1136:	4a08      	ldr	r2, [pc, #32]	; (1158 <put_rc+0x28>)
		"INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
		"INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0"
		"LOCKED\0" "NOT_ENOUGH_CORE\0" "TOO_MANY_OPEN_FILES\0";
	FRESULT i;

	for (i = 0; i != rc && *str; i++) {
    1138:	e005      	b.n	1146 <put_rc+0x16>
		while (*str++) ;
    113a:	7810      	ldrb	r0, [r2, #0]
    113c:	3201      	adds	r2, #1
    113e:	2800      	cmp	r0, #0
    1140:	d1fb      	bne.n	113a <put_rc+0xa>
		"INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
		"INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0"
		"LOCKED\0" "NOT_ENOUGH_CORE\0" "TOO_MANY_OPEN_FILES\0";
	FRESULT i;

	for (i = 0; i != rc && *str; i++) {
    1142:	3301      	adds	r3, #1
    1144:	b2db      	uxtb	r3, r3
    1146:	428b      	cmp	r3, r1
    1148:	d002      	beq.n	1150 <put_rc+0x20>
    114a:	7810      	ldrb	r0, [r2, #0]
    114c:	2800      	cmp	r0, #0
    114e:	d1f4      	bne.n	113a <put_rc+0xa>
		while (*str++) ;
	}
	xprintf("rc=%u FR_%s\n", (UINT)rc, str);
    1150:	4802      	ldr	r0, [pc, #8]	; (115c <put_rc+0x2c>)
    1152:	f7ff fb09 	bl	768 <xprintf>
}
    1156:	bd08      	pop	{r3, pc}
    1158:	000035e2 	.word	0x000035e2
    115c:	000036b3 	.word	0x000036b3

00001160 <get_fattime>:
BYTE Buff[4096] __attribute__ ((aligned(4)));

volatile UINT Timer;	/* 1kHz increment timer */

DWORD get_fattime (void)
{
    1160:	b507      	push	{r0, r1, r2, lr}
	RTC rtc;


	/* Get local time */
	rtc_gettime(&rtc);
    1162:	4668      	mov	r0, sp
    1164:	f7ff fc00 	bl	968 <rtc_gettime>

	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)(rtc.year - 1980) << 25)
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
    1168:	466a      	mov	r2, sp
    116a:	78d0      	ldrb	r0, [r2, #3]
	/* Get local time */
	rtc_gettime(&rtc);

	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)(rtc.year - 1980) << 25)
			| ((DWORD)rtc.month << 21)
    116c:	7893      	ldrb	r3, [r2, #2]
			| ((DWORD)rtc.mday << 16)
    116e:	0400      	lsls	r0, r0, #16
	/* Get local time */
	rtc_gettime(&rtc);

	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)(rtc.year - 1980) << 25)
			| ((DWORD)rtc.month << 21)
    1170:	055b      	lsls	r3, r3, #21
    1172:	4318      	orrs	r0, r3
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
    1174:	7953      	ldrb	r3, [r2, #5]
    1176:	02db      	lsls	r3, r3, #11
	rtc_gettime(&rtc);

	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)(rtc.year - 1980) << 25)
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
    1178:	4318      	orrs	r0, r3
			| ((DWORD)rtc.hour << 11)
			| ((DWORD)rtc.min << 5)
    117a:	7993      	ldrb	r3, [r2, #6]
    117c:	015b      	lsls	r3, r3, #5

	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)(rtc.year - 1980) << 25)
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
    117e:	4318      	orrs	r0, r3
			| ((DWORD)rtc.min << 5)
			| ((DWORD)rtc.sec >> 1);
    1180:	79d3      	ldrb	r3, [r2, #7]
    1182:	085b      	lsrs	r3, r3, #1
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)(rtc.year - 1980) << 25)
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
			| ((DWORD)rtc.min << 5)
    1184:	4318      	orrs	r0, r3

	/* Get local time */
	rtc_gettime(&rtc);

	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)(rtc.year - 1980) << 25)
    1186:	8813      	ldrh	r3, [r2, #0]
    1188:	4a02      	ldr	r2, [pc, #8]	; (1194 <get_fattime+0x34>)
    118a:	189b      	adds	r3, r3, r2
    118c:	065b      	lsls	r3, r3, #25
    118e:	4318      	orrs	r0, r3
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
			| ((DWORD)rtc.min << 5)
			| ((DWORD)rtc.sec >> 1);
}
    1190:	bd0e      	pop	{r1, r2, r3, pc}
    1192:	46c0      	nop			; (mov r8, r8)
    1194:	fffff844 	.word	0xfffff844

00001198 <SysTick_Handler>:
/* 1000Hz interval timer                                         */
/*--------------------------------------------------------------*/

void SysTick_Handler (void)
{
	Timer++;		/* Performance counter */
    1198:	4b02      	ldr	r3, [pc, #8]	; (11a4 <SysTick_Handler+0xc>)
    119a:	681a      	ldr	r2, [r3, #0]
    119c:	3201      	adds	r2, #1
    119e:	601a      	str	r2, [r3, #0]
#if DISP_USE_FILE_LOADER
	TmrFrm += 1000;	/* Increment frame time (disp.c) */
#endif
}
    11a0:	4770      	bx	lr
    11a2:	46c0      	nop			; (mov r8, r8)
    11a4:	1000036c 	.word	0x1000036c

000011a8 <terminal_init>:
{
#if _MODE_STANDALONE
    f_mount(0, &Fatfs);
#endif
    
}
    11a8:	4770      	bx	lr

000011aa <terminal>:

void terminal(void)
{
    11aa:	b5f0      	push	{r4, r5, r6, r7, lr}
    11ac:	b0a9      	sub	sp, #164	; 0xa4
	UINT ofs, s1, s2, cnt;
	RTC rtc;
	FATFS *fs;


    xputc('>');
    11ae:	203e      	movs	r0, #62	; 0x3e
    11b0:	f7ff f9c2 	bl	538 <xputc>
    xgets(Line, sizeof Line);
    11b4:	4cbd      	ldr	r4, [pc, #756]	; (14ac <terminal+0x302>)
    11b6:	2140      	movs	r1, #64	; 0x40
    11b8:	1c20      	adds	r0, r4, #0
    11ba:	f7ff fb4d 	bl	858 <xgets>
    ptr = Line;
    switch (*ptr++) {
    11be:	7823      	ldrb	r3, [r4, #0]
    11c0:	1c62      	adds	r2, r4, #1
    11c2:	9225      	str	r2, [sp, #148]	; 0x94
    11c4:	2b66      	cmp	r3, #102	; 0x66
    11c6:	d038      	beq.n	123a <terminal+0x90>
    11c8:	2b74      	cmp	r3, #116	; 0x74
    11ca:	d100      	bne.n	11ce <terminal+0x24>
    11cc:	e1fa      	b.n	15c4 <terminal+0x41a>
    11ce:	2b64      	cmp	r3, #100	; 0x64
    11d0:	d000      	beq.n	11d4 <terminal+0x2a>
    11d2:	e233      	b.n	163c <terminal+0x492>

    case 'd' :
        switch (*ptr++) {
    11d4:	7863      	ldrb	r3, [r4, #1]
    11d6:	3402      	adds	r4, #2
    11d8:	9425      	str	r4, [sp, #148]	; 0x94
    11da:	2b64      	cmp	r3, #100	; 0x64
    11dc:	d008      	beq.n	11f0 <terminal+0x46>
    11de:	2b69      	cmp	r3, #105	; 0x69
    11e0:	d000      	beq.n	11e4 <terminal+0x3a>
    11e2:	e22b      	b.n	163c <terminal+0x492>

        case 'i' :	/* di - Initialize disk */
            xprintf("rc=%d\n", disk_initialize(0));
    11e4:	2000      	movs	r0, #0
    11e6:	f7ff fdde 	bl	da6 <disk_initialize>
    11ea:	1c01      	adds	r1, r0, #0
    11ec:	48b0      	ldr	r0, [pc, #704]	; (14b0 <terminal+0x306>)
    11ee:	e010      	b.n	1212 <terminal+0x68>
            break;

        case 'd' :	/* dd <sector> - Dump secrtor */
            if (!xatoi(&ptr, &p2)) break;
    11f0:	a825      	add	r0, sp, #148	; 0x94
    11f2:	a926      	add	r1, sp, #152	; 0x98
    11f4:	f7ff fb64 	bl	8c0 <xatoi>
    11f8:	2800      	cmp	r0, #0
    11fa:	d100      	bne.n	11fe <terminal+0x54>
    11fc:	e21e      	b.n	163c <terminal+0x492>
            res = disk_read(0, Buff, p2, 1);
    11fe:	2000      	movs	r0, #0
    1200:	49ac      	ldr	r1, [pc, #688]	; (14b4 <terminal+0x30a>)
    1202:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1204:	2301      	movs	r3, #1
    1206:	f7ff fea7 	bl	f58 <disk_read>
            if (res) { xprintf("rc=%d\n", res); break; }
    120a:	1e04      	subs	r4, r0, #0
    120c:	d004      	beq.n	1218 <terminal+0x6e>
    120e:	48a8      	ldr	r0, [pc, #672]	; (14b0 <terminal+0x306>)
    1210:	1c21      	adds	r1, r4, #0
    1212:	f7ff faa9 	bl	768 <xprintf>
    1216:	e211      	b.n	163c <terminal+0x492>
            xprintf("Sector:%lu\n", p2);
    1218:	48a7      	ldr	r0, [pc, #668]	; (14b8 <terminal+0x30e>)
    121a:	9926      	ldr	r1, [sp, #152]	; 0x98
    121c:	f7ff faa4 	bl	768 <xprintf>
    f_mount(0, &Fatfs);
#endif
    
}

void terminal(void)
    1220:	48a4      	ldr	r0, [pc, #656]	; (14b4 <terminal+0x30a>)
            if (!xatoi(&ptr, &p2)) break;
            res = disk_read(0, Buff, p2, 1);
            if (res) { xprintf("rc=%d\n", res); break; }
            xprintf("Sector:%lu\n", p2);
            for (ptr2 = (char*)Buff, ofs = 0; ofs < 0x200; ptr2 += 16, ofs += 16)
                put_dump(ptr2, ofs, 16, DW_CHAR);
    1222:	1c21      	adds	r1, r4, #0
    f_mount(0, &Fatfs);
#endif
    
}

void terminal(void)
    1224:	1820      	adds	r0, r4, r0
            if (!xatoi(&ptr, &p2)) break;
            res = disk_read(0, Buff, p2, 1);
            if (res) { xprintf("rc=%d\n", res); break; }
            xprintf("Sector:%lu\n", p2);
            for (ptr2 = (char*)Buff, ofs = 0; ofs < 0x200; ptr2 += 16, ofs += 16)
                put_dump(ptr2, ofs, 16, DW_CHAR);
    1226:	2301      	movs	r3, #1
    1228:	2210      	movs	r2, #16
    122a:	f7ff facf 	bl	7cc <put_dump>
        case 'd' :	/* dd <sector> - Dump secrtor */
            if (!xatoi(&ptr, &p2)) break;
            res = disk_read(0, Buff, p2, 1);
            if (res) { xprintf("rc=%d\n", res); break; }
            xprintf("Sector:%lu\n", p2);
            for (ptr2 = (char*)Buff, ofs = 0; ofs < 0x200; ptr2 += 16, ofs += 16)
    122e:	2380      	movs	r3, #128	; 0x80
    1230:	3410      	adds	r4, #16
    1232:	009b      	lsls	r3, r3, #2
    1234:	429c      	cmp	r4, r3
    1236:	d1f3      	bne.n	1220 <terminal+0x76>
    1238:	e200      	b.n	163c <terminal+0x492>
            break;
        }
        break;

    case 'f' :
        switch (*ptr++) {
    123a:	7860      	ldrb	r0, [r4, #1]
    123c:	1ca3      	adds	r3, r4, #2
    123e:	3863      	subs	r0, #99	; 0x63
    1240:	9325      	str	r3, [sp, #148]	; 0x94
    1242:	2814      	cmp	r0, #20
    1244:	d900      	bls.n	1248 <terminal+0x9e>
    1246:	e1f9      	b.n	163c <terminal+0x492>
    1248:	f002 f8f6 	bl	3438 <__gnu_thumb1_case_uhi>
    124c:	00e90098 	.word	0x00e90098
    1250:	01f8009c 	.word	0x01f8009c
    1254:	01f801a9 	.word	0x01f801a9
    1258:	01f80015 	.word	0x01f80015
    125c:	001c01a0 	.word	0x001c01a0
    1260:	018001f8 	.word	0x018001f8
    1264:	01f80085 	.word	0x01f80085
    1268:	00b101b0 	.word	0x00b101b0
    126c:	01f801f8 	.word	0x01f801f8
    1270:	017a0197 	.word	0x017a0197
    1274:	0114      	.short	0x0114
        case 'i' :	/* fi - Initialize logical drive */
            put_rc(f_mount(0, &Fatfs));
    1276:	4991      	ldr	r1, [pc, #580]	; (14bc <terminal+0x312>)
    1278:	2000      	movs	r0, #0
    127a:	f001 f8e8 	bl	244e <f_mount>
    127e:	e19b      	b.n	15b8 <terminal+0x40e>
            break;

        case 'l' :	/* fl [<path>] - Directory listing */
            while (*ptr == ' ') ptr++;
    1280:	3101      	adds	r1, #1
    1282:	9125      	str	r1, [sp, #148]	; 0x94
    1284:	9925      	ldr	r1, [sp, #148]	; 0x94
    1286:	780b      	ldrb	r3, [r1, #0]
    1288:	2b20      	cmp	r3, #32
    128a:	d0f9      	beq.n	1280 <terminal+0xd6>
            res = f_opendir(&dir, ptr);
    128c:	a813      	add	r0, sp, #76	; 0x4c
    128e:	f001 fca0 	bl	2bd2 <f_opendir>
            if (res) { put_rc(res); break; }
    1292:	2800      	cmp	r0, #0
    1294:	d000      	beq.n	1298 <terminal+0xee>
    1296:	e18f      	b.n	15b8 <terminal+0x40e>
            p1 = s1 = s2 = 0;
    1298:	9024      	str	r0, [sp, #144]	; 0x90
    129a:	9027      	str	r0, [sp, #156]	; 0x9c
    129c:	1c05      	adds	r5, r0, #0
            for(;;) {
                res = f_readdir(&dir, &fno);
    129e:	ac1a      	add	r4, sp, #104	; 0x68
    12a0:	a813      	add	r0, sp, #76	; 0x4c
    12a2:	1c21      	adds	r1, r4, #0
    12a4:	f001 fcc7 	bl	2c36 <f_readdir>
                if ((res != FR_OK) || !fno.fname[0]) break;
    12a8:	2800      	cmp	r0, #0
    12aa:	d13d      	bne.n	1328 <terminal+0x17e>
    12ac:	7a63      	ldrb	r3, [r4, #9]
    12ae:	2b00      	cmp	r3, #0
    12b0:	d03a      	beq.n	1328 <terminal+0x17e>
                if (fno.fattrib & AM_DIR) {
    12b2:	7a20      	ldrb	r0, [r4, #8]
    12b4:	06c2      	lsls	r2, r0, #27
    12b6:	d504      	bpl.n	12c2 <terminal+0x118>
                    s2++;
    12b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
                } else {
                    s1++; p1 += fno.fsize;
                }
                xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s\n", 
    12ba:	2144      	movs	r1, #68	; 0x44
            p1 = s1 = s2 = 0;
            for(;;) {
                res = f_readdir(&dir, &fno);
                if ((res != FR_OK) || !fno.fname[0]) break;
                if (fno.fattrib & AM_DIR) {
                    s2++;
    12bc:	3301      	adds	r3, #1
    12be:	9324      	str	r3, [sp, #144]	; 0x90
    12c0:	e005      	b.n	12ce <terminal+0x124>
                } else {
                    s1++; p1 += fno.fsize;
    12c2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    12c4:	6823      	ldr	r3, [r4, #0]
    12c6:	3501      	adds	r5, #1
    12c8:	18d3      	adds	r3, r2, r3
    12ca:	9327      	str	r3, [sp, #156]	; 0x9c
                }
                xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s\n", 
    12cc:	212d      	movs	r1, #45	; 0x2d
    12ce:	222d      	movs	r2, #45	; 0x2d
    12d0:	07c3      	lsls	r3, r0, #31
    12d2:	d500      	bpl.n	12d6 <terminal+0x12c>
    12d4:	3225      	adds	r2, #37	; 0x25
    12d6:	232d      	movs	r3, #45	; 0x2d
    12d8:	0784      	lsls	r4, r0, #30
    12da:	d500      	bpl.n	12de <terminal+0x134>
    12dc:	331b      	adds	r3, #27
    12de:	272d      	movs	r7, #45	; 0x2d
    12e0:	0744      	lsls	r4, r0, #29
    12e2:	d500      	bpl.n	12e6 <terminal+0x13c>
    12e4:	3726      	adds	r7, #38	; 0x26
    12e6:	262d      	movs	r6, #45	; 0x2d
    12e8:	0684      	lsls	r4, r0, #26
    12ea:	d500      	bpl.n	12ee <terminal+0x144>
    12ec:	3614      	adds	r6, #20
                        (fno.fattrib & AM_DIR) ? 'D' : '-',
                        (fno.fattrib & AM_RDO) ? 'R' : '-',
                        (fno.fattrib & AM_HID) ? 'H' : '-',
                        (fno.fattrib & AM_SYS) ? 'S' : '-',
                        (fno.fattrib & AM_ARC) ? 'A' : '-',
                        (fno.fdate >> 9) + 1980, (fno.fdate >> 5) & 15, fno.fdate & 31,
    12ee:	ac1a      	add	r4, sp, #104	; 0x68
    12f0:	88a0      	ldrh	r0, [r4, #4]
                        (fno.ftime >> 11), (fno.ftime >> 5) & 63,
    12f2:	88e4      	ldrh	r4, [r4, #6]
                if (fno.fattrib & AM_DIR) {
                    s2++;
                } else {
                    s1++; p1 += fno.fsize;
                }
                xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s\n", 
    12f4:	9700      	str	r7, [sp, #0]
    12f6:	4f72      	ldr	r7, [pc, #456]	; (14c0 <terminal+0x316>)
    12f8:	9601      	str	r6, [sp, #4]
                        (fno.fattrib & AM_DIR) ? 'D' : '-',
                        (fno.fattrib & AM_RDO) ? 'R' : '-',
                        (fno.fattrib & AM_HID) ? 'H' : '-',
                        (fno.fattrib & AM_SYS) ? 'S' : '-',
                        (fno.fattrib & AM_ARC) ? 'A' : '-',
                        (fno.fdate >> 9) + 1980, (fno.fdate >> 5) & 15, fno.fdate & 31,
    12fa:	0a46      	lsrs	r6, r0, #9
                if (fno.fattrib & AM_DIR) {
                    s2++;
                } else {
                    s1++; p1 += fno.fsize;
                }
                xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s\n", 
    12fc:	19f6      	adds	r6, r6, r7
    12fe:	9602      	str	r6, [sp, #8]
    1300:	05c6      	lsls	r6, r0, #23
    1302:	0f36      	lsrs	r6, r6, #28
    1304:	9603      	str	r6, [sp, #12]
    1306:	261f      	movs	r6, #31
    1308:	4030      	ands	r0, r6
    130a:	9004      	str	r0, [sp, #16]
    130c:	0ae0      	lsrs	r0, r4, #11
    130e:	9005      	str	r0, [sp, #20]
    1310:	981a      	ldr	r0, [sp, #104]	; 0x68
    1312:	0564      	lsls	r4, r4, #21
    1314:	9007      	str	r0, [sp, #28]
    1316:	4668      	mov	r0, sp
    1318:	3071      	adds	r0, #113	; 0x71
    131a:	0ea4      	lsrs	r4, r4, #26
    131c:	9008      	str	r0, [sp, #32]
    131e:	4869      	ldr	r0, [pc, #420]	; (14c4 <terminal+0x31a>)
    1320:	9406      	str	r4, [sp, #24]
    1322:	f7ff fa21 	bl	768 <xprintf>
                        (fno.fattrib & AM_SYS) ? 'S' : '-',
                        (fno.fattrib & AM_ARC) ? 'A' : '-',
                        (fno.fdate >> 9) + 1980, (fno.fdate >> 5) & 15, fno.fdate & 31,
                        (fno.ftime >> 11), (fno.ftime >> 5) & 63,
                        fno.fsize, &(fno.fname[0]));
            }
    1326:	e7ba      	b.n	129e <terminal+0xf4>
            xprintf("%4u File(s),%10lu bytes\n%4u Dir(s)", s1, p1, s2);
    1328:	4867      	ldr	r0, [pc, #412]	; (14c8 <terminal+0x31e>)
    132a:	1c29      	adds	r1, r5, #0
    132c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    132e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    1330:	f7ff fa1a 	bl	768 <xprintf>
            if (f_getfree(ptr, (DWORD*)&p1, &fs) == FR_OK)
    1334:	9825      	ldr	r0, [sp, #148]	; 0x94
    1336:	a927      	add	r1, sp, #156	; 0x9c
    1338:	aa22      	add	r2, sp, #136	; 0x88
    133a:	f001 fcc5 	bl	2cc8 <f_getfree>
    133e:	2800      	cmp	r0, #0
    1340:	d000      	beq.n	1344 <terminal+0x19a>
    1342:	e17b      	b.n	163c <terminal+0x492>
                xprintf(", %10luK bytes free\n", p1 * fs->csize / 2);
    1344:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1346:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1348:	789b      	ldrb	r3, [r3, #2]
    134a:	4860      	ldr	r0, [pc, #384]	; (14cc <terminal+0x322>)
    134c:	4359      	muls	r1, r3
    134e:	0fcb      	lsrs	r3, r1, #31
    1350:	1859      	adds	r1, r3, r1
    1352:	1049      	asrs	r1, r1, #1
    1354:	e75d      	b.n	1212 <terminal+0x68>
            break;

        case 'o' :	/* fo <mode> <file> - Open a file */
            if (!xatoi(&ptr, &p1)) break;
    1356:	a825      	add	r0, sp, #148	; 0x94
    1358:	a927      	add	r1, sp, #156	; 0x9c
    135a:	f7ff fab1 	bl	8c0 <xatoi>
    135e:	2800      	cmp	r0, #0
    1360:	d102      	bne.n	1368 <terminal+0x1be>
    1362:	e16b      	b.n	163c <terminal+0x492>
            while (*ptr == ' ') ptr++;
    1364:	3101      	adds	r1, #1
    1366:	9125      	str	r1, [sp, #148]	; 0x94
    1368:	9925      	ldr	r1, [sp, #148]	; 0x94
    136a:	780b      	ldrb	r3, [r1, #0]
    136c:	2b20      	cmp	r3, #32
    136e:	d0f9      	beq.n	1364 <terminal+0x1ba>
            res = f_open(&fil, ptr, (BYTE)p1);
    1370:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    1372:	a80a      	add	r0, sp, #40	; 0x28
    1374:	b2d2      	uxtb	r2, r2
    1376:	f001 f87d 	bl	2474 <f_open>
    137a:	e11d      	b.n	15b8 <terminal+0x40e>
            put_rc(res);
            break;

        case 'c' :	/* fc - Close a file */
            res = f_close(&fil);
    137c:	a80a      	add	r0, sp, #40	; 0x28
    137e:	f001 face 	bl	291e <f_close>
    1382:	e119      	b.n	15b8 <terminal+0x40e>
            put_rc(res);
            break;

        case 'e' :	/* fe - Seek file pointer */
            if (!xatoi(&ptr, &p1)) break;
    1384:	a825      	add	r0, sp, #148	; 0x94
    1386:	a927      	add	r1, sp, #156	; 0x9c
    1388:	f7ff fa9a 	bl	8c0 <xatoi>
    138c:	2800      	cmp	r0, #0
    138e:	d100      	bne.n	1392 <terminal+0x1e8>
    1390:	e154      	b.n	163c <terminal+0x492>
            res = f_lseek(&fil, p1);
    1392:	a80a      	add	r0, sp, #40	; 0x28
    1394:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1396:	f001 fb89 	bl	2aac <f_lseek>
    139a:	1c04      	adds	r4, r0, #0
            put_rc(res);
    139c:	f7ff fec8 	bl	1130 <put_rc>
            if (res == FR_OK)
    13a0:	2c00      	cmp	r4, #0
    13a2:	d000      	beq.n	13a6 <terminal+0x1fc>
    13a4:	e14a      	b.n	163c <terminal+0x492>
                xprintf("fptr = %lu(0x%lX)\n", f_tell(&fil), f_tell(&fil));
    13a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    13a8:	4849      	ldr	r0, [pc, #292]	; (14d0 <terminal+0x326>)
    13aa:	1c11      	adds	r1, r2, #0
    13ac:	e0c5      	b.n	153a <terminal+0x390>
            break;

        case 'r' :	/* fr <len> - read file */
            if (!xatoi(&ptr, &p1)) break;
    13ae:	a825      	add	r0, sp, #148	; 0x94
    13b0:	a927      	add	r1, sp, #156	; 0x9c
    13b2:	f7ff fa85 	bl	8c0 <xatoi>
    13b6:	2800      	cmp	r0, #0
    13b8:	d100      	bne.n	13bc <terminal+0x212>
    13ba:	e13f      	b.n	163c <terminal+0x492>
            p2 = 0;
            Timer = 0;
    13bc:	4a45      	ldr	r2, [pc, #276]	; (14d4 <terminal+0x32a>)
                xprintf("fptr = %lu(0x%lX)\n", f_tell(&fil), f_tell(&fil));
            break;

        case 'r' :	/* fr <len> - read file */
            if (!xatoi(&ptr, &p1)) break;
            p2 = 0;
    13be:	2300      	movs	r3, #0
    13c0:	9326      	str	r3, [sp, #152]	; 0x98
            Timer = 0;
    13c2:	6013      	str	r3, [r2, #0]
            while (p1) {
    13c4:	e01e      	b.n	1404 <terminal+0x25a>
                if ((UINT)p1 >= sizeof Buff)	{ cnt = sizeof Buff; p1 -= sizeof Buff; }
    13c6:	4a44      	ldr	r2, [pc, #272]	; (14d8 <terminal+0x32e>)
    13c8:	4293      	cmp	r3, r2
    13ca:	d905      	bls.n	13d8 <terminal+0x22e>
    13cc:	2280      	movs	r2, #128	; 0x80
    13ce:	0152      	lsls	r2, r2, #5
    13d0:	9223      	str	r2, [sp, #140]	; 0x8c
    13d2:	4a42      	ldr	r2, [pc, #264]	; (14dc <terminal+0x332>)
    13d4:	189b      	adds	r3, r3, r2
    13d6:	e002      	b.n	13de <terminal+0x234>
                else 			{ cnt = (WORD)p1; p1 = 0; }
    13d8:	b29b      	uxth	r3, r3
    13da:	9323      	str	r3, [sp, #140]	; 0x8c
    13dc:	2300      	movs	r3, #0
    13de:	9327      	str	r3, [sp, #156]	; 0x9c
                res = f_read(&fil, Buff, cnt, &s2);
    13e0:	a80a      	add	r0, sp, #40	; 0x28
    13e2:	4934      	ldr	r1, [pc, #208]	; (14b4 <terminal+0x30a>)
    13e4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    13e6:	ab24      	add	r3, sp, #144	; 0x90
    13e8:	f001 f8e1 	bl	25ae <f_read>
                if (res != FR_OK) { put_rc(res); break; }
    13ec:	2800      	cmp	r0, #0
    13ee:	d002      	beq.n	13f6 <terminal+0x24c>
    13f0:	f7ff fe9e 	bl	1130 <put_rc>
    13f4:	e009      	b.n	140a <terminal+0x260>
                p2 += s2;
    13f6:	9a26      	ldr	r2, [sp, #152]	; 0x98
    13f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
    13fa:	18d2      	adds	r2, r2, r3
    13fc:	9226      	str	r2, [sp, #152]	; 0x98
                if (cnt != s2) break;
    13fe:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    1400:	429a      	cmp	r2, r3
    1402:	d102      	bne.n	140a <terminal+0x260>

        case 'r' :	/* fr <len> - read file */
            if (!xatoi(&ptr, &p1)) break;
            p2 = 0;
            Timer = 0;
            while (p1) {
    1404:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    1406:	2b00      	cmp	r3, #0
    1408:	d1dd      	bne.n	13c6 <terminal+0x21c>
                res = f_read(&fil, Buff, cnt, &s2);
                if (res != FR_OK) { put_rc(res); break; }
                p2 += s2;
                if (cnt != s2) break;
            }
            s2 = Timer;
    140a:	4b32      	ldr	r3, [pc, #200]	; (14d4 <terminal+0x32a>)
            xprintf("%lu bytes read with %lu kB/sec.\n", p2, p2 / s2);
    140c:	9c26      	ldr	r4, [sp, #152]	; 0x98
                res = f_read(&fil, Buff, cnt, &s2);
                if (res != FR_OK) { put_rc(res); break; }
                p2 += s2;
                if (cnt != s2) break;
            }
            s2 = Timer;
    140e:	6819      	ldr	r1, [r3, #0]
            xprintf("%lu bytes read with %lu kB/sec.\n", p2, p2 / s2);
    1410:	1c20      	adds	r0, r4, #0
                res = f_read(&fil, Buff, cnt, &s2);
                if (res != FR_OK) { put_rc(res); break; }
                p2 += s2;
                if (cnt != s2) break;
            }
            s2 = Timer;
    1412:	9124      	str	r1, [sp, #144]	; 0x90
            xprintf("%lu bytes read with %lu kB/sec.\n", p2, p2 / s2);
    1414:	f002 f81a 	bl	344c <__aeabi_uidiv>
    1418:	1c02      	adds	r2, r0, #0
    141a:	4831      	ldr	r0, [pc, #196]	; (14e0 <terminal+0x336>)
    141c:	e08c      	b.n	1538 <terminal+0x38e>
            break;

        case 'd' :	/* fd <len> - read and dump file from current fp */
            if (!xatoi(&ptr, &p1)) break;
    141e:	a825      	add	r0, sp, #148	; 0x94
    1420:	a927      	add	r1, sp, #156	; 0x9c
    1422:	f7ff fa4d 	bl	8c0 <xatoi>
    1426:	2800      	cmp	r0, #0
    1428:	d100      	bne.n	142c <terminal+0x282>
    142a:	e107      	b.n	163c <terminal+0x492>
            ofs = f_tell(&fil);
    142c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
            while (p1) {
    142e:	e01d      	b.n	146c <terminal+0x2c2>
                if (p1 >= 16)	{ cnt = 16; p1 -= 16; }
    1430:	2b0f      	cmp	r3, #15
    1432:	dd03      	ble.n	143c <terminal+0x292>
    1434:	2210      	movs	r2, #16
    1436:	9223      	str	r2, [sp, #140]	; 0x8c
    1438:	3b10      	subs	r3, #16
    143a:	e002      	b.n	1442 <terminal+0x298>
                else 			{ cnt = (WORD)p1; p1 = 0; }
    143c:	b29b      	uxth	r3, r3
    143e:	9323      	str	r3, [sp, #140]	; 0x8c
    1440:	2300      	movs	r3, #0
                res = f_read(&fil, Buff, cnt, &cnt);
    1442:	4d1c      	ldr	r5, [pc, #112]	; (14b4 <terminal+0x30a>)
        case 'd' :	/* fd <len> - read and dump file from current fp */
            if (!xatoi(&ptr, &p1)) break;
            ofs = f_tell(&fil);
            while (p1) {
                if (p1 >= 16)	{ cnt = 16; p1 -= 16; }
                else 			{ cnt = (WORD)p1; p1 = 0; }
    1444:	9327      	str	r3, [sp, #156]	; 0x9c
                res = f_read(&fil, Buff, cnt, &cnt);
    1446:	a80a      	add	r0, sp, #40	; 0x28
    1448:	1c29      	adds	r1, r5, #0
    144a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    144c:	ab23      	add	r3, sp, #140	; 0x8c
    144e:	f001 f8ae 	bl	25ae <f_read>
                if (res != FR_OK) { put_rc(res); break; }
    1452:	2800      	cmp	r0, #0
    1454:	d000      	beq.n	1458 <terminal+0x2ae>
    1456:	e0af      	b.n	15b8 <terminal+0x40e>
                if (!cnt) break;
    1458:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    145a:	2a00      	cmp	r2, #0
    145c:	d100      	bne.n	1460 <terminal+0x2b6>
    145e:	e0ed      	b.n	163c <terminal+0x492>
                put_dump(Buff, ofs, cnt, DW_CHAR);
    1460:	1c21      	adds	r1, r4, #0
    1462:	1c28      	adds	r0, r5, #0
    1464:	2301      	movs	r3, #1
    1466:	f7ff f9b1 	bl	7cc <put_dump>
                ofs += 16;
    146a:	3410      	adds	r4, #16
            break;

        case 'd' :	/* fd <len> - read and dump file from current fp */
            if (!xatoi(&ptr, &p1)) break;
            ofs = f_tell(&fil);
            while (p1) {
    146c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    146e:	2b00      	cmp	r3, #0
    1470:	d1de      	bne.n	1430 <terminal+0x286>
    1472:	e0e3      	b.n	163c <terminal+0x492>
                ofs += 16;
            }
            break;

        case 'w' :	/* fw <len> <val> - write file */
            if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
    1474:	a825      	add	r0, sp, #148	; 0x94
    1476:	a927      	add	r1, sp, #156	; 0x9c
    1478:	f7ff fa22 	bl	8c0 <xatoi>
    147c:	2800      	cmp	r0, #0
    147e:	d100      	bne.n	1482 <terminal+0x2d8>
    1480:	e0dc      	b.n	163c <terminal+0x492>
    1482:	a825      	add	r0, sp, #148	; 0x94
    1484:	a926      	add	r1, sp, #152	; 0x98
    1486:	f7ff fa1b 	bl	8c0 <xatoi>
    148a:	2800      	cmp	r0, #0
    148c:	d100      	bne.n	1490 <terminal+0x2e6>
    148e:	e0d5      	b.n	163c <terminal+0x492>
            for (cnt = 0; cnt < sizeof Buff; Buff[cnt++] = 0) ;
    1490:	2300      	movs	r3, #0
    1492:	4908      	ldr	r1, [pc, #32]	; (14b4 <terminal+0x30a>)
    1494:	4c10      	ldr	r4, [pc, #64]	; (14d8 <terminal+0x32e>)
    1496:	1859      	adds	r1, r3, r1
    1498:	2200      	movs	r2, #0
    149a:	3301      	adds	r3, #1
    149c:	700a      	strb	r2, [r1, #0]
    149e:	42a3      	cmp	r3, r4
    14a0:	d9f7      	bls.n	1492 <terminal+0x2e8>
    14a2:	9323      	str	r3, [sp, #140]	; 0x8c
            p2 = 0;
            Timer = 0;
    14a4:	4b0b      	ldr	r3, [pc, #44]	; (14d4 <terminal+0x32a>)
            break;

        case 'w' :	/* fw <len> <val> - write file */
            if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
            for (cnt = 0; cnt < sizeof Buff; Buff[cnt++] = 0) ;
            p2 = 0;
    14a6:	9226      	str	r2, [sp, #152]	; 0x98
            Timer = 0;
    14a8:	601a      	str	r2, [r3, #0]
            while (p1) {
    14aa:	e039      	b.n	1520 <terminal+0x376>
    14ac:	10001370 	.word	0x10001370
    14b0:	000036c0 	.word	0x000036c0
    14b4:	10000370 	.word	0x10000370
    14b8:	000036c7 	.word	0x000036c7
    14bc:	10000138 	.word	0x10000138
    14c0:	000007bc 	.word	0x000007bc
    14c4:	000036d3 	.word	0x000036d3
    14c8:	000036ff 	.word	0x000036ff
    14cc:	00003722 	.word	0x00003722
    14d0:	00003737 	.word	0x00003737
    14d4:	1000036c 	.word	0x1000036c
    14d8:	00000fff 	.word	0x00000fff
    14dc:	fffff000 	.word	0xfffff000
    14e0:	0000374a 	.word	0x0000374a
                if ((UINT)p1 >= sizeof Buff) { cnt = sizeof Buff; p1 -= sizeof Buff; }
    14e4:	42a3      	cmp	r3, r4
    14e6:	d905      	bls.n	14f4 <terminal+0x34a>
    14e8:	2280      	movs	r2, #128	; 0x80
    14ea:	4f55      	ldr	r7, [pc, #340]	; (1640 <terminal+0x496>)
    14ec:	0152      	lsls	r2, r2, #5
    14ee:	9223      	str	r2, [sp, #140]	; 0x8c
    14f0:	19db      	adds	r3, r3, r7
    14f2:	e002      	b.n	14fa <terminal+0x350>
                else { cnt = (WORD)p1; p1 = 0; }
    14f4:	b29b      	uxth	r3, r3
    14f6:	9323      	str	r3, [sp, #140]	; 0x8c
    14f8:	2300      	movs	r3, #0
    14fa:	9327      	str	r3, [sp, #156]	; 0x9c
                res = f_write(&fil, Buff, cnt, &s2);
    14fc:	a80a      	add	r0, sp, #40	; 0x28
    14fe:	4951      	ldr	r1, [pc, #324]	; (1644 <terminal+0x49a>)
    1500:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    1502:	ab24      	add	r3, sp, #144	; 0x90
    1504:	f001 f8fb 	bl	26fe <f_write>
                if (res != FR_OK) { put_rc(res); break; }
    1508:	2800      	cmp	r0, #0
    150a:	d002      	beq.n	1512 <terminal+0x368>
    150c:	f7ff fe10 	bl	1130 <put_rc>
    1510:	e009      	b.n	1526 <terminal+0x37c>
                p2 += s2;
    1512:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1514:	9b24      	ldr	r3, [sp, #144]	; 0x90
    1516:	18d2      	adds	r2, r2, r3
    1518:	9226      	str	r2, [sp, #152]	; 0x98
                if (cnt != s2) break;
    151a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    151c:	429a      	cmp	r2, r3
    151e:	d102      	bne.n	1526 <terminal+0x37c>
        case 'w' :	/* fw <len> <val> - write file */
            if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
            for (cnt = 0; cnt < sizeof Buff; Buff[cnt++] = 0) ;
            p2 = 0;
            Timer = 0;
            while (p1) {
    1520:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    1522:	2b00      	cmp	r3, #0
    1524:	d1de      	bne.n	14e4 <terminal+0x33a>
                res = f_write(&fil, Buff, cnt, &s2);
                if (res != FR_OK) { put_rc(res); break; }
                p2 += s2;
                if (cnt != s2) break;
            }
            s2 = Timer;
    1526:	4b48      	ldr	r3, [pc, #288]	; (1648 <terminal+0x49e>)
            xprintf("%lu bytes written with %lu kB/sec.\n", p2, p2 / s2);
    1528:	9c26      	ldr	r4, [sp, #152]	; 0x98
                res = f_write(&fil, Buff, cnt, &s2);
                if (res != FR_OK) { put_rc(res); break; }
                p2 += s2;
                if (cnt != s2) break;
            }
            s2 = Timer;
    152a:	6819      	ldr	r1, [r3, #0]
            xprintf("%lu bytes written with %lu kB/sec.\n", p2, p2 / s2);
    152c:	1c20      	adds	r0, r4, #0
                res = f_write(&fil, Buff, cnt, &s2);
                if (res != FR_OK) { put_rc(res); break; }
                p2 += s2;
                if (cnt != s2) break;
            }
            s2 = Timer;
    152e:	9124      	str	r1, [sp, #144]	; 0x90
            xprintf("%lu bytes written with %lu kB/sec.\n", p2, p2 / s2);
    1530:	f001 ff8c 	bl	344c <__aeabi_uidiv>
    1534:	1c02      	adds	r2, r0, #0
    1536:	4845      	ldr	r0, [pc, #276]	; (164c <terminal+0x4a2>)
    1538:	1c21      	adds	r1, r4, #0
    153a:	f7ff f915 	bl	768 <xprintf>
            break;
    153e:	e07d      	b.n	163c <terminal+0x492>

        case 'v' :	/* fv - Truncate file */
            put_rc(f_truncate(&fil));
    1540:	a80a      	add	r0, sp, #40	; 0x28
    1542:	f001 fc38 	bl	2db6 <f_truncate>
    1546:	e037      	b.n	15b8 <terminal+0x40e>
            break;

        case 'n' :	/* fn <old_name> <new_name> - Change file/dir name */
            while (*ptr == ' ') ptr++;
    1548:	3001      	adds	r0, #1
    154a:	9025      	str	r0, [sp, #148]	; 0x94
    154c:	9825      	ldr	r0, [sp, #148]	; 0x94
    154e:	7803      	ldrb	r3, [r0, #0]
    1550:	2b20      	cmp	r3, #32
    1552:	d0f9      	beq.n	1548 <terminal+0x39e>
            ptr2 = strchr(ptr, ' ');
    1554:	2120      	movs	r1, #32
    1556:	f001 fef7 	bl	3348 <strchr>
            if (!ptr2) break;
    155a:	2800      	cmp	r0, #0
    155c:	d06e      	beq.n	163c <terminal+0x492>
            *ptr2++ = 0;
    155e:	2300      	movs	r3, #0
    1560:	7003      	strb	r3, [r0, #0]
    1562:	1c41      	adds	r1, r0, #1
            while (*ptr2 == ' ') ptr2++;
    1564:	e000      	b.n	1568 <terminal+0x3be>
    1566:	3101      	adds	r1, #1
    1568:	780b      	ldrb	r3, [r1, #0]
    156a:	2b20      	cmp	r3, #32
    156c:	d0fb      	beq.n	1566 <terminal+0x3bc>
            put_rc(f_rename(ptr, ptr2));
    156e:	9825      	ldr	r0, [sp, #148]	; 0x94
    1570:	f001 fdf6 	bl	3160 <f_rename>
    1574:	e020      	b.n	15b8 <terminal+0x40e>
            break;

        case 'u' :	/* fu <name> - Unlink a file or dir */
            while (*ptr == ' ') ptr++;
    1576:	3001      	adds	r0, #1
    1578:	9025      	str	r0, [sp, #148]	; 0x94
    157a:	9825      	ldr	r0, [sp, #148]	; 0x94
    157c:	7803      	ldrb	r3, [r0, #0]
    157e:	2b20      	cmp	r3, #32
    1580:	d0f9      	beq.n	1576 <terminal+0x3cc>
            put_rc(f_unlink(ptr));
    1582:	f001 fc67 	bl	2e54 <f_unlink>
    1586:	e017      	b.n	15b8 <terminal+0x40e>
            break;

        case 'k' :	/* fk <name> - Create a directory */
            while (*ptr == ' ') ptr++;
    1588:	3001      	adds	r0, #1
    158a:	9025      	str	r0, [sp, #148]	; 0x94
    158c:	9825      	ldr	r0, [sp, #148]	; 0x94
    158e:	7803      	ldrb	r3, [r0, #0]
    1590:	2b20      	cmp	r3, #32
    1592:	d0f9      	beq.n	1588 <terminal+0x3de>
            put_rc(f_mkdir(ptr));
    1594:	f001 fcbd 	bl	2f12 <f_mkdir>
    1598:	e00e      	b.n	15b8 <terminal+0x40e>
            break;

        case 'g' :	/* fg <path> - Change current directory */
            while (*ptr == ' ') ptr++;
    159a:	3001      	adds	r0, #1
    159c:	9025      	str	r0, [sp, #148]	; 0x94
    159e:	9825      	ldr	r0, [sp, #148]	; 0x94
    15a0:	7803      	ldrb	r3, [r0, #0]
    15a2:	2b20      	cmp	r3, #32
    15a4:	d0f9      	beq.n	159a <terminal+0x3f0>
            put_rc(f_chdir(ptr));
    15a6:	f001 f9cd 	bl	2944 <f_chdir>
    15aa:	e005      	b.n	15b8 <terminal+0x40e>
            break;

        case 'q' :	/* fq - Show current dir path */
            res = f_getcwd(Line, sizeof Line);
    15ac:	1c20      	adds	r0, r4, #0
    15ae:	2140      	movs	r1, #64	; 0x40
    15b0:	f001 f9f2 	bl	2998 <f_getcwd>
            if (res)
    15b4:	2800      	cmp	r0, #0
    15b6:	d002      	beq.n	15be <terminal+0x414>
                put_rc(res);
    15b8:	f7ff fdba 	bl	1130 <put_rc>
    15bc:	e03e      	b.n	163c <terminal+0x492>
            else
                xprintf("%s\n", Line);
    15be:	4824      	ldr	r0, [pc, #144]	; (1650 <terminal+0x4a6>)
    15c0:	1c21      	adds	r1, r4, #0
    15c2:	e626      	b.n	1212 <terminal+0x68>
            break;
        }
        break;

    case 't' :	/* t [<year> <mon> <mday> <hour> <min> <sec>] */
        if (xatoi(&ptr, &p1)) {
    15c4:	a825      	add	r0, sp, #148	; 0x94
    15c6:	a927      	add	r1, sp, #156	; 0x9c
    15c8:	f7ff f97a 	bl	8c0 <xatoi>
    15cc:	2800      	cmp	r0, #0
    15ce:	d025      	beq.n	161c <terminal+0x472>
            rtc.year = (WORD)p1;
    15d0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    15d2:	ac20      	add	r4, sp, #128	; 0x80
    15d4:	8023      	strh	r3, [r4, #0]
            xatoi(&ptr, &p1); rtc.month = (BYTE)p1;
    15d6:	a927      	add	r1, sp, #156	; 0x9c
    15d8:	a825      	add	r0, sp, #148	; 0x94
    15da:	f7ff f971 	bl	8c0 <xatoi>
    15de:	9b27      	ldr	r3, [sp, #156]	; 0x9c
            xatoi(&ptr, &p1); rtc.mday = (BYTE)p1;
    15e0:	a927      	add	r1, sp, #156	; 0x9c
        break;

    case 't' :	/* t [<year> <mon> <mday> <hour> <min> <sec>] */
        if (xatoi(&ptr, &p1)) {
            rtc.year = (WORD)p1;
            xatoi(&ptr, &p1); rtc.month = (BYTE)p1;
    15e2:	70a3      	strb	r3, [r4, #2]
            xatoi(&ptr, &p1); rtc.mday = (BYTE)p1;
    15e4:	a825      	add	r0, sp, #148	; 0x94
    15e6:	f7ff f96b 	bl	8c0 <xatoi>
    15ea:	9b27      	ldr	r3, [sp, #156]	; 0x9c
            xatoi(&ptr, &p1); rtc.hour = (BYTE)p1;
    15ec:	a927      	add	r1, sp, #156	; 0x9c

    case 't' :	/* t [<year> <mon> <mday> <hour> <min> <sec>] */
        if (xatoi(&ptr, &p1)) {
            rtc.year = (WORD)p1;
            xatoi(&ptr, &p1); rtc.month = (BYTE)p1;
            xatoi(&ptr, &p1); rtc.mday = (BYTE)p1;
    15ee:	70e3      	strb	r3, [r4, #3]
            xatoi(&ptr, &p1); rtc.hour = (BYTE)p1;
    15f0:	a825      	add	r0, sp, #148	; 0x94
    15f2:	f7ff f965 	bl	8c0 <xatoi>
    15f6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
            xatoi(&ptr, &p1); rtc.min = (BYTE)p1;
    15f8:	a927      	add	r1, sp, #156	; 0x9c
    case 't' :	/* t [<year> <mon> <mday> <hour> <min> <sec>] */
        if (xatoi(&ptr, &p1)) {
            rtc.year = (WORD)p1;
            xatoi(&ptr, &p1); rtc.month = (BYTE)p1;
            xatoi(&ptr, &p1); rtc.mday = (BYTE)p1;
            xatoi(&ptr, &p1); rtc.hour = (BYTE)p1;
    15fa:	7163      	strb	r3, [r4, #5]
            xatoi(&ptr, &p1); rtc.min = (BYTE)p1;
    15fc:	a825      	add	r0, sp, #148	; 0x94
    15fe:	f7ff f95f 	bl	8c0 <xatoi>
    1602:	9b27      	ldr	r3, [sp, #156]	; 0x9c
            if (!xatoi(&ptr, &p1)) break;
    1604:	a825      	add	r0, sp, #148	; 0x94
        if (xatoi(&ptr, &p1)) {
            rtc.year = (WORD)p1;
            xatoi(&ptr, &p1); rtc.month = (BYTE)p1;
            xatoi(&ptr, &p1); rtc.mday = (BYTE)p1;
            xatoi(&ptr, &p1); rtc.hour = (BYTE)p1;
            xatoi(&ptr, &p1); rtc.min = (BYTE)p1;
    1606:	71a3      	strb	r3, [r4, #6]
            if (!xatoi(&ptr, &p1)) break;
    1608:	a927      	add	r1, sp, #156	; 0x9c
    160a:	f7ff f959 	bl	8c0 <xatoi>
    160e:	2800      	cmp	r0, #0
    1610:	d014      	beq.n	163c <terminal+0x492>
            rtc.sec = (BYTE)p1;
    1612:	9b27      	ldr	r3, [sp, #156]	; 0x9c
            rtc_settime(&rtc);
    1614:	1c20      	adds	r0, r4, #0
            xatoi(&ptr, &p1); rtc.month = (BYTE)p1;
            xatoi(&ptr, &p1); rtc.mday = (BYTE)p1;
            xatoi(&ptr, &p1); rtc.hour = (BYTE)p1;
            xatoi(&ptr, &p1); rtc.min = (BYTE)p1;
            if (!xatoi(&ptr, &p1)) break;
            rtc.sec = (BYTE)p1;
    1616:	71e3      	strb	r3, [r4, #7]
            rtc_settime(&rtc);
    1618:	f7ff fa14 	bl	a44 <rtc_settime>
        }
        rtc_gettime(&rtc);
    161c:	ac20      	add	r4, sp, #128	; 0x80
    161e:	1c20      	adds	r0, r4, #0
    1620:	f7ff f9a2 	bl	968 <rtc_gettime>
        xprintf("%u/%u/%u %02u:%02u:%02u\n", rtc.year, rtc.month, rtc.mday, rtc.hour, rtc.min, rtc.sec);
    1624:	7960      	ldrb	r0, [r4, #5]
    1626:	8821      	ldrh	r1, [r4, #0]
    1628:	78a2      	ldrb	r2, [r4, #2]
    162a:	78e3      	ldrb	r3, [r4, #3]
    162c:	9000      	str	r0, [sp, #0]
    162e:	79a0      	ldrb	r0, [r4, #6]
    1630:	9001      	str	r0, [sp, #4]
    1632:	79e0      	ldrb	r0, [r4, #7]
    1634:	9002      	str	r0, [sp, #8]
    1636:	4807      	ldr	r0, [pc, #28]	; (1654 <terminal+0x4aa>)
    1638:	f7ff f896 	bl	768 <xprintf>
        break;
        
    }
    
    
}
    163c:	b029      	add	sp, #164	; 0xa4
    163e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1640:	fffff000 	.word	0xfffff000
    1644:	10000370 	.word	0x10000370
    1648:	1000036c 	.word	0x1000036c
    164c:	0000376b 	.word	0x0000376b
    1650:	000036fb 	.word	0x000036fb
    1654:	0000378f 	.word	0x0000378f

00001658 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    1658:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
    165a:	2300      	movs	r3, #0
    165c:	e002      	b.n	1664 <mem_cpy+0xc>
		*d++ = *s++;
    165e:	5ccc      	ldrb	r4, [r1, r3]
    1660:	54c4      	strb	r4, [r0, r3]
    1662:	3301      	adds	r3, #1
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
    1664:	3a01      	subs	r2, #1
    1666:	d2fa      	bcs.n	165e <mem_cpy+0x6>
		*d++ = *s++;
}
    1668:	bd10      	pop	{r4, pc}

0000166a <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
    166a:	b500      	push	{lr}
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    166c:	e001      	b.n	1672 <mem_set+0x8>
		*d++ = (BYTE)val;
    166e:	7001      	strb	r1, [r0, #0]
    1670:	3001      	adds	r0, #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    1672:	3a01      	subs	r2, #1
    1674:	d2fb      	bcs.n	166e <mem_set+0x4>
		*d++ = (BYTE)val;
}
    1676:	bd00      	pop	{pc}

00001678 <st_clust>:
void st_clust (
	BYTE *dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
    1678:	0a0b      	lsrs	r3, r1, #8
    167a:	7681      	strb	r1, [r0, #26]
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
    167c:	0c09      	lsrs	r1, r1, #16
    167e:	7501      	strb	r1, [r0, #20]
    1680:	0a09      	lsrs	r1, r1, #8
void st_clust (
	BYTE *dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
    1682:	76c3      	strb	r3, [r0, #27]
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
    1684:	7541      	strb	r1, [r0, #21]
}
    1686:	4770      	bx	lr

00001688 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
    1688:	b510      	push	{r4, lr}
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
	if (dj->sect) {
    168a:	6903      	ldr	r3, [r0, #16]
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
    168c:	1c0a      	adds	r2, r1, #0
    168e:	3209      	adds	r2, #9
	if (dj->sect) {
    1690:	2b00      	cmp	r3, #0
    1692:	d033      	beq.n	16fc <get_fileinfo+0x74>
		dir = dj->dir;
    1694:	6943      	ldr	r3, [r0, #20]
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    1696:	2000      	movs	r0, #0
			c = dir[i];
    1698:	5c1c      	ldrb	r4, [r3, r0]
			if (c == ' ') break;
    169a:	2c20      	cmp	r4, #32
    169c:	d007      	beq.n	16ae <get_fileinfo+0x26>
			if (c == NDDE) c = (TCHAR)DDE;
    169e:	2c05      	cmp	r4, #5
    16a0:	d100      	bne.n	16a4 <get_fileinfo+0x1c>
    16a2:	34e0      	adds	r4, #224	; 0xe0

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    16a4:	3001      	adds	r0, #1
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
    16a6:	7014      	strb	r4, [r2, #0]
    16a8:	3201      	adds	r2, #1

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    16aa:	2808      	cmp	r0, #8
    16ac:	d1f4      	bne.n	1698 <get_fileinfo+0x10>
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    16ae:	7a18      	ldrb	r0, [r3, #8]
    16b0:	2820      	cmp	r0, #32
    16b2:	d00b      	beq.n	16cc <get_fileinfo+0x44>
			*p++ = '.';
    16b4:	202e      	movs	r0, #46	; 0x2e
    16b6:	7010      	strb	r0, [r2, #0]
    16b8:	3201      	adds	r2, #1
			for (i = 8; i < 11; i++) {
    16ba:	3826      	subs	r0, #38	; 0x26
				c = dir[i];
    16bc:	5c1c      	ldrb	r4, [r3, r0]
				if (c == ' ') break;
    16be:	2c20      	cmp	r4, #32
    16c0:	d004      	beq.n	16cc <get_fileinfo+0x44>
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    16c2:	3001      	adds	r0, #1
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
    16c4:	7014      	strb	r4, [r2, #0]
    16c6:	3201      	adds	r2, #1
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    16c8:	280b      	cmp	r0, #11
    16ca:	d1f7      	bne.n	16bc <get_fileinfo+0x34>
				if (!c) c = '?';
#endif
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    16cc:	7ad8      	ldrb	r0, [r3, #11]
    16ce:	7208      	strb	r0, [r1, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    16d0:	7fdc      	ldrb	r4, [r3, #31]
    16d2:	7f98      	ldrb	r0, [r3, #30]
    16d4:	0624      	lsls	r4, r4, #24
    16d6:	0400      	lsls	r0, r0, #16
    16d8:	4320      	orrs	r0, r4
    16da:	7f1c      	ldrb	r4, [r3, #28]
    16dc:	4320      	orrs	r0, r4
    16de:	7f5c      	ldrb	r4, [r3, #29]
    16e0:	0224      	lsls	r4, r4, #8
    16e2:	4320      	orrs	r0, r4
    16e4:	6008      	str	r0, [r1, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    16e6:	7e58      	ldrb	r0, [r3, #25]
    16e8:	7e1c      	ldrb	r4, [r3, #24]
    16ea:	0200      	lsls	r0, r0, #8
    16ec:	4320      	orrs	r0, r4
    16ee:	8088      	strh	r0, [r1, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    16f0:	7ddc      	ldrb	r4, [r3, #23]
    16f2:	7d98      	ldrb	r0, [r3, #22]
    16f4:	0224      	lsls	r4, r4, #8
    16f6:	1c23      	adds	r3, r4, #0
    16f8:	4303      	orrs	r3, r0
    16fa:	80cb      	strh	r3, [r1, #6]
	}
	*p = 0;		/* Terminate SFN str by a \0 */
    16fc:	2300      	movs	r3, #0
    16fe:	7013      	strb	r3, [r2, #0]
			}
		}
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
	}
#endif
}
    1700:	bd10      	pop	{r4, pc}

00001702 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
    1702:	b508      	push	{r3, lr}
	FIL *fil;


	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
    1704:	6803      	ldr	r3, [r0, #0]

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
    1706:	1c02      	adds	r2, r0, #0
	FIL *fil;


	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
		return FR_INVALID_OBJECT;
    1708:	2009      	movs	r0, #9
{
	FIL *fil;


	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
    170a:	2b00      	cmp	r3, #0
    170c:	d00d      	beq.n	172a <validate+0x28>
    170e:	7819      	ldrb	r1, [r3, #0]
    1710:	2900      	cmp	r1, #0
    1712:	d00a      	beq.n	172a <validate+0x28>
    1714:	88d9      	ldrh	r1, [r3, #6]
    1716:	8892      	ldrh	r2, [r2, #4]
    1718:	4291      	cmp	r1, r2
    171a:	d106      	bne.n	172a <validate+0x28>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
    171c:	7858      	ldrb	r0, [r3, #1]
    171e:	f7ff fbf9 	bl	f14 <disk_status>
    1722:	2301      	movs	r3, #1
    1724:	4018      	ands	r0, r3
    1726:	d000      	beq.n	172a <validate+0x28>
		return FR_NOT_READY;
    1728:	2003      	movs	r0, #3

	return FR_OK;
}
    172a:	bd08      	pop	{r3, pc}

0000172c <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    172c:	b510      	push	{r4, lr}
    172e:	1c04      	adds	r4, r0, #0
    1730:	1c0a      	adds	r2, r1, #0
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    1732:	1c21      	adds	r1, r4, #0
    1734:	2301      	movs	r3, #1
    1736:	7840      	ldrb	r0, [r0, #1]
    1738:	3134      	adds	r1, #52	; 0x34
    173a:	f7ff fc0d 	bl	f58 <disk_read>
		return 3;
    173e:	2303      	movs	r3, #3
BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    1740:	2800      	cmp	r0, #0
    1742:	d137      	bne.n	17b4 <check_fs+0x88>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    1744:	4b1c      	ldr	r3, [pc, #112]	; (17b8 <check_fs+0x8c>)
    1746:	4a1d      	ldr	r2, [pc, #116]	; (17bc <check_fs+0x90>)
    1748:	5ce1      	ldrb	r1, [r4, r3]
    174a:	3b01      	subs	r3, #1
    174c:	5ce3      	ldrb	r3, [r4, r3]
    174e:	0209      	lsls	r1, r1, #8
    1750:	4319      	orrs	r1, r3
    1752:	b209      	sxth	r1, r1
		return 2;
    1754:	2302      	movs	r3, #2
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    1756:	4291      	cmp	r1, r2
    1758:	d12c      	bne.n	17b4 <check_fs+0x88>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    175a:	1c23      	adds	r3, r4, #0
    175c:	336d      	adds	r3, #109	; 0x6d
    175e:	7819      	ldrb	r1, [r3, #0]
    1760:	3b01      	subs	r3, #1
    1762:	781b      	ldrb	r3, [r3, #0]
    1764:	0609      	lsls	r1, r1, #24
    1766:	041b      	lsls	r3, r3, #16
    1768:	4319      	orrs	r1, r3
    176a:	1c23      	adds	r3, r4, #0
    176c:	336a      	adds	r3, #106	; 0x6a
    176e:	781b      	ldrb	r3, [r3, #0]
    1770:	4a13      	ldr	r2, [pc, #76]	; (17c0 <check_fs+0x94>)
    1772:	4319      	orrs	r1, r3
    1774:	1c23      	adds	r3, r4, #0
    1776:	336b      	adds	r3, #107	; 0x6b
    1778:	781b      	ldrb	r3, [r3, #0]
    177a:	021b      	lsls	r3, r3, #8
    177c:	4319      	orrs	r1, r3
    177e:	0209      	lsls	r1, r1, #8
    1780:	0a09      	lsrs	r1, r1, #8
		return 0;
    1782:	1c03      	adds	r3, r0, #0
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    1784:	4291      	cmp	r1, r2
    1786:	d015      	beq.n	17b4 <check_fs+0x88>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    1788:	1c23      	adds	r3, r4, #0
    178a:	3389      	adds	r3, #137	; 0x89
    178c:	781a      	ldrb	r2, [r3, #0]
    178e:	3b01      	subs	r3, #1
    1790:	781b      	ldrb	r3, [r3, #0]
    1792:	0612      	lsls	r2, r2, #24
    1794:	041b      	lsls	r3, r3, #16
    1796:	4313      	orrs	r3, r2
    1798:	1c22      	adds	r2, r4, #0
    179a:	3286      	adds	r2, #134	; 0x86
    179c:	7812      	ldrb	r2, [r2, #0]
    179e:	3487      	adds	r4, #135	; 0x87
    17a0:	4313      	orrs	r3, r2
    17a2:	7822      	ldrb	r2, [r4, #0]
    17a4:	0212      	lsls	r2, r2, #8
    17a6:	4313      	orrs	r3, r2
    17a8:	021b      	lsls	r3, r3, #8
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
    17aa:	4a06      	ldr	r2, [pc, #24]	; (17c4 <check_fs+0x98>)
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    17ac:	0a1b      	lsrs	r3, r3, #8
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
    17ae:	189b      	adds	r3, r3, r2
    17b0:	1e5a      	subs	r2, r3, #1
    17b2:	4193      	sbcs	r3, r2
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    17b4:	1c18      	adds	r0, r3, #0
    17b6:	bd10      	pop	{r4, pc}
    17b8:	00000233 	.word	0x00000233
    17bc:	ffffaa55 	.word	0xffffaa55
    17c0:	00544146 	.word	0x00544146
    17c4:	ffabbeba 	.word	0xffabbeba

000017c8 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
    17c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
    17ca:	6803      	ldr	r3, [r0, #0]
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
    17cc:	b089      	sub	sp, #36	; 0x24
	const TCHAR *p = *path;
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    17ce:	781e      	ldrb	r6, [r3, #0]
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
    17d0:	1c17      	adds	r7, r2, #0
	const TCHAR *p = *path;
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    17d2:	3e30      	subs	r6, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    17d4:	2e09      	cmp	r6, #9
    17d6:	d805      	bhi.n	17e4 <chk_mounted+0x1c>
    17d8:	785a      	ldrb	r2, [r3, #1]
    17da:	2a3a      	cmp	r2, #58	; 0x3a
    17dc:	d102      	bne.n	17e4 <chk_mounted+0x1c>
		p += 2; *path = p;				/* Return pointer to the path name */
    17de:	3302      	adds	r3, #2
    17e0:	6003      	str	r3, [r0, #0]
    17e2:	e001      	b.n	17e8 <chk_mounted+0x20>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
    17e4:	4bcf      	ldr	r3, [pc, #828]	; (1b24 <chk_mounted+0x35c>)
    17e6:	781e      	ldrb	r6, [r3, #0]
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
    17e8:	2300      	movs	r3, #0
    17ea:	600b      	str	r3, [r1, #0]
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
    17ec:	250b      	movs	r5, #11
#endif
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    17ee:	429e      	cmp	r6, r3
    17f0:	d000      	beq.n	17f4 <chk_mounted+0x2c>
    17f2:	e194      	b.n	1b1e <chk_mounted+0x356>
		return FR_INVALID_DRIVE;
	fs = FatFs[vol];					/* Get corresponding file system object */
    17f4:	4bcb      	ldr	r3, [pc, #812]	; (1b24 <chk_mounted+0x35c>)
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    17f6:	3501      	adds	r5, #1

	/* Check if the file system object is valid or not */
	*rfs = 0;
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
	fs = FatFs[vol];					/* Get corresponding file system object */
    17f8:	685c      	ldr	r4, [r3, #4]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    17fa:	2c00      	cmp	r4, #0
    17fc:	d100      	bne.n	1800 <chk_mounted+0x38>
    17fe:	e18e      	b.n	1b1e <chk_mounted+0x356>

	ENTER_FF(fs);						/* Lock file system */

	*rfs = fs;							/* Return pointer to the corresponding file system object */
    1800:	600c      	str	r4, [r1, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
    1802:	7823      	ldrb	r3, [r4, #0]
    1804:	2b00      	cmp	r3, #0
    1806:	d00d      	beq.n	1824 <chk_mounted+0x5c>
		stat = disk_status(fs->drv);
    1808:	7860      	ldrb	r0, [r4, #1]
    180a:	f7ff fb83 	bl	f14 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    180e:	07c1      	lsls	r1, r0, #31
    1810:	d408      	bmi.n	1824 <chk_mounted+0x5c>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
    1812:	1e3d      	subs	r5, r7, #0
    1814:	d100      	bne.n	1818 <chk_mounted+0x50>
    1816:	e182      	b.n	1b1e <chk_mounted+0x356>
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
    1818:	1c35      	adds	r5, r6, #0

	*rfs = fs;							/* Return pointer to the corresponding file system object */
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
    181a:	0742      	lsls	r2, r0, #29
    181c:	d400      	bmi.n	1820 <chk_mounted+0x58>
    181e:	e17e      	b.n	1b1e <chk_mounted+0x356>
				return FR_WRITE_PROTECTED;
    1820:	250a      	movs	r5, #10
    1822:	e17c      	b.n	1b1e <chk_mounted+0x356>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    1824:	2000      	movs	r0, #0
    1826:	7020      	strb	r0, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    1828:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
    182a:	f7ff fabc 	bl	da6 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    182e:	2503      	movs	r5, #3
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    1830:	07c3      	lsls	r3, r0, #31
    1832:	d500      	bpl.n	1836 <chk_mounted+0x6e>
    1834:	e173      	b.n	1b1e <chk_mounted+0x356>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    1836:	2f00      	cmp	r7, #0
    1838:	d003      	beq.n	1842 <chk_mounted+0x7a>
		return FR_WRITE_PROTECTED;
    183a:	3507      	adds	r5, #7
	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    183c:	0741      	lsls	r1, r0, #29
    183e:	d500      	bpl.n	1842 <chk_mounted+0x7a>
    1840:	e16d      	b.n	1b1e <chk_mounted+0x356>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    1842:	1c20      	adds	r0, r4, #0
    1844:	2100      	movs	r1, #0
    1846:	f7ff ff71 	bl	172c <check_fs>
    184a:	2700      	movs	r7, #0
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    184c:	2801      	cmp	r0, #1
    184e:	d11a      	bne.n	1886 <chk_mounted+0xbe>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
    1850:	23fb      	movs	r3, #251	; 0xfb
    1852:	005b      	lsls	r3, r3, #1
    1854:	5ce3      	ldrb	r3, [r4, r3]
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    1856:	250d      	movs	r5, #13
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
    1858:	42bb      	cmp	r3, r7
    185a:	d100      	bne.n	185e <chk_mounted+0x96>
    185c:	e15f      	b.n	1b1e <chk_mounted+0x356>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    185e:	4bb2      	ldr	r3, [pc, #712]	; (1b28 <chk_mounted+0x360>)
			fmt = check_fs(fs, bsect);		/* Check the partition */
    1860:	1c20      	adds	r0, r4, #0
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    1862:	5ce7      	ldrb	r7, [r4, r3]
    1864:	3bff      	subs	r3, #255	; 0xff
    1866:	005b      	lsls	r3, r3, #1
    1868:	5ce3      	ldrb	r3, [r4, r3]
    186a:	063f      	lsls	r7, r7, #24
    186c:	041b      	lsls	r3, r3, #16
    186e:	431f      	orrs	r7, r3
    1870:	23fd      	movs	r3, #253	; 0xfd
    1872:	005b      	lsls	r3, r3, #1
    1874:	5ce3      	ldrb	r3, [r4, r3]
    1876:	431f      	orrs	r7, r3
    1878:	4bac      	ldr	r3, [pc, #688]	; (1b2c <chk_mounted+0x364>)
    187a:	5ce3      	ldrb	r3, [r4, r3]
    187c:	021b      	lsls	r3, r3, #8
    187e:	431f      	orrs	r7, r3
			fmt = check_fs(fs, bsect);		/* Check the partition */
    1880:	1c39      	adds	r1, r7, #0
    1882:	f7ff ff53 	bl	172c <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    1886:	2501      	movs	r5, #1
    1888:	2803      	cmp	r0, #3
    188a:	d100      	bne.n	188e <chk_mounted+0xc6>
    188c:	e147      	b.n	1b1e <chk_mounted+0x356>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    188e:	350c      	adds	r5, #12
    1890:	2800      	cmp	r0, #0
    1892:	d000      	beq.n	1896 <chk_mounted+0xce>
    1894:	e143      	b.n	1b1e <chk_mounted+0x356>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    1896:	1c23      	adds	r3, r4, #0
    1898:	3340      	adds	r3, #64	; 0x40
    189a:	781a      	ldrb	r2, [r3, #0]
    189c:	3b01      	subs	r3, #1
    189e:	781b      	ldrb	r3, [r3, #0]
    18a0:	0212      	lsls	r2, r2, #8
    18a2:	431a      	orrs	r2, r3
    18a4:	2380      	movs	r3, #128	; 0x80
    18a6:	b212      	sxth	r2, r2
    18a8:	009b      	lsls	r3, r3, #2
    18aa:	429a      	cmp	r2, r3
    18ac:	d000      	beq.n	18b0 <chk_mounted+0xe8>
    18ae:	e136      	b.n	1b1e <chk_mounted+0x356>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    18b0:	1c23      	adds	r3, r4, #0
    18b2:	334b      	adds	r3, #75	; 0x4b
    18b4:	781a      	ldrb	r2, [r3, #0]
    18b6:	3b01      	subs	r3, #1
    18b8:	0212      	lsls	r2, r2, #8
    18ba:	781b      	ldrb	r3, [r3, #0]
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    18bc:	1c15      	adds	r5, r2, #0
    18be:	431d      	orrs	r5, r3
    18c0:	9504      	str	r5, [sp, #16]
    18c2:	d111      	bne.n	18e8 <chk_mounted+0x120>
    18c4:	1c23      	adds	r3, r4, #0
    18c6:	335b      	adds	r3, #91	; 0x5b
    18c8:	781a      	ldrb	r2, [r3, #0]
    18ca:	3b01      	subs	r3, #1
    18cc:	781b      	ldrb	r3, [r3, #0]
    18ce:	0612      	lsls	r2, r2, #24
    18d0:	041b      	lsls	r3, r3, #16
    18d2:	431a      	orrs	r2, r3
    18d4:	1c23      	adds	r3, r4, #0
    18d6:	3358      	adds	r3, #88	; 0x58
    18d8:	781b      	ldrb	r3, [r3, #0]
    18da:	431a      	orrs	r2, r3
    18dc:	1c23      	adds	r3, r4, #0
    18de:	3359      	adds	r3, #89	; 0x59
    18e0:	781b      	ldrb	r3, [r3, #0]
    18e2:	021b      	lsls	r3, r3, #8
    18e4:	431a      	orrs	r2, r3
    18e6:	9204      	str	r2, [sp, #16]
	fs->fsize = fasize;
    18e8:	9804      	ldr	r0, [sp, #16]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    18ea:	1c23      	adds	r3, r4, #0
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;
    18ec:	6220      	str	r0, [r4, #32]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    18ee:	3344      	adds	r3, #68	; 0x44
    18f0:	781b      	ldrb	r3, [r3, #0]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    18f2:	250d      	movs	r5, #13
    18f4:	1e5a      	subs	r2, r3, #1

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    18f6:	70e3      	strb	r3, [r4, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    18f8:	2a01      	cmp	r2, #1
    18fa:	d900      	bls.n	18fe <chk_mounted+0x136>
    18fc:	e10f      	b.n	1b1e <chk_mounted+0x356>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    18fe:	1c22      	adds	r2, r4, #0
    1900:	3241      	adds	r2, #65	; 0x41
    1902:	7811      	ldrb	r1, [r2, #0]
    1904:	70a1      	strb	r1, [r4, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    1906:	2900      	cmp	r1, #0
    1908:	d100      	bne.n	190c <chk_mounted+0x144>
    190a:	e108      	b.n	1b1e <chk_mounted+0x356>
    190c:	1e4a      	subs	r2, r1, #1
    190e:	4211      	tst	r1, r2
    1910:	d000      	beq.n	1914 <chk_mounted+0x14c>
    1912:	e104      	b.n	1b1e <chk_mounted+0x356>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    1914:	1c22      	adds	r2, r4, #0
    1916:	3246      	adds	r2, #70	; 0x46
    1918:	7816      	ldrb	r6, [r2, #0]
    191a:	3a01      	subs	r2, #1
    191c:	7812      	ldrb	r2, [r2, #0]
    191e:	0236      	lsls	r6, r6, #8
    1920:	4316      	orrs	r6, r2
    1922:	8126      	strh	r6, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    1924:	0732      	lsls	r2, r6, #28
    1926:	d000      	beq.n	192a <chk_mounted+0x162>
    1928:	e0f9      	b.n	1b1e <chk_mounted+0x356>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    192a:	1c22      	adds	r2, r4, #0
    192c:	3248      	adds	r2, #72	; 0x48
    192e:	7810      	ldrb	r0, [r2, #0]
    1930:	3a01      	subs	r2, #1
    1932:	0200      	lsls	r0, r0, #8
    1934:	7812      	ldrb	r2, [r2, #0]
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    1936:	1c05      	adds	r5, r0, #0
    1938:	4315      	orrs	r5, r2
    193a:	9501      	str	r5, [sp, #4]
    193c:	d111      	bne.n	1962 <chk_mounted+0x19a>
    193e:	1c22      	adds	r2, r4, #0
    1940:	3257      	adds	r2, #87	; 0x57
    1942:	7810      	ldrb	r0, [r2, #0]
    1944:	3a01      	subs	r2, #1
    1946:	7812      	ldrb	r2, [r2, #0]
    1948:	0600      	lsls	r0, r0, #24
    194a:	0412      	lsls	r2, r2, #16
    194c:	4310      	orrs	r0, r2
    194e:	1c22      	adds	r2, r4, #0
    1950:	3254      	adds	r2, #84	; 0x54
    1952:	7812      	ldrb	r2, [r2, #0]
    1954:	4310      	orrs	r0, r2
    1956:	1c22      	adds	r2, r4, #0
    1958:	3255      	adds	r2, #85	; 0x55
    195a:	7812      	ldrb	r2, [r2, #0]
    195c:	0212      	lsls	r2, r2, #8
    195e:	4310      	orrs	r0, r2
    1960:	9001      	str	r0, [sp, #4]

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    1962:	1c22      	adds	r2, r4, #0
    1964:	3243      	adds	r2, #67	; 0x43
    1966:	7812      	ldrb	r2, [r2, #0]
    1968:	1c25      	adds	r5, r4, #0
    196a:	0212      	lsls	r2, r2, #8
    196c:	9203      	str	r2, [sp, #12]
    196e:	3542      	adds	r5, #66	; 0x42
    1970:	782d      	ldrb	r5, [r5, #0]
    1972:	46ac      	mov	ip, r5
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    1974:	4660      	mov	r0, ip
    1976:	250d      	movs	r5, #13
    1978:	4310      	orrs	r0, r2
    197a:	9007      	str	r0, [sp, #28]
    197c:	d100      	bne.n	1980 <chk_mounted+0x1b8>
    197e:	e0ce      	b.n	1b1e <chk_mounted+0x356>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
    1980:	9a04      	ldr	r2, [sp, #16]

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    1982:	9807      	ldr	r0, [sp, #28]
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
    1984:	435a      	muls	r2, r3

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    1986:	0933      	lsrs	r3, r6, #4
    1988:	181b      	adds	r3, r3, r0
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
    198a:	9206      	str	r2, [sp, #24]

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    198c:	18d2      	adds	r2, r2, r3
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    198e:	9b01      	ldr	r3, [sp, #4]

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    1990:	9205      	str	r2, [sp, #20]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    1992:	4293      	cmp	r3, r2
    1994:	d200      	bcs.n	1998 <chk_mounted+0x1d0>
    1996:	e0c2      	b.n	1b1e <chk_mounted+0x356>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    1998:	1a98      	subs	r0, r3, r2
    199a:	f001 fd57 	bl	344c <__aeabi_uidiv>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    199e:	2800      	cmp	r0, #0
    19a0:	d100      	bne.n	19a4 <chk_mounted+0x1dc>
    19a2:	e0bc      	b.n	1b1e <chk_mounted+0x356>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    19a4:	4b62      	ldr	r3, [pc, #392]	; (1b30 <chk_mounted+0x368>)
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
    19a6:	3d0c      	subs	r5, #12
    19a8:	9503      	str	r5, [sp, #12]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    19aa:	4298      	cmp	r0, r3
    19ac:	d905      	bls.n	19ba <chk_mounted+0x1f2>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    19ae:	4b61      	ldr	r3, [pc, #388]	; (1b34 <chk_mounted+0x36c>)
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    19b0:	4283      	cmp	r3, r0
    19b2:	419b      	sbcs	r3, r3
    19b4:	425b      	negs	r3, r3
    19b6:	3302      	adds	r3, #2
    19b8:	9303      	str	r3, [sp, #12]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->database = bsect + sysect;						/* Data start sector */
    19ba:	9905      	ldr	r1, [sp, #20]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	if (fmt == FS_FAT32) {
    19bc:	9d03      	ldr	r5, [sp, #12]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->database = bsect + sysect;						/* Data start sector */
    19be:	19cb      	adds	r3, r1, r7
    19c0:	62e3      	str	r3, [r4, #44]	; 0x2c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    19c2:	9b07      	ldr	r3, [sp, #28]
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    19c4:	3002      	adds	r0, #2
	fs->database = bsect + sysect;						/* Data start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    19c6:	18fa      	adds	r2, r7, r3
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    19c8:	61e0      	str	r0, [r4, #28]
	fs->database = bsect + sysect;						/* Data start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    19ca:	6262      	str	r2, [r4, #36]	; 0x24
	if (fmt == FS_FAT32) {
    19cc:	2d03      	cmp	r5, #3
    19ce:	d117      	bne.n	1a00 <chk_mounted+0x238>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    19d0:	350a      	adds	r5, #10
    19d2:	2e00      	cmp	r6, #0
    19d4:	d000      	beq.n	19d8 <chk_mounted+0x210>
    19d6:	e0a2      	b.n	1b1e <chk_mounted+0x356>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    19d8:	1c23      	adds	r3, r4, #0
    19da:	3363      	adds	r3, #99	; 0x63
    19dc:	781a      	ldrb	r2, [r3, #0]
    19de:	3b01      	subs	r3, #1
    19e0:	781b      	ldrb	r3, [r3, #0]
    19e2:	0612      	lsls	r2, r2, #24
    19e4:	041b      	lsls	r3, r3, #16
    19e6:	4313      	orrs	r3, r2
    19e8:	1c22      	adds	r2, r4, #0
    19ea:	3260      	adds	r2, #96	; 0x60
    19ec:	7812      	ldrb	r2, [r2, #0]
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    19ee:	0080      	lsls	r0, r0, #2
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->database = bsect + sysect;						/* Data start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    19f0:	4313      	orrs	r3, r2
    19f2:	1c22      	adds	r2, r4, #0
    19f4:	3261      	adds	r2, #97	; 0x61
    19f6:	7812      	ldrb	r2, [r2, #0]
    19f8:	0212      	lsls	r2, r2, #8
    19fa:	4313      	orrs	r3, r2
    19fc:	62a3      	str	r3, [r4, #40]	; 0x28
    19fe:	e011      	b.n	1a24 <chk_mounted+0x25c>
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    1a00:	250d      	movs	r5, #13
    1a02:	2e00      	cmp	r6, #0
    1a04:	d100      	bne.n	1a08 <chk_mounted+0x240>
    1a06:	e08a      	b.n	1b1e <chk_mounted+0x356>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    1a08:	9906      	ldr	r1, [sp, #24]
    1a0a:	0043      	lsls	r3, r0, #1
    1a0c:	1852      	adds	r2, r2, r1
    1a0e:	62a2      	str	r2, [r4, #40]	; 0x28
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    1a10:	9a03      	ldr	r2, [sp, #12]
    1a12:	2a02      	cmp	r2, #2
    1a14:	d101      	bne.n	1a1a <chk_mounted+0x252>
    1a16:	1c18      	adds	r0, r3, #0
    1a18:	e004      	b.n	1a24 <chk_mounted+0x25c>
    1a1a:	181b      	adds	r3, r3, r0
    1a1c:	2201      	movs	r2, #1
    1a1e:	085b      	lsrs	r3, r3, #1
    1a20:	4010      	ands	r0, r2
    1a22:	1818      	adds	r0, r3, r0
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    1a24:	4b44      	ldr	r3, [pc, #272]	; (1b38 <chk_mounted+0x370>)
    1a26:	9904      	ldr	r1, [sp, #16]
    1a28:	18c0      	adds	r0, r0, r3
    1a2a:	0a40      	lsrs	r0, r0, #9
		return FR_NO_FILESYSTEM;
    1a2c:	250d      	movs	r5, #13
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    1a2e:	4281      	cmp	r1, r0
    1a30:	d375      	bcc.n	1b1e <chk_mounted+0x356>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    1a32:	2301      	movs	r3, #1
    1a34:	425b      	negs	r3, r3
	fs->last_clust = 0;

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    1a36:	9a03      	ldr	r2, [sp, #12]
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    1a38:	6123      	str	r3, [r4, #16]
	fs->last_clust = 0;
    1a3a:	2300      	movs	r3, #0
    1a3c:	60e3      	str	r3, [r4, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    1a3e:	2a03      	cmp	r2, #3
    1a40:	d160      	bne.n	1b04 <chk_mounted+0x33c>
	 	fs->fsi_flag = 0;
    1a42:	7163      	strb	r3, [r4, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    1a44:	1c23      	adds	r3, r4, #0
    1a46:	3365      	adds	r3, #101	; 0x65
    1a48:	781a      	ldrb	r2, [r3, #0]
    1a4a:	3b01      	subs	r3, #1
    1a4c:	781b      	ldrb	r3, [r3, #0]
    1a4e:	0212      	lsls	r2, r2, #8
    1a50:	431a      	orrs	r2, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    1a52:	1c25      	adds	r5, r4, #0
	fs->last_clust = 0;

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    1a54:	18ba      	adds	r2, r7, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    1a56:	3534      	adds	r5, #52	; 0x34
	fs->last_clust = 0;

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    1a58:	6162      	str	r2, [r4, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    1a5a:	7860      	ldrb	r0, [r4, #1]
    1a5c:	1c29      	adds	r1, r5, #0
    1a5e:	2301      	movs	r3, #1
    1a60:	f7ff fa7a 	bl	f58 <disk_read>
    1a64:	2800      	cmp	r0, #0
    1a66:	d14d      	bne.n	1b04 <chk_mounted+0x33c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    1a68:	4b34      	ldr	r3, [pc, #208]	; (1b3c <chk_mounted+0x374>)
    1a6a:	5ce2      	ldrb	r2, [r4, r3]
    1a6c:	3b01      	subs	r3, #1
    1a6e:	5ce3      	ldrb	r3, [r4, r3]
    1a70:	0212      	lsls	r2, r2, #8
    1a72:	431a      	orrs	r2, r3

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    1a74:	4b32      	ldr	r3, [pc, #200]	; (1b40 <chk_mounted+0x378>)
    1a76:	b212      	sxth	r2, r2
    1a78:	429a      	cmp	r2, r3
    1a7a:	d143      	bne.n	1b04 <chk_mounted+0x33c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    1a7c:	1c23      	adds	r3, r4, #0
    1a7e:	3337      	adds	r3, #55	; 0x37
    1a80:	781a      	ldrb	r2, [r3, #0]
    1a82:	3b01      	subs	r3, #1
    1a84:	781b      	ldrb	r3, [r3, #0]
    1a86:	0612      	lsls	r2, r2, #24
    1a88:	041b      	lsls	r3, r3, #16
    1a8a:	431a      	orrs	r2, r3
    1a8c:	782b      	ldrb	r3, [r5, #0]
    1a8e:	431a      	orrs	r2, r3
    1a90:	1c23      	adds	r3, r4, #0
    1a92:	3335      	adds	r3, #53	; 0x35
    1a94:	781b      	ldrb	r3, [r3, #0]
    1a96:	021b      	lsls	r3, r3, #8
    1a98:	431a      	orrs	r2, r3
	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    1a9a:	4b2a      	ldr	r3, [pc, #168]	; (1b44 <chk_mounted+0x37c>)
    1a9c:	429a      	cmp	r2, r3
    1a9e:	d131      	bne.n	1b04 <chk_mounted+0x33c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    1aa0:	4b29      	ldr	r3, [pc, #164]	; (1b48 <chk_mounted+0x380>)
    1aa2:	5ce2      	ldrb	r2, [r4, r3]
    1aa4:	3b01      	subs	r3, #1
    1aa6:	5ce3      	ldrb	r3, [r4, r3]
    1aa8:	0612      	lsls	r2, r2, #24
    1aaa:	041b      	lsls	r3, r3, #16
    1aac:	431a      	orrs	r2, r3
    1aae:	2386      	movs	r3, #134	; 0x86
    1ab0:	009b      	lsls	r3, r3, #2
    1ab2:	5ce3      	ldrb	r3, [r4, r3]
    1ab4:	431a      	orrs	r2, r3
    1ab6:	4b25      	ldr	r3, [pc, #148]	; (1b4c <chk_mounted+0x384>)
    1ab8:	5ce3      	ldrb	r3, [r4, r3]
    1aba:	021b      	lsls	r3, r3, #8
    1abc:	431a      	orrs	r2, r3
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    1abe:	4b24      	ldr	r3, [pc, #144]	; (1b50 <chk_mounted+0x388>)
    1ac0:	429a      	cmp	r2, r3
    1ac2:	d11f      	bne.n	1b04 <chk_mounted+0x33c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    1ac4:	4b23      	ldr	r3, [pc, #140]	; (1b54 <chk_mounted+0x38c>)
    1ac6:	5ce2      	ldrb	r2, [r4, r3]
    1ac8:	3b01      	subs	r3, #1
    1aca:	5ce3      	ldrb	r3, [r4, r3]
    1acc:	0612      	lsls	r2, r2, #24
    1ace:	041b      	lsls	r3, r3, #16
    1ad0:	4313      	orrs	r3, r2
    1ad2:	2288      	movs	r2, #136	; 0x88
    1ad4:	0092      	lsls	r2, r2, #2
    1ad6:	5ca2      	ldrb	r2, [r4, r2]
    1ad8:	4313      	orrs	r3, r2
    1ada:	4a1f      	ldr	r2, [pc, #124]	; (1b58 <chk_mounted+0x390>)
    1adc:	5ca2      	ldrb	r2, [r4, r2]
    1ade:	0212      	lsls	r2, r2, #8
    1ae0:	4313      	orrs	r3, r2
    1ae2:	60e3      	str	r3, [r4, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    1ae4:	4b1d      	ldr	r3, [pc, #116]	; (1b5c <chk_mounted+0x394>)
    1ae6:	5ce2      	ldrb	r2, [r4, r3]
    1ae8:	3b01      	subs	r3, #1
    1aea:	5ce3      	ldrb	r3, [r4, r3]
    1aec:	0612      	lsls	r2, r2, #24
    1aee:	041b      	lsls	r3, r3, #16
    1af0:	4313      	orrs	r3, r2
    1af2:	2287      	movs	r2, #135	; 0x87
    1af4:	0092      	lsls	r2, r2, #2
    1af6:	5ca2      	ldrb	r2, [r4, r2]
    1af8:	4313      	orrs	r3, r2
    1afa:	4a19      	ldr	r2, [pc, #100]	; (1b60 <chk_mounted+0x398>)
    1afc:	5ca2      	ldrb	r2, [r4, r2]
    1afe:	0212      	lsls	r2, r2, #8
    1b00:	4313      	orrs	r3, r2
    1b02:	6123      	str	r3, [r4, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    1b04:	250c      	movs	r5, #12
    1b06:	466b      	mov	r3, sp
    1b08:	5ceb      	ldrb	r3, [r5, r3]
	fs->id = ++Fsid;		/* File system mount ID */
    1b0a:	4a06      	ldr	r2, [pc, #24]	; (1b24 <chk_mounted+0x35c>)
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    1b0c:	7023      	strb	r3, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    1b0e:	8913      	ldrh	r3, [r2, #8]
	fs->winsect = 0;		/* Invalidate sector cache */
    1b10:	3d0c      	subs	r5, #12
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
	fs->id = ++Fsid;		/* File system mount ID */
    1b12:	3301      	adds	r3, #1
    1b14:	8113      	strh	r3, [r2, #8]
    1b16:	80e3      	strh	r3, [r4, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    1b18:	6325      	str	r5, [r4, #48]	; 0x30
	fs->wflag = 0;
    1b1a:	7125      	strb	r5, [r4, #4]
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
    1b1c:	61a5      	str	r5, [r4, #24]
#if _FS_LOCK				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
    1b1e:	b009      	add	sp, #36	; 0x24
    1b20:	1c28      	adds	r0, r5, #0
    1b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b24:	10000120 	.word	0x10000120
    1b28:	000001fd 	.word	0x000001fd
    1b2c:	000001fb 	.word	0x000001fb
    1b30:	00000ff5 	.word	0x00000ff5
    1b34:	0000fff5 	.word	0x0000fff5
    1b38:	000001ff 	.word	0x000001ff
    1b3c:	00000233 	.word	0x00000233
    1b40:	ffffaa55 	.word	0xffffaa55
    1b44:	41615252 	.word	0x41615252
    1b48:	0000021b 	.word	0x0000021b
    1b4c:	00000219 	.word	0x00000219
    1b50:	61417272 	.word	0x61417272
    1b54:	00000223 	.word	0x00000223
    1b58:	00000221 	.word	0x00000221
    1b5c:	0000021f 	.word	0x0000021f
    1b60:	0000021d 	.word	0x0000021d

00001b64 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    1b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	DWORD wsect;


	wsect = fs->winsect;
    1b66:	6b05      	ldr	r5, [r0, #48]	; 0x30
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    1b68:	1c0f      	adds	r7, r1, #0
    1b6a:	1c04      	adds	r4, r0, #0
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
    1b6c:	2200      	movs	r2, #0
{
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
    1b6e:	42bd      	cmp	r5, r7
    1b70:	d02f      	beq.n	1bd2 <move_window+0x6e>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    1b72:	7903      	ldrb	r3, [r0, #4]
    1b74:	4293      	cmp	r3, r2
    1b76:	d01f      	beq.n	1bb8 <move_window+0x54>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    1b78:	2334      	movs	r3, #52	; 0x34
    1b7a:	181b      	adds	r3, r3, r0
    1b7c:	9301      	str	r3, [sp, #4]
    1b7e:	1c19      	adds	r1, r3, #0
    1b80:	1c2a      	adds	r2, r5, #0
    1b82:	7840      	ldrb	r0, [r0, #1]
    1b84:	2301      	movs	r3, #1
    1b86:	f7ff fa2d 	bl	fe4 <disk_write>
				return FR_DISK_ERR;
    1b8a:	2201      	movs	r2, #1

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    1b8c:	2800      	cmp	r0, #0
    1b8e:	d120      	bne.n	1bd2 <move_window+0x6e>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    1b90:	6a22      	ldr	r2, [r4, #32]
    1b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
    1b94:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    1b96:	18d3      	adds	r3, r2, r3
    1b98:	429d      	cmp	r5, r3
    1b9a:	d20d      	bcs.n	1bb8 <move_window+0x54>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    1b9c:	78e6      	ldrb	r6, [r4, #3]
    1b9e:	e009      	b.n	1bb4 <move_window+0x50>
					wsect += fs->fsize;
    1ba0:	6a23      	ldr	r3, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
    1ba2:	7860      	ldrb	r0, [r4, #1]
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
    1ba4:	18ed      	adds	r5, r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
    1ba6:	9901      	ldr	r1, [sp, #4]
    1ba8:	1c2a      	adds	r2, r5, #0
    1baa:	2301      	movs	r3, #1
    1bac:	f7ff fa1a 	bl	fe4 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    1bb0:	3e01      	subs	r6, #1
    1bb2:	b2f6      	uxtb	r6, r6
    1bb4:	2e01      	cmp	r6, #1
    1bb6:	d8f3      	bhi.n	1ba0 <move_window+0x3c>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    1bb8:	1e3a      	subs	r2, r7, #0
    1bba:	d00a      	beq.n	1bd2 <move_window+0x6e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    1bbc:	1c21      	adds	r1, r4, #0
    1bbe:	7860      	ldrb	r0, [r4, #1]
    1bc0:	3134      	adds	r1, #52	; 0x34
    1bc2:	2301      	movs	r3, #1
    1bc4:	f7ff f9c8 	bl	f58 <disk_read>
				return FR_DISK_ERR;
    1bc8:	2201      	movs	r2, #1
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    1bca:	2800      	cmp	r0, #0
    1bcc:	d101      	bne.n	1bd2 <move_window+0x6e>
				return FR_DISK_ERR;
			fs->winsect = sector;
    1bce:	6327      	str	r7, [r4, #48]	; 0x30
		}
	}

	return FR_OK;
    1bd0:	1c02      	adds	r2, r0, #0
}
    1bd2:	1c10      	adds	r0, r2, #0
    1bd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00001bd6 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    1bd6:	b570      	push	{r4, r5, r6, lr}
	FRESULT res;


	res = move_window(fs, 0);
    1bd8:	2100      	movs	r1, #0
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    1bda:	1c04      	adds	r4, r0, #0
	FRESULT res;


	res = move_window(fs, 0);
    1bdc:	f7ff ffc2 	bl	1b64 <move_window>
    1be0:	1c05      	adds	r5, r0, #0
	if (res == FR_OK) {
    1be2:	2800      	cmp	r0, #0
    1be4:	d153      	bne.n	1c8e <sync+0xb8>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    1be6:	7823      	ldrb	r3, [r4, #0]
    1be8:	2b03      	cmp	r3, #3
    1bea:	d149      	bne.n	1c80 <sync+0xaa>
    1bec:	7963      	ldrb	r3, [r4, #5]
    1bee:	2b00      	cmp	r3, #0
    1bf0:	d046      	beq.n	1c80 <sync+0xaa>
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    1bf2:	1c26      	adds	r6, r4, #0
    1bf4:	3634      	adds	r6, #52	; 0x34
    1bf6:	2280      	movs	r2, #128	; 0x80
    1bf8:	1c30      	adds	r0, r6, #0
    1bfa:	1c29      	adds	r1, r5, #0
    1bfc:	0092      	lsls	r2, r2, #2

	res = move_window(fs, 0);
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
    1bfe:	6325      	str	r5, [r4, #48]	; 0x30
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    1c00:	f7ff fd33 	bl	166a <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    1c04:	4b22      	ldr	r3, [pc, #136]	; (1c90 <sync+0xba>)
    1c06:	2255      	movs	r2, #85	; 0x55
    1c08:	54e2      	strb	r2, [r4, r3]
    1c0a:	1892      	adds	r2, r2, r2
    1c0c:	3301      	adds	r3, #1
    1c0e:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    1c10:	1c22      	adds	r2, r4, #0
    1c12:	2352      	movs	r3, #82	; 0x52
    1c14:	3235      	adds	r2, #53	; 0x35
    1c16:	7033      	strb	r3, [r6, #0]
    1c18:	1c21      	adds	r1, r4, #0
    1c1a:	7013      	strb	r3, [r2, #0]
    1c1c:	330f      	adds	r3, #15
    1c1e:	7053      	strb	r3, [r2, #1]
    1c20:	3137      	adds	r1, #55	; 0x37
    1c22:	2241      	movs	r2, #65	; 0x41
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    1c24:	2086      	movs	r0, #134	; 0x86
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    1c26:	700a      	strb	r2, [r1, #0]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    1c28:	0080      	lsls	r0, r0, #2
    1c2a:	2172      	movs	r1, #114	; 0x72
    1c2c:	5421      	strb	r1, [r4, r0]
    1c2e:	4819      	ldr	r0, [pc, #100]	; (1c94 <sync+0xbe>)
    1c30:	5421      	strb	r1, [r4, r0]
    1c32:	31a9      	adds	r1, #169	; 0xa9
    1c34:	31ff      	adds	r1, #255	; 0xff
    1c36:	5462      	strb	r2, [r4, r1]
    1c38:	32db      	adds	r2, #219	; 0xdb
    1c3a:	32ff      	adds	r2, #255	; 0xff
    1c3c:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    1c3e:	6923      	ldr	r3, [r4, #16]
    1c40:	2287      	movs	r2, #135	; 0x87
    1c42:	0092      	lsls	r2, r2, #2
    1c44:	54a3      	strb	r3, [r4, r2]
    1c46:	4a14      	ldr	r2, [pc, #80]	; (1c98 <sync+0xc2>)
    1c48:	0a19      	lsrs	r1, r3, #8
    1c4a:	54a1      	strb	r1, [r4, r2]
    1c4c:	0c19      	lsrs	r1, r3, #16
    1c4e:	3201      	adds	r2, #1
    1c50:	54a1      	strb	r1, [r4, r2]
    1c52:	0e1b      	lsrs	r3, r3, #24
    1c54:	3201      	adds	r2, #1
    1c56:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    1c58:	68e3      	ldr	r3, [r4, #12]
    1c5a:	2288      	movs	r2, #136	; 0x88
    1c5c:	0092      	lsls	r2, r2, #2
    1c5e:	54a3      	strb	r3, [r4, r2]
    1c60:	4a0e      	ldr	r2, [pc, #56]	; (1c9c <sync+0xc6>)
    1c62:	0a19      	lsrs	r1, r3, #8
    1c64:	54a1      	strb	r1, [r4, r2]
    1c66:	0c19      	lsrs	r1, r3, #16
    1c68:	3201      	adds	r2, #1
    1c6a:	54a1      	strb	r1, [r4, r2]
    1c6c:	0e1b      	lsrs	r3, r3, #24
    1c6e:	3201      	adds	r2, #1
    1c70:	54a3      	strb	r3, [r4, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    1c72:	7860      	ldrb	r0, [r4, #1]
    1c74:	1c31      	adds	r1, r6, #0
    1c76:	6962      	ldr	r2, [r4, #20]
    1c78:	2301      	movs	r3, #1
    1c7a:	f7ff f9b3 	bl	fe4 <disk_write>
			fs->fsi_flag = 0;
    1c7e:	7165      	strb	r5, [r4, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    1c80:	2100      	movs	r1, #0
    1c82:	7860      	ldrb	r0, [r4, #1]
    1c84:	1c0a      	adds	r2, r1, #0
    1c86:	f7ff f9fd 	bl	1084 <disk_ioctl>
    1c8a:	1e43      	subs	r3, r0, #1
    1c8c:	4198      	sbcs	r0, r3
			res = FR_DISK_ERR;
	}

	return res;
}
    1c8e:	bd70      	pop	{r4, r5, r6, pc}
    1c90:	00000232 	.word	0x00000232
    1c94:	00000219 	.word	0x00000219
    1c98:	0000021d 	.word	0x0000021d
    1c9c:	00000221 	.word	0x00000221

00001ca0 <ld_clust.clone.0>:
/*-----------------------------------------------------------------------*/
/* Directory handling - Load/Store start cluster number                  */
/*-----------------------------------------------------------------------*/

static
DWORD ld_clust (
    1ca0:	b500      	push	{lr}
    1ca2:	1c03      	adds	r3, r0, #0
	BYTE *dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
    1ca4:	7ec8      	ldrb	r0, [r1, #27]
    1ca6:	7e8a      	ldrb	r2, [r1, #26]
    1ca8:	0200      	lsls	r0, r0, #8
    1caa:	4310      	orrs	r0, r2
	if (fs->fs_type == FS_FAT32)
    1cac:	2b03      	cmp	r3, #3
    1cae:	d105      	bne.n	1cbc <ld_clust.clone.0+0x1c>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
    1cb0:	7d4b      	ldrb	r3, [r1, #21]
    1cb2:	7d0a      	ldrb	r2, [r1, #20]
    1cb4:	021b      	lsls	r3, r3, #8
    1cb6:	4313      	orrs	r3, r2
    1cb8:	041b      	lsls	r3, r3, #16
    1cba:	4318      	orrs	r0, r3

	return cl;
}
    1cbc:	bd00      	pop	{pc}

00001cbe <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    1cbe:	b500      	push	{lr}
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1cc0:	69c2      	ldr	r2, [r0, #28]
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1cc2:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1cc4:	3a02      	subs	r2, #2

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    1cc6:	1c03      	adds	r3, r0, #0
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1cc8:	2000      	movs	r0, #0
    1cca:	4291      	cmp	r1, r2
    1ccc:	d203      	bcs.n	1cd6 <clust2sect+0x18>
	return clst * fs->csize + fs->database;
    1cce:	7898      	ldrb	r0, [r3, #2]
    1cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1cd2:	4348      	muls	r0, r1
    1cd4:	18c0      	adds	r0, r0, r3
}
    1cd6:	bd00      	pop	{pc}

00001cd8 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    1cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
		return 1;
    1cda:	2501      	movs	r5, #1

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    1cdc:	1c04      	adds	r4, r0, #0
    1cde:	1c0e      	adds	r6, r1, #0
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
    1ce0:	42a9      	cmp	r1, r5
    1ce2:	d95e      	bls.n	1da2 <get_fat+0xca>
    1ce4:	69c3      	ldr	r3, [r0, #28]
    1ce6:	4299      	cmp	r1, r3
    1ce8:	d25b      	bcs.n	1da2 <get_fat+0xca>
		return 1;

	switch (fs->fs_type) {
    1cea:	7803      	ldrb	r3, [r0, #0]
    1cec:	2b02      	cmp	r3, #2
    1cee:	d02a      	beq.n	1d46 <get_fat+0x6e>
    1cf0:	2b03      	cmp	r3, #3
    1cf2:	d03a      	beq.n	1d6a <get_fat+0x92>
    1cf4:	42ab      	cmp	r3, r5
    1cf6:	d152      	bne.n	1d9e <get_fat+0xc6>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    1cf8:	084f      	lsrs	r7, r1, #1
    1cfa:	187f      	adds	r7, r7, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    1cfc:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1cfe:	0a79      	lsrs	r1, r7, #9
    1d00:	18c9      	adds	r1, r1, r3
    1d02:	f7ff ff2f 	bl	1b64 <move_window>
    1d06:	2800      	cmp	r0, #0
    1d08:	d149      	bne.n	1d9e <get_fat+0xc6>
		wc = fs->win[bc % SS(fs)]; bc++;
    1d0a:	05fb      	lsls	r3, r7, #23
    1d0c:	0ddb      	lsrs	r3, r3, #23
    1d0e:	18e3      	adds	r3, r4, r3
    1d10:	3330      	adds	r3, #48	; 0x30
    1d12:	791b      	ldrb	r3, [r3, #4]
    1d14:	197f      	adds	r7, r7, r5
    1d16:	9301      	str	r3, [sp, #4]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    1d18:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1d1a:	0a79      	lsrs	r1, r7, #9
    1d1c:	18c9      	adds	r1, r1, r3
    1d1e:	1c20      	adds	r0, r4, #0
    1d20:	f7ff ff20 	bl	1b64 <move_window>
    1d24:	2800      	cmp	r0, #0
    1d26:	d13a      	bne.n	1d9e <get_fat+0xc6>
		wc |= fs->win[bc % SS(fs)] << 8;
    1d28:	05ff      	lsls	r7, r7, #23
    1d2a:	0dff      	lsrs	r7, r7, #23
    1d2c:	19e4      	adds	r4, r4, r7
    1d2e:	3430      	adds	r4, #48	; 0x30
    1d30:	7923      	ldrb	r3, [r4, #4]
    1d32:	9a01      	ldr	r2, [sp, #4]
    1d34:	021b      	lsls	r3, r3, #8
    1d36:	4313      	orrs	r3, r2
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    1d38:	422e      	tst	r6, r5
    1d3a:	d001      	beq.n	1d40 <get_fat+0x68>
    1d3c:	091d      	lsrs	r5, r3, #4
    1d3e:	e030      	b.n	1da2 <get_fat+0xca>
    1d40:	051d      	lsls	r5, r3, #20
    1d42:	0d2d      	lsrs	r5, r5, #20
    1d44:	e02d      	b.n	1da2 <get_fat+0xca>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    1d46:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1d48:	0a09      	lsrs	r1, r1, #8
    1d4a:	18c9      	adds	r1, r1, r3
    1d4c:	f7ff ff0a 	bl	1b64 <move_window>
    1d50:	2800      	cmp	r0, #0
    1d52:	d124      	bne.n	1d9e <get_fat+0xc6>
		p = &fs->win[clst * 2 % SS(fs)];
    1d54:	0636      	lsls	r6, r6, #24
    1d56:	0df6      	lsrs	r6, r6, #23
		return LD_WORD(p);
    1d58:	19a3      	adds	r3, r4, r6
		wc |= fs->win[bc % SS(fs)] << 8;
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
		p = &fs->win[clst * 2 % SS(fs)];
    1d5a:	3630      	adds	r6, #48	; 0x30
		return LD_WORD(p);
    1d5c:	19a4      	adds	r4, r4, r6
    1d5e:	3330      	adds	r3, #48	; 0x30
    1d60:	7965      	ldrb	r5, [r4, #5]
    1d62:	791b      	ldrb	r3, [r3, #4]
    1d64:	022d      	lsls	r5, r5, #8
    1d66:	431d      	orrs	r5, r3
    1d68:	e01b      	b.n	1da2 <get_fat+0xca>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    1d6a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1d6c:	09c9      	lsrs	r1, r1, #7
    1d6e:	18c9      	adds	r1, r1, r3
    1d70:	f7ff fef8 	bl	1b64 <move_window>
    1d74:	2800      	cmp	r0, #0
    1d76:	d112      	bne.n	1d9e <get_fat+0xc6>
		p = &fs->win[clst * 4 % SS(fs)];
    1d78:	0676      	lsls	r6, r6, #25
    1d7a:	0df6      	lsrs	r6, r6, #23
    1d7c:	19a3      	adds	r3, r4, r6
    1d7e:	3334      	adds	r3, #52	; 0x34
		return LD_DWORD(p) & 0x0FFFFFFF;
    1d80:	789d      	ldrb	r5, [r3, #2]
    1d82:	78da      	ldrb	r2, [r3, #3]
    1d84:	785b      	ldrb	r3, [r3, #1]
    1d86:	042d      	lsls	r5, r5, #16
    1d88:	0612      	lsls	r2, r2, #24
    1d8a:	19a6      	adds	r6, r4, r6
    1d8c:	021b      	lsls	r3, r3, #8
    1d8e:	4315      	orrs	r5, r2
    1d90:	3630      	adds	r6, #48	; 0x30
    1d92:	431d      	orrs	r5, r3
    1d94:	7933      	ldrb	r3, [r6, #4]
    1d96:	431d      	orrs	r5, r3
    1d98:	012d      	lsls	r5, r5, #4
    1d9a:	092d      	lsrs	r5, r5, #4
    1d9c:	e001      	b.n	1da2 <get_fat+0xca>
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    1d9e:	2501      	movs	r5, #1
    1da0:	426d      	negs	r5, r5
}
    1da2:	1c28      	adds	r0, r5, #0
    1da4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00001da6 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Index of directory table */
)
{
    1da6:	b570      	push	{r4, r5, r6, lr}
    1da8:	1c04      	adds	r4, r0, #0
    1daa:	1c0d      	adds	r5, r1, #0
	DWORD clst;
	WORD ic;


	dj->index = idx;
    1dac:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    1dae:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
    1db0:	2002      	movs	r0, #2
	WORD ic;


	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    1db2:	2901      	cmp	r1, #1
    1db4:	d03c      	beq.n	1e30 <dir_sdi+0x8a>
    1db6:	6823      	ldr	r3, [r4, #0]
    1db8:	69da      	ldr	r2, [r3, #28]
    1dba:	4291      	cmp	r1, r2
    1dbc:	d238      	bcs.n	1e30 <dir_sdi+0x8a>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1dbe:	2900      	cmp	r1, #0
    1dc0:	d110      	bne.n	1de4 <dir_sdi+0x3e>
    1dc2:	781a      	ldrb	r2, [r3, #0]
    1dc4:	2a03      	cmp	r2, #3
    1dc6:	d102      	bne.n	1dce <dir_sdi+0x28>
		clst = dj->fs->dirbase;
    1dc8:	6a99      	ldr	r1, [r3, #40]	; 0x28

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    1dca:	2900      	cmp	r1, #0
    1dcc:	d10a      	bne.n	1de4 <dir_sdi+0x3e>
		dj->clust = clst;
    1dce:	2200      	movs	r2, #0
    1dd0:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1dd2:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    1dd4:	2002      	movs	r0, #2
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dj->fs->dirbase;

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
		dj->clust = clst;
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1dd6:	42aa      	cmp	r2, r5
    1dd8:	d92a      	bls.n	1e30 <dir_sdi+0x8a>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    1dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1ddc:	092a      	lsrs	r2, r5, #4
    1dde:	18d3      	adds	r3, r2, r3
    1de0:	6123      	str	r3, [r4, #16]
    1de2:	e019      	b.n	1e18 <dir_sdi+0x72>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    1de4:	789e      	ldrb	r6, [r3, #2]
    1de6:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    1de8:	e00d      	b.n	1e06 <dir_sdi+0x60>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1dea:	6820      	ldr	r0, [r4, #0]
    1dec:	f7ff ff74 	bl	1cd8 <get_fat>
    1df0:	1c01      	adds	r1, r0, #0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1df2:	1c43      	adds	r3, r0, #1
    1df4:	d019      	beq.n	1e2a <dir_sdi+0x84>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    1df6:	2801      	cmp	r0, #1
    1df8:	d919      	bls.n	1e2e <dir_sdi+0x88>
    1dfa:	6823      	ldr	r3, [r4, #0]
    1dfc:	69db      	ldr	r3, [r3, #28]
    1dfe:	4298      	cmp	r0, r3
    1e00:	d215      	bcs.n	1e2e <dir_sdi+0x88>
				return FR_INT_ERR;
			idx -= ic;
    1e02:	1bad      	subs	r5, r5, r6
    1e04:	b2ad      	uxth	r5, r5
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    1e06:	42b5      	cmp	r5, r6
    1e08:	d2ef      	bcs.n	1dea <dir_sdi+0x44>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    1e0a:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    1e0c:	6820      	ldr	r0, [r4, #0]
    1e0e:	f7ff ff56 	bl	1cbe <clust2sect>
    1e12:	092b      	lsrs	r3, r5, #4
    1e14:	1818      	adds	r0, r3, r0
    1e16:	6120      	str	r0, [r4, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    1e18:	6823      	ldr	r3, [r4, #0]
    1e1a:	220f      	movs	r2, #15
    1e1c:	4015      	ands	r5, r2
    1e1e:	3334      	adds	r3, #52	; 0x34
    1e20:	016d      	lsls	r5, r5, #5
    1e22:	195d      	adds	r5, r3, r5
    1e24:	6165      	str	r5, [r4, #20]

	return FR_OK;	/* Seek succeeded */
    1e26:	2000      	movs	r0, #0
    1e28:	e002      	b.n	1e30 <dir_sdi+0x8a>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1e2a:	2001      	movs	r0, #1
    1e2c:	e000      	b.n	1e30 <dir_sdi+0x8a>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
    1e2e:	2002      	movs	r0, #2
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
    1e30:	bd70      	pop	{r4, r5, r6, pc}

00001e32 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    1e32:	b510      	push	{r4, lr}
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_sdi(dj, dj->index);
    1e34:	88c1      	ldrh	r1, [r0, #6]
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    1e36:	1c04      	adds	r4, r0, #0
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_sdi(dj, dj->index);
    1e38:	f7ff ffb5 	bl	1da6 <dir_sdi>
	if (res == FR_OK) {
    1e3c:	2800      	cmp	r0, #0
    1e3e:	d10b      	bne.n	1e58 <dir_remove+0x26>
		res = move_window(dj->fs, dj->sect);
    1e40:	6820      	ldr	r0, [r4, #0]
    1e42:	6921      	ldr	r1, [r4, #16]
    1e44:	f7ff fe8e 	bl	1b64 <move_window>
		if (res == FR_OK) {
    1e48:	2800      	cmp	r0, #0
    1e4a:	d105      	bne.n	1e58 <dir_remove+0x26>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    1e4c:	6963      	ldr	r3, [r4, #20]
    1e4e:	22e5      	movs	r2, #229	; 0xe5
    1e50:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
    1e52:	6823      	ldr	r3, [r4, #0]
    1e54:	3ae4      	subs	r2, #228	; 0xe4
    1e56:	711a      	strb	r2, [r3, #4]
		}
	}
#endif

	return res;
}
    1e58:	bd10      	pop	{r4, pc}

00001e5a <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    1e5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1e5c:	1c04      	adds	r4, r0, #0
    1e5e:	1c0d      	adds	r5, r1, #0
    1e60:	1c16      	adds	r6, r2, #0
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    1e62:	2002      	movs	r0, #2
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    1e64:	2901      	cmp	r1, #1
    1e66:	d973      	bls.n	1f50 <put_fat+0xf6>
    1e68:	69e3      	ldr	r3, [r4, #28]
    1e6a:	4299      	cmp	r1, r3
    1e6c:	d270      	bcs.n	1f50 <put_fat+0xf6>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    1e6e:	7827      	ldrb	r7, [r4, #0]
    1e70:	4287      	cmp	r7, r0
    1e72:	d03f      	beq.n	1ef4 <put_fat+0x9a>
    1e74:	2f03      	cmp	r7, #3
    1e76:	d04f      	beq.n	1f18 <put_fat+0xbe>
    1e78:	2f01      	cmp	r7, #1
    1e7a:	d167      	bne.n	1f4c <put_fat+0xf2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
    1e7c:	084b      	lsrs	r3, r1, #1
    1e7e:	185b      	adds	r3, r3, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1e80:	0a59      	lsrs	r1, r3, #9
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
    1e82:	9301      	str	r3, [sp, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1e84:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1e86:	1c20      	adds	r0, r4, #0
    1e88:	18c9      	adds	r1, r1, r3
    1e8a:	f7ff fe6b 	bl	1b64 <move_window>
			if (res != FR_OK) break;
    1e8e:	2800      	cmp	r0, #0
    1e90:	d15c      	bne.n	1f4c <put_fat+0xf2>
			p = &fs->win[bc % SS(fs)];
    1e92:	9b01      	ldr	r3, [sp, #4]
    1e94:	05da      	lsls	r2, r3, #23
    1e96:	0dd2      	lsrs	r2, r2, #23
    1e98:	b2f3      	uxtb	r3, r6
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    1e9a:	402f      	ands	r7, r5
    1e9c:	d008      	beq.n	1eb0 <put_fat+0x56>
    1e9e:	18a1      	adds	r1, r4, r2
    1ea0:	3130      	adds	r1, #48	; 0x30
    1ea2:	7908      	ldrb	r0, [r1, #4]
    1ea4:	210f      	movs	r1, #15
    1ea6:	4008      	ands	r0, r1
    1ea8:	0119      	lsls	r1, r3, #4
    1eaa:	1c03      	adds	r3, r0, #0
    1eac:	430b      	orrs	r3, r1
    1eae:	b2db      	uxtb	r3, r3
    1eb0:	18a2      	adds	r2, r4, r2
    1eb2:	3230      	adds	r2, #48	; 0x30
    1eb4:	7113      	strb	r3, [r2, #4]
			bc++;
    1eb6:	9d01      	ldr	r5, [sp, #4]
			fs->wflag = 1;
    1eb8:	2301      	movs	r3, #1
			bc = (UINT)clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
    1eba:	3501      	adds	r5, #1
			fs->wflag = 1;
    1ebc:	7123      	strb	r3, [r4, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1ebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1ec0:	0a69      	lsrs	r1, r5, #9
    1ec2:	18c9      	adds	r1, r1, r3
    1ec4:	1c20      	adds	r0, r4, #0
    1ec6:	f7ff fe4d 	bl	1b64 <move_window>
			if (res != FR_OK) break;
    1eca:	2800      	cmp	r0, #0
    1ecc:	d13e      	bne.n	1f4c <put_fat+0xf2>
			p = &fs->win[bc % SS(fs)];
    1ece:	05ed      	lsls	r5, r5, #23
    1ed0:	0ded      	lsrs	r5, r5, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1ed2:	2f00      	cmp	r7, #0
    1ed4:	d001      	beq.n	1eda <put_fat+0x80>
    1ed6:	0936      	lsrs	r6, r6, #4
    1ed8:	e008      	b.n	1eec <put_fat+0x92>
    1eda:	1963      	adds	r3, r4, r5
    1edc:	3330      	adds	r3, #48	; 0x30
    1ede:	791a      	ldrb	r2, [r3, #4]
    1ee0:	230f      	movs	r3, #15
    1ee2:	439a      	bics	r2, r3
    1ee4:	0a36      	lsrs	r6, r6, #8
    1ee6:	4033      	ands	r3, r6
    1ee8:	1c16      	adds	r6, r2, #0
    1eea:	431e      	orrs	r6, r3
    1eec:	1965      	adds	r5, r4, r5
    1eee:	3530      	adds	r5, #48	; 0x30
    1ef0:	712e      	strb	r6, [r5, #4]
			break;
    1ef2:	e02b      	b.n	1f4c <put_fat+0xf2>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    1ef4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1ef6:	0a09      	lsrs	r1, r1, #8
    1ef8:	18c9      	adds	r1, r1, r3
    1efa:	1c20      	adds	r0, r4, #0
    1efc:	f7ff fe32 	bl	1b64 <move_window>
			if (res != FR_OK) break;
    1f00:	2800      	cmp	r0, #0
    1f02:	d123      	bne.n	1f4c <put_fat+0xf2>
			p = &fs->win[clst * 2 % SS(fs)];
    1f04:	062d      	lsls	r5, r5, #24
    1f06:	0ded      	lsrs	r5, r5, #23
			ST_WORD(p, (WORD)val);
    1f08:	1963      	adds	r3, r4, r5
    1f0a:	3330      	adds	r3, #48	; 0x30
			break;

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
			if (res != FR_OK) break;
			p = &fs->win[clst * 2 % SS(fs)];
    1f0c:	3530      	adds	r5, #48	; 0x30
			ST_WORD(p, (WORD)val);
    1f0e:	711e      	strb	r6, [r3, #4]
    1f10:	1965      	adds	r5, r4, r5
    1f12:	0a36      	lsrs	r6, r6, #8
    1f14:	716e      	strb	r6, [r5, #5]
			break;
    1f16:	e019      	b.n	1f4c <put_fat+0xf2>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    1f18:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1f1a:	09c9      	lsrs	r1, r1, #7
    1f1c:	18c9      	adds	r1, r1, r3
    1f1e:	1c20      	adds	r0, r4, #0
    1f20:	f7ff fe20 	bl	1b64 <move_window>
			if (res != FR_OK) break;
    1f24:	2800      	cmp	r0, #0
    1f26:	d111      	bne.n	1f4c <put_fat+0xf2>
			p = &fs->win[clst * 4 % SS(fs)];
    1f28:	066d      	lsls	r5, r5, #25
    1f2a:	0ded      	lsrs	r5, r5, #23
    1f2c:	1c2b      	adds	r3, r5, #0
    1f2e:	3330      	adds	r3, #48	; 0x30
    1f30:	18e3      	adds	r3, r4, r3
			val |= LD_DWORD(p) & 0xF0000000;
    1f32:	79da      	ldrb	r2, [r3, #7]
    1f34:	1965      	adds	r5, r4, r5
    1f36:	0912      	lsrs	r2, r2, #4
    1f38:	0712      	lsls	r2, r2, #28
    1f3a:	4316      	orrs	r6, r2
			ST_DWORD(p, val);
    1f3c:	0a32      	lsrs	r2, r6, #8

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
			if (res != FR_OK) break;
			p = &fs->win[clst * 4 % SS(fs)];
			val |= LD_DWORD(p) & 0xF0000000;
    1f3e:	3530      	adds	r5, #48	; 0x30
			ST_DWORD(p, val);
    1f40:	712e      	strb	r6, [r5, #4]
    1f42:	715a      	strb	r2, [r3, #5]
    1f44:	0c32      	lsrs	r2, r6, #16
    1f46:	0e36      	lsrs	r6, r6, #24
    1f48:	719a      	strb	r2, [r3, #6]
    1f4a:	71de      	strb	r6, [r3, #7]
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    1f4c:	2301      	movs	r3, #1
    1f4e:	7123      	strb	r3, [r4, #4]
	}

	return res;
}
    1f50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00001f52 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    1f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f54:	1c04      	adds	r4, r0, #0
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    1f56:	1e0f      	subs	r7, r1, #0
    1f58:	d106      	bne.n	1f68 <create_chain+0x16>
		scl = fs->last_clust;			/* Get suggested start point */
    1f5a:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1f5c:	2e00      	cmp	r6, #0
    1f5e:	d00d      	beq.n	1f7c <create_chain+0x2a>
    1f60:	69c3      	ldr	r3, [r0, #28]
    1f62:	429e      	cmp	r6, r3
    1f64:	d20a      	bcs.n	1f7c <create_chain+0x2a>
    1f66:	e00a      	b.n	1f7e <create_chain+0x2c>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1f68:	1c39      	adds	r1, r7, #0
    1f6a:	f7ff feb5 	bl	1cd8 <get_fat>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1f6e:	2801      	cmp	r0, #1
    1f70:	d93e      	bls.n	1ff0 <create_chain+0x9e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    1f72:	69e3      	ldr	r3, [r4, #28]
    1f74:	1c3e      	adds	r6, r7, #0
    1f76:	4298      	cmp	r0, r3
    1f78:	d201      	bcs.n	1f7e <create_chain+0x2c>
    1f7a:	e03e      	b.n	1ffa <create_chain+0xa8>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1f7c:	2601      	movs	r6, #1
    1f7e:	1c35      	adds	r5, r6, #0
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    1f80:	69e3      	ldr	r3, [r4, #28]
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1f82:	3501      	adds	r5, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    1f84:	429d      	cmp	r5, r3
    1f86:	d302      	bcc.n	1f8e <create_chain+0x3c>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    1f88:	2e01      	cmp	r6, #1
    1f8a:	d933      	bls.n	1ff4 <create_chain+0xa2>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
    1f8c:	2502      	movs	r5, #2
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1f8e:	1c20      	adds	r0, r4, #0
    1f90:	1c29      	adds	r1, r5, #0
    1f92:	f7ff fea1 	bl	1cd8 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
    1f96:	2800      	cmp	r0, #0
    1f98:	d009      	beq.n	1fae <create_chain+0x5c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    1f9a:	2801      	cmp	r0, #1
    1f9c:	d02d      	beq.n	1ffa <create_chain+0xa8>
    1f9e:	1c43      	adds	r3, r0, #1
    1fa0:	425a      	negs	r2, r3
    1fa2:	4153      	adcs	r3, r2
    1fa4:	2b00      	cmp	r3, #0
    1fa6:	d128      	bne.n	1ffa <create_chain+0xa8>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    1fa8:	42b5      	cmp	r5, r6
    1faa:	d1e9      	bne.n	1f80 <create_chain+0x2e>
    1fac:	e024      	b.n	1ff8 <create_chain+0xa6>
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    1fae:	1c20      	adds	r0, r4, #0
    1fb0:	1c29      	adds	r1, r5, #0
    1fb2:	4a12      	ldr	r2, [pc, #72]	; (1ffc <create_chain+0xaa>)
    1fb4:	f7ff ff51 	bl	1e5a <put_fat>
	if (res == FR_OK && clst != 0) {
    1fb8:	2800      	cmp	r0, #0
    1fba:	d106      	bne.n	1fca <create_chain+0x78>
    1fbc:	2f00      	cmp	r7, #0
    1fbe:	d004      	beq.n	1fca <create_chain+0x78>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    1fc0:	1c20      	adds	r0, r4, #0
    1fc2:	1c39      	adds	r1, r7, #0
    1fc4:	1c2a      	adds	r2, r5, #0
    1fc6:	f7ff ff48 	bl	1e5a <put_fat>
	}
	if (res == FR_OK) {
    1fca:	2800      	cmp	r0, #0
    1fcc:	d109      	bne.n	1fe2 <create_chain+0x90>
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
    1fce:	6923      	ldr	r3, [r4, #16]
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
    1fd0:	60e5      	str	r5, [r4, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    1fd2:	1c28      	adds	r0, r5, #0
    1fd4:	1c5a      	adds	r2, r3, #1
    1fd6:	d010      	beq.n	1ffa <create_chain+0xa8>
			fs->free_clust--;
    1fd8:	3b01      	subs	r3, #1
    1fda:	6123      	str	r3, [r4, #16]
			fs->fsi_flag = 1;
    1fdc:	2301      	movs	r3, #1
    1fde:	7163      	strb	r3, [r4, #5]
    1fe0:	e00b      	b.n	1ffa <create_chain+0xa8>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    1fe2:	3801      	subs	r0, #1
    1fe4:	4243      	negs	r3, r0
    1fe6:	4158      	adcs	r0, r3
    1fe8:	4240      	negs	r0, r0
    1fea:	2301      	movs	r3, #1
    1fec:	4318      	orrs	r0, r3
    1fee:	e004      	b.n	1ffa <create_chain+0xa8>
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1ff0:	2001      	movs	r0, #1
    1ff2:	e002      	b.n	1ffa <create_chain+0xa8>
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    1ff4:	2000      	movs	r0, #0
    1ff6:	e000      	b.n	1ffa <create_chain+0xa8>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    1ff8:	1c18      	adds	r0, r3, #0
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
	}

	return ncl;		/* Return new cluster number or error code */
}
    1ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ffc:	0fffffff 	.word	0x0fffffff

00002000 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    2000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2002:	9101      	str	r1, [sp, #4]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    2004:	88c7      	ldrh	r7, [r0, #6]
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    2006:	1c04      	adds	r4, r0, #0
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    2008:	3701      	adds	r7, #1
    200a:	b2bf      	uxth	r7, r7
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
    200c:	2604      	movs	r6, #4
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    200e:	2f00      	cmp	r7, #0
    2010:	d06c      	beq.n	20ec <dir_next+0xec>
    2012:	6903      	ldr	r3, [r0, #16]
    2014:	2b00      	cmp	r3, #0
    2016:	d069      	beq.n	20ec <dir_next+0xec>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    2018:	073a      	lsls	r2, r7, #28
    201a:	d15c      	bne.n	20d6 <dir_next+0xd6>
		dj->sect++;					/* Next sector */

		if (dj->clust == 0) {	/* Static table */
    201c:	68c1      	ldr	r1, [r0, #12]
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */
    201e:	3301      	adds	r3, #1
    2020:	6103      	str	r3, [r0, #16]
    2022:	6800      	ldr	r0, [r0, #0]

		if (dj->clust == 0) {	/* Static table */
    2024:	2900      	cmp	r1, #0
    2026:	d103      	bne.n	2030 <dir_next+0x30>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    2028:	8903      	ldrh	r3, [r0, #8]
    202a:	42bb      	cmp	r3, r7
    202c:	d853      	bhi.n	20d6 <dir_next+0xd6>
    202e:	e05d      	b.n	20ec <dir_next+0xec>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    2030:	7883      	ldrb	r3, [r0, #2]
    2032:	093a      	lsrs	r2, r7, #4
    2034:	3b01      	subs	r3, #1
    2036:	421a      	tst	r2, r3
    2038:	d14d      	bne.n	20d6 <dir_next+0xd6>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    203a:	f7ff fe4d 	bl	1cd8 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
    203e:	2602      	movs	r6, #2
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    2040:	1c05      	adds	r5, r0, #0
				if (clst <= 1) return FR_INT_ERR;
    2042:	2801      	cmp	r0, #1
    2044:	d952      	bls.n	20ec <dir_next+0xec>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    2046:	3e01      	subs	r6, #1
    2048:	1c43      	adds	r3, r0, #1
    204a:	d04f      	beq.n	20ec <dir_next+0xec>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    204c:	6820      	ldr	r0, [r4, #0]
    204e:	69c3      	ldr	r3, [r0, #28]
    2050:	429d      	cmp	r5, r3
    2052:	d33a      	bcc.n	20ca <dir_next+0xca>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    2054:	9a01      	ldr	r2, [sp, #4]
    2056:	3603      	adds	r6, #3
    2058:	2a00      	cmp	r2, #0
    205a:	d047      	beq.n	20ec <dir_next+0xec>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    205c:	68e1      	ldr	r1, [r4, #12]
    205e:	f7ff ff78 	bl	1f52 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    2062:	3603      	adds	r6, #3
    2064:	1e05      	subs	r5, r0, #0
    2066:	d041      	beq.n	20ec <dir_next+0xec>
					if (clst == 1) return FR_INT_ERR;
    2068:	3e05      	subs	r6, #5
    206a:	2801      	cmp	r0, #1
    206c:	d03e      	beq.n	20ec <dir_next+0xec>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    206e:	3e01      	subs	r6, #1
    2070:	1c43      	adds	r3, r0, #1
    2072:	d03b      	beq.n	20ec <dir_next+0xec>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    2074:	6820      	ldr	r0, [r4, #0]
    2076:	2100      	movs	r1, #0
    2078:	f7ff fd74 	bl	1b64 <move_window>
    207c:	9001      	str	r0, [sp, #4]
    207e:	2800      	cmp	r0, #0
    2080:	d134      	bne.n	20ec <dir_next+0xec>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    2082:	6820      	ldr	r0, [r4, #0]
    2084:	2280      	movs	r2, #128	; 0x80
    2086:	3034      	adds	r0, #52	; 0x34
    2088:	9901      	ldr	r1, [sp, #4]
    208a:	0092      	lsls	r2, r2, #2
    208c:	f7ff faed 	bl	166a <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    2090:	6826      	ldr	r6, [r4, #0]
    2092:	1c29      	adds	r1, r5, #0
    2094:	1c30      	adds	r0, r6, #0
    2096:	f7ff fe12 	bl	1cbe <clust2sect>
    209a:	6330      	str	r0, [r6, #48]	; 0x30
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    209c:	9e01      	ldr	r6, [sp, #4]
    209e:	e00d      	b.n	20bc <dir_next+0xbc>
						dj->fs->wflag = 1;
    20a0:	2201      	movs	r2, #1
    20a2:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    20a4:	6820      	ldr	r0, [r4, #0]
    20a6:	2100      	movs	r1, #0
    20a8:	f7ff fd5c 	bl	1b64 <move_window>
    20ac:	2800      	cmp	r0, #0
    20ae:	d11c      	bne.n	20ea <dir_next+0xea>
						dj->fs->winsect++;
    20b0:	6823      	ldr	r3, [r4, #0]
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    20b2:	3601      	adds	r6, #1
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
    20b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    20b6:	b2f6      	uxtb	r6, r6
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
    20b8:	3201      	adds	r2, #1
    20ba:	631a      	str	r2, [r3, #48]	; 0x30
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    20bc:	6823      	ldr	r3, [r4, #0]
    20be:	789a      	ldrb	r2, [r3, #2]
    20c0:	42b2      	cmp	r2, r6
    20c2:	d8ed      	bhi.n	20a0 <dir_next+0xa0>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    20c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    20c6:	1b96      	subs	r6, r2, r6
    20c8:	631e      	str	r6, [r3, #48]	; 0x30
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    20ca:	60e5      	str	r5, [r4, #12]
				dj->sect = clust2sect(dj->fs, clst);
    20cc:	6820      	ldr	r0, [r4, #0]
    20ce:	1c29      	adds	r1, r5, #0
    20d0:	f7ff fdf5 	bl	1cbe <clust2sect>
    20d4:	6120      	str	r0, [r4, #16]
			}
		}
	}

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    20d6:	6823      	ldr	r3, [r4, #0]
    20d8:	220f      	movs	r2, #15
				dj->sect = clust2sect(dj->fs, clst);
			}
		}
	}

	dj->index = i;
    20da:	80e7      	strh	r7, [r4, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    20dc:	4017      	ands	r7, r2
    20de:	3334      	adds	r3, #52	; 0x34
    20e0:	017f      	lsls	r7, r7, #5
    20e2:	19df      	adds	r7, r3, r7
    20e4:	6167      	str	r7, [r4, #20]

	return FR_OK;
    20e6:	2600      	movs	r6, #0
    20e8:	e000      	b.n	20ec <dir_next+0xec>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    20ea:	2601      	movs	r6, #1

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;

	return FR_OK;
}
    20ec:	1c30      	adds	r0, r6, #0
    20ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000020f0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    20f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    20f2:	780b      	ldrb	r3, [r1, #0]
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    20f4:	b085      	sub	sp, #20
    20f6:	1c04      	adds	r4, r0, #0
    20f8:	1c0d      	adds	r5, r1, #0
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    20fa:	2b5c      	cmp	r3, #92	; 0x5c
    20fc:	d001      	beq.n	2102 <follow_path+0x12>
    20fe:	2b2f      	cmp	r3, #47	; 0x2f
    2100:	d102      	bne.n	2108 <follow_path+0x18>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
    2102:	3501      	adds	r5, #1
    2104:	2300      	movs	r3, #0
    2106:	e001      	b.n	210c <follow_path+0x1c>
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
    2108:	6803      	ldr	r3, [r0, #0]
    210a:	699b      	ldr	r3, [r3, #24]
    210c:	60a3      	str	r3, [r4, #8]
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    210e:	782b      	ldrb	r3, [r5, #0]
    2110:	2b1f      	cmp	r3, #31
    2112:	d807      	bhi.n	2124 <follow_path+0x34>
		res = dir_sdi(dj, 0);
    2114:	1c20      	adds	r0, r4, #0
    2116:	2100      	movs	r1, #0
    2118:	f7ff fe45 	bl	1da6 <dir_sdi>
		dj->dir = 0;
    211c:	2300      	movs	r3, #0
    211e:	6163      	str	r3, [r4, #20]
    2120:	e109      	b.n	2336 <follow_path+0x246>
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    2122:	3501      	adds	r5, #1
    2124:	782f      	ldrb	r7, [r5, #0]
    2126:	2f5c      	cmp	r7, #92	; 0x5c
    2128:	d0fb      	beq.n	2122 <follow_path+0x32>
    212a:	3f2f      	subs	r7, #47	; 0x2f
    212c:	427b      	negs	r3, r7
    212e:	415f      	adcs	r7, r3
    2130:	2f00      	cmp	r7, #0
    2132:	d1f6      	bne.n	2122 <follow_path+0x32>
	sfn = dj->fn;
    2134:	69a6      	ldr	r6, [r4, #24]
	mem_set(sfn, ' ', 11);
    2136:	2120      	movs	r1, #32
    2138:	1c30      	adds	r0, r6, #0
    213a:	220b      	movs	r2, #11
    213c:	f7ff fa95 	bl	166a <mem_set>
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    2140:	782b      	ldrb	r3, [r5, #0]
    2142:	2b2e      	cmp	r3, #46	; 0x2e
    2144:	d007      	beq.n	2156 <follow_path+0x66>
    2146:	2008      	movs	r0, #8
    2148:	9701      	str	r7, [sp, #4]
    214a:	9002      	str	r0, [sp, #8]
    214c:	1c3a      	adds	r2, r7, #0
    214e:	1c39      	adds	r1, r7, #0
    2150:	46a4      	mov	ip, r4
    2152:	9500      	str	r5, [sp, #0]
    2154:	e017      	b.n	2186 <follow_path+0x96>
    2156:	1c32      	adds	r2, r6, #0
		for (;;) {
			c = (BYTE)p[si++];
    2158:	5deb      	ldrb	r3, [r5, r7]
    215a:	3701      	adds	r7, #1
			if (c != '.' || si >= 3) break;
    215c:	2f02      	cmp	r7, #2
    215e:	d804      	bhi.n	216a <follow_path+0x7a>
    2160:	2b2e      	cmp	r3, #46	; 0x2e
    2162:	d102      	bne.n	216a <follow_path+0x7a>
			sfn[i++] = c;
    2164:	7013      	strb	r3, [r2, #0]
    2166:	3201      	adds	r2, #1
    2168:	e7f6      	b.n	2158 <follow_path+0x68>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    216a:	2b5c      	cmp	r3, #92	; 0x5c
    216c:	d004      	beq.n	2178 <follow_path+0x88>
    216e:	2b2f      	cmp	r3, #47	; 0x2f
    2170:	d002      	beq.n	2178 <follow_path+0x88>
    2172:	2b20      	cmp	r3, #32
    2174:	d900      	bls.n	2178 <follow_path+0x88>
    2176:	e0db      	b.n	2330 <follow_path+0x240>
		*path = &p[si];									/* Return pointer to the next segment */
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    2178:	2220      	movs	r2, #32
			c = (BYTE)p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
		*path = &p[si];									/* Return pointer to the next segment */
    217a:	19ed      	adds	r5, r5, r7
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    217c:	4293      	cmp	r3, r2
    217e:	d800      	bhi.n	2182 <follow_path+0x92>
    2180:	3204      	adds	r2, #4
    2182:	72f2      	strb	r2, [r6, #11]
    2184:	e0d9      	b.n	233a <follow_path+0x24a>
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    2186:	9c00      	ldr	r4, [sp, #0]
    2188:	5c63      	ldrb	r3, [r4, r1]
    218a:	3101      	adds	r1, #1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    218c:	1c18      	adds	r0, r3, #0
    218e:	382f      	subs	r0, #47	; 0x2f
    2190:	4244      	negs	r4, r0
    2192:	4160      	adcs	r0, r4
    2194:	2800      	cmp	r0, #0
    2196:	d166      	bne.n	2266 <follow_path+0x176>
    2198:	2420      	movs	r4, #32
    219a:	429c      	cmp	r4, r3
    219c:	4140      	adcs	r0, r0
    219e:	2800      	cmp	r0, #0
    21a0:	d161      	bne.n	2266 <follow_path+0x176>
    21a2:	2b5c      	cmp	r3, #92	; 0x5c
    21a4:	d068      	beq.n	2278 <follow_path+0x188>
		if (c == '.' || i >= ni) {
    21a6:	1c18      	adds	r0, r3, #0
    21a8:	382e      	subs	r0, #46	; 0x2e
    21aa:	4244      	negs	r4, r0
    21ac:	4160      	adcs	r0, r4
    21ae:	2800      	cmp	r0, #0
    21b0:	d104      	bne.n	21bc <follow_path+0xcc>
    21b2:	9d02      	ldr	r5, [sp, #8]
    21b4:	42af      	cmp	r7, r5
    21b6:	4140      	adcs	r0, r0
    21b8:	2800      	cmp	r0, #0
    21ba:	d00c      	beq.n	21d6 <follow_path+0xe6>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    21bc:	2b2e      	cmp	r3, #46	; 0x2e
    21be:	d000      	beq.n	21c2 <follow_path+0xd2>
    21c0:	e0b6      	b.n	2330 <follow_path+0x240>
    21c2:	9802      	ldr	r0, [sp, #8]
    21c4:	2808      	cmp	r0, #8
    21c6:	d000      	beq.n	21ca <follow_path+0xda>
    21c8:	e0b2      	b.n	2330 <follow_path+0x240>
			i = 8; ni = 11;
			b <<= 2; continue;
    21ca:	0092      	lsls	r2, r2, #2
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    21cc:	3b23      	subs	r3, #35	; 0x23
			b <<= 2; continue;
    21ce:	b2d2      	uxtb	r2, r2
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    21d0:	2708      	movs	r7, #8
    21d2:	9302      	str	r3, [sp, #8]
    21d4:	e7d7      	b.n	2186 <follow_path+0x96>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char? */
    21d6:	b258      	sxtb	r0, r3
    21d8:	2800      	cmp	r0, #0
    21da:	da01      	bge.n	21e0 <follow_path+0xf0>
			b |= 3;						/* Eliminate NT flag */
    21dc:	2003      	movs	r0, #3
    21de:	4302      	orrs	r2, r0
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
    21e0:	1c18      	adds	r0, r3, #0
    21e2:	3020      	adds	r0, #32
    21e4:	b2c0      	uxtb	r0, r0
    21e6:	2400      	movs	r4, #0
    21e8:	251c      	movs	r5, #28
    21ea:	4285      	cmp	r5, r0
    21ec:	4164      	adcs	r4, r4
    21ee:	1c20      	adds	r0, r4, #0
    21f0:	9403      	str	r4, [sp, #12]
    21f2:	2800      	cmp	r0, #0
    21f4:	d104      	bne.n	2200 <follow_path+0x110>
    21f6:	1c18      	adds	r0, r3, #0
    21f8:	307f      	adds	r0, #127	; 0x7f
    21fa:	b2c0      	uxtb	r0, r0
    21fc:	281e      	cmp	r0, #30
    21fe:	d815      	bhi.n	222c <follow_path+0x13c>
			d = (BYTE)p[si++];			/* Get 2nd byte */
    2200:	9c00      	ldr	r4, [sp, #0]
    2202:	5c60      	ldrb	r0, [r4, r1]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    2204:	1c04      	adds	r4, r0, #0
    2206:	3c80      	subs	r4, #128	; 0x80
    2208:	b2e4      	uxtb	r4, r4
    220a:	2c7c      	cmp	r4, #124	; 0x7c
    220c:	d904      	bls.n	2218 <follow_path+0x128>
    220e:	1c04      	adds	r4, r0, #0
    2210:	3c40      	subs	r4, #64	; 0x40
    2212:	2c3e      	cmp	r4, #62	; 0x3e
    2214:	d900      	bls.n	2218 <follow_path+0x128>
    2216:	e08b      	b.n	2330 <follow_path+0x240>
    2218:	9c02      	ldr	r4, [sp, #8]
    221a:	3c01      	subs	r4, #1
    221c:	42a7      	cmp	r7, r4
    221e:	d300      	bcc.n	2222 <follow_path+0x132>
    2220:	e086      	b.n	2330 <follow_path+0x240>
				return FR_INVALID_NAME;
			sfn[i++] = c;
    2222:	55f3      	strb	r3, [r6, r7]
    2224:	3701      	adds	r7, #1
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    2226:	3101      	adds	r1, #1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
    2228:	55f0      	strb	r0, [r6, r7]
    222a:	e01a      	b.n	2262 <follow_path+0x172>
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    222c:	4846      	ldr	r0, [pc, #280]	; (2348 <follow_path+0x258>)
    222e:	9d00      	ldr	r5, [sp, #0]
    2230:	e000      	b.n	2234 <follow_path+0x144>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    2232:	3001      	adds	r0, #1
    2234:	7804      	ldrb	r4, [r0, #0]
    2236:	2c00      	cmp	r4, #0
    2238:	d002      	beq.n	2240 <follow_path+0x150>
    223a:	429c      	cmp	r4, r3
    223c:	d1f9      	bne.n	2232 <follow_path+0x142>
    223e:	e077      	b.n	2330 <follow_path+0x240>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    2240:	1c18      	adds	r0, r3, #0
    2242:	3841      	subs	r0, #65	; 0x41
    2244:	9500      	str	r5, [sp, #0]
    2246:	2819      	cmp	r0, #25
    2248:	d802      	bhi.n	2250 <follow_path+0x160>
				b |= 2;
    224a:	2002      	movs	r0, #2
    224c:	4302      	orrs	r2, r0
    224e:	e007      	b.n	2260 <follow_path+0x170>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    2250:	1c18      	adds	r0, r3, #0
    2252:	3861      	subs	r0, #97	; 0x61
    2254:	2819      	cmp	r0, #25
    2256:	d803      	bhi.n	2260 <follow_path+0x170>
					b |= 1; c -= 0x20;
    2258:	2001      	movs	r0, #1
    225a:	3b20      	subs	r3, #32
    225c:	4302      	orrs	r2, r0
    225e:	b2db      	uxtb	r3, r3
				}
			}
			sfn[i++] = c;
    2260:	55f3      	strb	r3, [r6, r7]
    2262:	3701      	adds	r7, #1
    2264:	e78f      	b.n	2186 <follow_path+0x96>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    2266:	2020      	movs	r0, #32
    2268:	9101      	str	r1, [sp, #4]
    226a:	2100      	movs	r1, #0
    226c:	4298      	cmp	r0, r3
    226e:	4149      	adcs	r1, r1
    2270:	4664      	mov	r4, ip
    2272:	9d00      	ldr	r5, [sp, #0]
    2274:	0088      	lsls	r0, r1, #2
    2276:	e002      	b.n	227e <follow_path+0x18e>
    2278:	9d00      	ldr	r5, [sp, #0]
    227a:	9101      	str	r1, [sp, #4]
    227c:	4664      	mov	r4, ip

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    227e:	2f00      	cmp	r7, #0
    2280:	d056      	beq.n	2330 <follow_path+0x240>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    2282:	7833      	ldrb	r3, [r6, #0]
    2284:	2be5      	cmp	r3, #229	; 0xe5
    2286:	d101      	bne.n	228c <follow_path+0x19c>
    2288:	3be0      	subs	r3, #224	; 0xe0
    228a:	7033      	strb	r3, [r6, #0]

	if (ni == 8) b <<= 2;
    228c:	9b02      	ldr	r3, [sp, #8]
    228e:	2b08      	cmp	r3, #8
    2290:	d101      	bne.n	2296 <follow_path+0x1a6>
    2292:	0092      	lsls	r2, r2, #2
    2294:	b2d2      	uxtb	r2, r2
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    2296:	2303      	movs	r3, #3
    2298:	4013      	ands	r3, r2
    229a:	2b01      	cmp	r3, #1
    229c:	d101      	bne.n	22a2 <follow_path+0x1b2>
    229e:	330f      	adds	r3, #15
    22a0:	4318      	orrs	r0, r3
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    22a2:	230c      	movs	r3, #12
    22a4:	401a      	ands	r2, r3
    22a6:	2a04      	cmp	r2, #4
    22a8:	d101      	bne.n	22ae <follow_path+0x1be>
    22aa:	3b04      	subs	r3, #4
    22ac:	4318      	orrs	r0, r3
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    22ae:	9901      	ldr	r1, [sp, #4]

	if (ni == 8) b <<= 2;
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */

	sfn[NS] = c;		/* Store NT flag, File name is created */
    22b0:	72f0      	strb	r0, [r6, #11]
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    22b2:	186d      	adds	r5, r5, r1
    22b4:	e041      	b.n	233a <follow_path+0x24a>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    22b6:	6820      	ldr	r0, [r4, #0]
    22b8:	6921      	ldr	r1, [r4, #16]
    22ba:	f7ff fc53 	bl	1b64 <move_window>
		if (res != FR_OK) break;
    22be:	2800      	cmp	r0, #0
    22c0:	d116      	bne.n	22f0 <follow_path+0x200>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    22c2:	6962      	ldr	r2, [r4, #20]
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    22c4:	7813      	ldrb	r3, [r2, #0]
    22c6:	2b00      	cmp	r3, #0
    22c8:	d011      	beq.n	22ee <follow_path+0x1fe>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    22ca:	7ad3      	ldrb	r3, [r2, #11]
    22cc:	0719      	lsls	r1, r3, #28
    22ce:	d409      	bmi.n	22e4 <follow_path+0x1f4>
    22d0:	69a1      	ldr	r1, [r4, #24]
    22d2:	1c03      	adds	r3, r0, #0
    22d4:	e001      	b.n	22da <follow_path+0x1ea>
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    22d6:	2b0b      	cmp	r3, #11
    22d8:	d00a      	beq.n	22f0 <follow_path+0x200>
    22da:	5cd7      	ldrb	r7, [r2, r3]
    22dc:	5cce      	ldrb	r6, [r1, r3]
    22de:	3301      	adds	r3, #1
    22e0:	42b7      	cmp	r7, r6
    22e2:	d0f8      	beq.n	22d6 <follow_path+0x1e6>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    22e4:	1c20      	adds	r0, r4, #0
    22e6:	2100      	movs	r1, #0
    22e8:	f7ff fe8a 	bl	2000 <dir_next>
    22ec:	e029      	b.n	2342 <follow_path+0x252>
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    22ee:	2004      	movs	r0, #4
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    22f0:	69a3      	ldr	r3, [r4, #24]
    22f2:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    22f4:	2800      	cmp	r0, #0
    22f6:	d00f      	beq.n	2318 <follow_path+0x228>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
    22f8:	2804      	cmp	r0, #4
    22fa:	d11c      	bne.n	2336 <follow_path+0x246>
    22fc:	1c1a      	adds	r2, r3, #0
    22fe:	4002      	ands	r2, r0
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
    2300:	0699      	lsls	r1, r3, #26
    2302:	d506      	bpl.n	2312 <follow_path+0x222>
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
    2304:	3804      	subs	r0, #4
    2306:	60a0      	str	r0, [r4, #8]
    2308:	6160      	str	r0, [r4, #20]
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
    230a:	4282      	cmp	r2, r0
    230c:	d100      	bne.n	2310 <follow_path+0x220>
    230e:	e709      	b.n	2124 <follow_path+0x34>
    2310:	e011      	b.n	2336 <follow_path+0x246>
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    2312:	2a00      	cmp	r2, #0
    2314:	d00e      	beq.n	2334 <follow_path+0x244>
    2316:	e00e      	b.n	2336 <follow_path+0x246>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    2318:	075a      	lsls	r2, r3, #29
    231a:	d40c      	bmi.n	2336 <follow_path+0x246>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    231c:	6961      	ldr	r1, [r4, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    231e:	7acb      	ldrb	r3, [r1, #11]
    2320:	06d8      	lsls	r0, r3, #27
    2322:	d507      	bpl.n	2334 <follow_path+0x244>
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(djo.fs, res);
}
    2324:	6823      	ldr	r3, [r4, #0]
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ld_clust(dj->fs, dir);
    2326:	7818      	ldrb	r0, [r3, #0]
    2328:	f7ff fcba 	bl	1ca0 <ld_clust.clone.0>
    232c:	60a0      	str	r0, [r4, #8]
    232e:	e6f9      	b.n	2124 <follow_path+0x34>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    2330:	2006      	movs	r0, #6
    2332:	e000      	b.n	2336 <follow_path+0x246>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
    2334:	2005      	movs	r0, #5
			dj->sclust = ld_clust(dj->fs, dir);
		}
	}

	return res;
}
    2336:	b005      	add	sp, #20
    2338:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    233a:	1c20      	adds	r0, r4, #0
    233c:	2100      	movs	r1, #0
    233e:	f7ff fd32 	bl	1da6 <dir_sdi>
	if (res != FR_OK) return res;
    2342:	2800      	cmp	r0, #0
    2344:	d0b7      	beq.n	22b6 <follow_path+0x1c6>
    2346:	e7d3      	b.n	22f0 <follow_path+0x200>
    2348:	000037a8 	.word	0x000037a8

0000234c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    234c:	b570      	push	{r4, r5, r6, lr}
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
    234e:	2100      	movs	r1, #0
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    2350:	1c04      	adds	r4, r0, #0
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
    2352:	f7ff fd28 	bl	1da6 <dir_sdi>
	if (res == FR_OK) {
    2356:	1e05      	subs	r5, r0, #0
    2358:	d11e      	bne.n	2398 <dir_register+0x4c>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    235a:	6820      	ldr	r0, [r4, #0]
    235c:	6921      	ldr	r1, [r4, #16]
    235e:	f7ff fc01 	bl	1b64 <move_window>
			if (res != FR_OK) break;
    2362:	1e05      	subs	r5, r0, #0
    2364:	d118      	bne.n	2398 <dir_register+0x4c>
			c = *dj->dir;
    2366:	6963      	ldr	r3, [r4, #20]
    2368:	781b      	ldrb	r3, [r3, #0]
			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
    236a:	2b00      	cmp	r3, #0
    236c:	d016      	beq.n	239c <dir_register+0x50>
    236e:	2be5      	cmp	r3, #229	; 0xe5
    2370:	d014      	beq.n	239c <dir_register+0x50>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
    2372:	1c20      	adds	r0, r4, #0
    2374:	2101      	movs	r1, #1
    2376:	f7ff fe43 	bl	2000 <dir_next>
    237a:	e7ec      	b.n	2356 <dir_register+0xa>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    237c:	6966      	ldr	r6, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    237e:	1c29      	adds	r1, r5, #0
    2380:	1c30      	adds	r0, r6, #0
    2382:	2220      	movs	r2, #32
    2384:	f7ff f971 	bl	166a <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    2388:	220b      	movs	r2, #11
    238a:	1c30      	adds	r0, r6, #0
    238c:	69a1      	ldr	r1, [r4, #24]
    238e:	f7ff f963 	bl	1658 <mem_cpy>
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
    2392:	6823      	ldr	r3, [r4, #0]
    2394:	2201      	movs	r2, #1
    2396:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
}
    2398:	1c28      	adds	r0, r5, #0
    239a:	bd70      	pop	{r4, r5, r6, pc}
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    239c:	6820      	ldr	r0, [r4, #0]
    239e:	6921      	ldr	r1, [r4, #16]
    23a0:	f7ff fbe0 	bl	1b64 <move_window>
		if (res == FR_OK) {
    23a4:	1e05      	subs	r5, r0, #0
    23a6:	d1f7      	bne.n	2398 <dir_register+0x4c>
    23a8:	e7e8      	b.n	237c <dir_register+0x30>

000023aa <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    23aa:	b510      	push	{r4, lr}
    23ac:	1c04      	adds	r4, r0, #0
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
    23ae:	2304      	movs	r3, #4
	while (dj->sect) {
    23b0:	e013      	b.n	23da <dir_read+0x30>
		res = move_window(dj->fs, dj->sect);
    23b2:	6820      	ldr	r0, [r4, #0]
    23b4:	f7ff fbd6 	bl	1b64 <move_window>
		if (res != FR_OK) break;
    23b8:	2800      	cmp	r0, #0
    23ba:	d118      	bne.n	23ee <dir_read+0x44>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    23bc:	6963      	ldr	r3, [r4, #20]
		c = dir[DIR_Name];
    23be:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    23c0:	2a00      	cmp	r2, #0
    23c2:	d013      	beq.n	23ec <dir_read+0x42>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    23c4:	2ae5      	cmp	r2, #229	; 0xe5
    23c6:	d002      	beq.n	23ce <dir_read+0x24>
    23c8:	7adb      	ldrb	r3, [r3, #11]
    23ca:	071a      	lsls	r2, r3, #28
    23cc:	d50d      	bpl.n	23ea <dir_read+0x40>
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
    23ce:	1c20      	adds	r0, r4, #0
    23d0:	2100      	movs	r1, #0
    23d2:	f7ff fe15 	bl	2000 <dir_next>
		if (res != FR_OK) break;
    23d6:	1e03      	subs	r3, r0, #0
    23d8:	d109      	bne.n	23ee <dir_read+0x44>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    23da:	6921      	ldr	r1, [r4, #16]
    23dc:	2900      	cmp	r1, #0
    23de:	d1e8      	bne.n	23b2 <dir_read+0x8>
#endif
		res = dir_next(dj, 0);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    23e0:	1e18      	subs	r0, r3, #0
    23e2:	d002      	beq.n	23ea <dir_read+0x40>
    23e4:	2200      	movs	r2, #0
    23e6:	6122      	str	r2, [r4, #16]
    23e8:	1c18      	adds	r0, r3, #0

	return res;
}
    23ea:	bd10      	pop	{r4, pc}
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    23ec:	2004      	movs	r0, #4
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    23ee:	1c03      	adds	r3, r0, #0
    23f0:	e7f8      	b.n	23e4 <dir_read+0x3a>

000023f2 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    23f2:	b570      	push	{r4, r5, r6, lr}
    23f4:	1c04      	adds	r4, r0, #0
    23f6:	1c0d      	adds	r5, r1, #0
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    23f8:	2002      	movs	r0, #2
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    23fa:	2901      	cmp	r1, #1
    23fc:	d926      	bls.n	244c <remove_chain+0x5a>
    23fe:	69e3      	ldr	r3, [r4, #28]
    2400:	4299      	cmp	r1, r3
    2402:	d319      	bcc.n	2438 <remove_chain+0x46>
    2404:	e022      	b.n	244c <remove_chain+0x5a>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    2406:	1c20      	adds	r0, r4, #0
    2408:	1c29      	adds	r1, r5, #0
    240a:	f7ff fc65 	bl	1cd8 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
    240e:	1e06      	subs	r6, r0, #0
    2410:	d017      	beq.n	2442 <remove_chain+0x50>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    2412:	2e01      	cmp	r6, #1
    2414:	d017      	beq.n	2446 <remove_chain+0x54>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    2416:	1c72      	adds	r2, r6, #1
    2418:	d017      	beq.n	244a <remove_chain+0x58>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    241a:	1c20      	adds	r0, r4, #0
    241c:	1c29      	adds	r1, r5, #0
    241e:	2200      	movs	r2, #0
    2420:	f7ff fd1b 	bl	1e5a <put_fat>
			if (res != FR_OK) break;
    2424:	2800      	cmp	r0, #0
    2426:	d111      	bne.n	244c <remove_chain+0x5a>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    2428:	6923      	ldr	r3, [r4, #16]
    242a:	1c5a      	adds	r2, r3, #1
    242c:	d003      	beq.n	2436 <remove_chain+0x44>
				fs->free_clust++;
    242e:	3301      	adds	r3, #1
    2430:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    2432:	2301      	movs	r3, #1
    2434:	7163      	strb	r3, [r4, #5]
    2436:	1c35      	adds	r5, r6, #0
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    2438:	69e3      	ldr	r3, [r4, #28]
    243a:	429d      	cmp	r5, r3
    243c:	d3e3      	bcc.n	2406 <remove_chain+0x14>
    243e:	2000      	movs	r0, #0
    2440:	e004      	b.n	244c <remove_chain+0x5a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
    2442:	1c30      	adds	r0, r6, #0
    2444:	e002      	b.n	244c <remove_chain+0x5a>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    2446:	2002      	movs	r0, #2
    2448:	e000      	b.n	244c <remove_chain+0x5a>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    244a:	2001      	movs	r0, #1
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    244c:	bd70      	pop	{r4, r5, r6, pc}

0000244e <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    244e:	b500      	push	{lr}
    2450:	1c03      	adds	r3, r0, #0
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    2452:	200b      	movs	r0, #11
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    2454:	2b00      	cmp	r3, #0
    2456:	d10a      	bne.n	246e <f_mount+0x20>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];			/* Get current fs object */
    2458:	4805      	ldr	r0, [pc, #20]	; (2470 <f_mount+0x22>)
    245a:	6842      	ldr	r2, [r0, #4]

	if (rfs) {
    245c:	2a00      	cmp	r2, #0
    245e:	d000      	beq.n	2462 <f_mount+0x14>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    2460:	7013      	strb	r3, [r2, #0]
	}

	if (fs) {
    2462:	2900      	cmp	r1, #0
    2464:	d001      	beq.n	246a <f_mount+0x1c>
		fs->fs_type = 0;		/* Clear new fs object */
    2466:	2300      	movs	r3, #0
    2468:	700b      	strb	r3, [r1, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    246a:	6041      	str	r1, [r0, #4]

	return FR_OK;
    246c:	2000      	movs	r0, #0
}
    246e:	bd00      	pop	{pc}
    2470:	10000120 	.word	0x10000120

00002474 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2474:	b5f0      	push	{r4, r5, r6, r7, lr}
    2476:	b08f      	sub	sp, #60	; 0x3c
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    2478:	2309      	movs	r3, #9
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    247a:	1c05      	adds	r5, r0, #0
    247c:	9103      	str	r1, [sp, #12]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    247e:	9301      	str	r3, [sp, #4]
    2480:	2800      	cmp	r0, #0
    2482:	d100      	bne.n	2486 <f_open+0x12>
    2484:	e090      	b.n	25a8 <f_open+0x134>
	fp->fs = 0;			/* Clear file object */
    2486:	3b09      	subs	r3, #9
    2488:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    248a:	1c16      	adds	r6, r2, #0
    248c:	331f      	adds	r3, #31
    248e:	401e      	ands	r6, r3
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    2490:	1c32      	adds	r2, r6, #0
    2492:	3b1e      	subs	r3, #30
    2494:	439a      	bics	r2, r3
    2496:	a803      	add	r0, sp, #12
    2498:	a904      	add	r1, sp, #16
    249a:	f7ff f995 	bl	17c8 <chk_mounted>
    249e:	9001      	str	r0, [sp, #4]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
    24a0:	2800      	cmp	r0, #0
    24a2:	d000      	beq.n	24a6 <f_open+0x32>
    24a4:	e080      	b.n	25a8 <f_open+0x134>
		INIT_BUF(dj);
    24a6:	ab0b      	add	r3, sp, #44	; 0x2c
		res = follow_path(&dj, path);	/* Follow the file path */
    24a8:	a804      	add	r0, sp, #16
    24aa:	9903      	ldr	r1, [sp, #12]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
    24ac:	930a      	str	r3, [sp, #40]	; 0x28
		res = follow_path(&dj, path);	/* Follow the file path */
    24ae:	f7ff fe1f 	bl	20f0 <follow_path>
		dir = dj.dir;
    24b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    24b4:	2800      	cmp	r0, #0
    24b6:	d102      	bne.n	24be <f_open+0x4a>
			if (!dir)	/* Current dir itself */
    24b8:	2c00      	cmp	r4, #0
    24ba:	d100      	bne.n	24be <f_open+0x4a>
				res = FR_INVALID_NAME;
    24bc:	3006      	adds	r0, #6
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    24be:	231c      	movs	r3, #28
    24c0:	421e      	tst	r6, r3
    24c2:	d045      	beq.n	2550 <f_open+0xdc>
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
    24c4:	2800      	cmp	r0, #0
    24c6:	d00a      	beq.n	24de <f_open+0x6a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    24c8:	2804      	cmp	r0, #4
    24ca:	d102      	bne.n	24d2 <f_open+0x5e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    24cc:	a804      	add	r0, sp, #16
    24ce:	f7ff ff3d 	bl	234c <dir_register>
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
    24d2:	9c09      	ldr	r4, [sp, #36]	; 0x24
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    24d4:	2800      	cmp	r0, #0
    24d6:	d166      	bne.n	25a6 <f_open+0x132>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    24d8:	2308      	movs	r3, #8
    24da:	431e      	orrs	r6, r3
    24dc:	e007      	b.n	24ee <f_open+0x7a>
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    24de:	7ae2      	ldrb	r2, [r4, #11]
    24e0:	2311      	movs	r3, #17
					res = FR_DENIED;
    24e2:	2007      	movs	r0, #7
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    24e4:	421a      	tst	r2, r3
    24e6:	d15e      	bne.n	25a6 <f_open+0x132>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
    24e8:	3001      	adds	r0, #1
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    24ea:	0772      	lsls	r2, r6, #29
    24ec:	d45b      	bmi.n	25a6 <f_open+0x132>
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    24ee:	0733      	lsls	r3, r6, #28
    24f0:	d539      	bpl.n	2566 <f_open+0xf2>
				dw = get_fattime();					/* Created time */
    24f2:	f7fe fe35 	bl	1160 <get_fattime>
				ST_DWORD(dir+DIR_CrtTime, dw);
    24f6:	0a03      	lsrs	r3, r0, #8
				dir[DIR_Attr] = 0;					/* Reset attribute */
    24f8:	2700      	movs	r7, #0
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
				dw = get_fattime();					/* Created time */
				ST_DWORD(dir+DIR_CrtTime, dw);
    24fa:	73a0      	strb	r0, [r4, #14]
    24fc:	73e3      	strb	r3, [r4, #15]
    24fe:	0c03      	lsrs	r3, r0, #16
    2500:	0e00      	lsrs	r0, r0, #24
    2502:	7423      	strb	r3, [r4, #16]
    2504:	7460      	strb	r0, [r4, #17]
				dir[DIR_Attr] = 0;					/* Reset attribute */
    2506:	72e7      	strb	r7, [r4, #11]
				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    2508:	7727      	strb	r7, [r4, #28]
    250a:	7767      	strb	r7, [r4, #29]
    250c:	77a7      	strb	r7, [r4, #30]
    250e:	77e7      	strb	r7, [r4, #31]
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(djo.fs, res);
}
    2510:	9b04      	ldr	r3, [sp, #16]
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
				dw = get_fattime();					/* Created time */
				ST_DWORD(dir+DIR_CrtTime, dw);
				dir[DIR_Attr] = 0;					/* Reset attribute */
				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
				cl = ld_clust(dj.fs, dir);			/* Get start cluster */
    2512:	1c21      	adds	r1, r4, #0
    2514:	7818      	ldrb	r0, [r3, #0]
    2516:	f7ff fbc3 	bl	1ca0 <ld_clust.clone.0>
				st_clust(dir, 0);					/* cluster = 0 */
    251a:	1c39      	adds	r1, r7, #0
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
				dw = get_fattime();					/* Created time */
				ST_DWORD(dir+DIR_CrtTime, dw);
				dir[DIR_Attr] = 0;					/* Reset attribute */
				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
				cl = ld_clust(dj.fs, dir);			/* Get start cluster */
    251c:	9002      	str	r0, [sp, #8]
				st_clust(dir, 0);					/* cluster = 0 */
    251e:	1c20      	adds	r0, r4, #0
    2520:	f7ff f8aa 	bl	1678 <st_clust>
				dj.fs->wflag = 1;
    2524:	9804      	ldr	r0, [sp, #16]
    2526:	2301      	movs	r3, #1
    2528:	7103      	strb	r3, [r0, #4]
				if (cl) {							/* Remove the cluster chain if exist */
    252a:	9b02      	ldr	r3, [sp, #8]
    252c:	42bb      	cmp	r3, r7
    252e:	d01a      	beq.n	2566 <f_open+0xf2>
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
    2530:	1c19      	adds	r1, r3, #0
				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
				cl = ld_clust(dj.fs, dir);			/* Get start cluster */
				st_clust(dir, 0);					/* cluster = 0 */
				dj.fs->wflag = 1;
				if (cl) {							/* Remove the cluster chain if exist */
					dw = dj.fs->winsect;
    2532:	6b07      	ldr	r7, [r0, #48]	; 0x30
					res = remove_chain(dj.fs, cl);
    2534:	f7ff ff5d 	bl	23f2 <remove_chain>
					if (res == FR_OK) {
    2538:	2800      	cmp	r0, #0
    253a:	d134      	bne.n	25a6 <f_open+0x132>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    253c:	9b02      	ldr	r3, [sp, #8]
    253e:	9804      	ldr	r0, [sp, #16]
    2540:	3b01      	subs	r3, #1
    2542:	60c3      	str	r3, [r0, #12]
						res = move_window(dj.fs, dw);
    2544:	1c39      	adds	r1, r7, #0
    2546:	f7ff fb0d 	bl	1b64 <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
    254a:	2800      	cmp	r0, #0
    254c:	d00b      	beq.n	2566 <f_open+0xf2>
    254e:	e02a      	b.n	25a6 <f_open+0x132>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {						/* Follow succeeded */
    2550:	2800      	cmp	r0, #0
    2552:	d128      	bne.n	25a6 <f_open+0x132>
				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    2554:	7ae3      	ldrb	r3, [r4, #11]
					res = FR_NO_FILE;
    2556:	3004      	adds	r0, #4
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {						/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    2558:	06da      	lsls	r2, r3, #27
    255a:	d424      	bmi.n	25a6 <f_open+0x132>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    255c:	07b2      	lsls	r2, r6, #30
    255e:	d502      	bpl.n	2566 <f_open+0xf2>
						res = FR_DENIED;
    2560:	3003      	adds	r0, #3
		else {	/* Open an existing file */
			if (res == FR_OK) {						/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    2562:	07da      	lsls	r2, r3, #31
    2564:	d41f      	bmi.n	25a6 <f_open+0x132>
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    2566:	0733      	lsls	r3, r6, #28
    2568:	d501      	bpl.n	256e <f_open+0xfa>
				mode |= FA__WRITTEN;
    256a:	2320      	movs	r3, #32
    256c:	431e      	orrs	r6, r3
			fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    256e:	9f04      	ldr	r7, [sp, #16]
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    2570:	1c21      	adds	r1, r4, #0
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
				mode |= FA__WRITTEN;
			fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    2572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			fp->dir_ptr = dir;
    2574:	622c      	str	r4, [r5, #32]
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
				mode |= FA__WRITTEN;
			fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    2576:	61eb      	str	r3, [r5, #28]
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    2578:	71ae      	strb	r6, [r5, #6]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    257a:	7838      	ldrb	r0, [r7, #0]
    257c:	f7ff fb90 	bl	1ca0 <ld_clust.clone.0>
    2580:	6128      	str	r0, [r5, #16]
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2582:	7fe2      	ldrb	r2, [r4, #31]
    2584:	7fa3      	ldrb	r3, [r4, #30]
    2586:	0612      	lsls	r2, r2, #24
    2588:	041b      	lsls	r3, r3, #16
    258a:	4313      	orrs	r3, r2
    258c:	7f22      	ldrb	r2, [r4, #28]
    258e:	4313      	orrs	r3, r2
    2590:	7f62      	ldrb	r2, [r4, #29]
			fp->fptr = 0;						/* File pointer */
			fp->dsect = 0;
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    2592:	602f      	str	r7, [r5, #0]
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2594:	0212      	lsls	r2, r2, #8
    2596:	4313      	orrs	r3, r2
    2598:	60eb      	str	r3, [r5, #12]
			fp->fptr = 0;						/* File pointer */
    259a:	2300      	movs	r3, #0
    259c:	60ab      	str	r3, [r5, #8]
			fp->dsect = 0;
    259e:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    25a0:	88fb      	ldrh	r3, [r7, #6]
    25a2:	80ab      	strh	r3, [r5, #4]
    25a4:	e000      	b.n	25a8 <f_open+0x134>
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    25a6:	9001      	str	r0, [sp, #4]
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
		}
	}

	LEAVE_FF(dj.fs, res);
}
    25a8:	9801      	ldr	r0, [sp, #4]
    25aa:	b00f      	add	sp, #60	; 0x3c
    25ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

000025ae <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    25ae:	b5f0      	push	{r4, r5, r6, r7, lr}
    25b0:	1c1e      	adds	r6, r3, #0
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Clear read byte counter */
    25b2:	2300      	movs	r3, #0
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    25b4:	b087      	sub	sp, #28
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Clear read byte counter */
    25b6:	6033      	str	r3, [r6, #0]
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    25b8:	1c04      	adds	r4, r0, #0
    25ba:	1c0f      	adds	r7, r1, #0
    25bc:	9201      	str	r2, [sp, #4]
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Clear read byte counter */

	res = validate(fp);							/* Check validity */
    25be:	f7ff f8a0 	bl	1702 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    25c2:	1e05      	subs	r5, r0, #0
    25c4:	d000      	beq.n	25c8 <f_read+0x1a>
    25c6:	e097      	b.n	26f8 <f_read+0x14a>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    25c8:	79a3      	ldrb	r3, [r4, #6]
    25ca:	b25a      	sxtb	r2, r3
    25cc:	2a00      	cmp	r2, #0
    25ce:	da00      	bge.n	25d2 <f_read+0x24>
    25d0:	e08f      	b.n	26f2 <f_read+0x144>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    25d2:	07d9      	lsls	r1, r3, #31
    25d4:	d400      	bmi.n	25d8 <f_read+0x2a>
    25d6:	e08e      	b.n	26f6 <f_read+0x148>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    25d8:	68e2      	ldr	r2, [r4, #12]
    25da:	68a3      	ldr	r3, [r4, #8]
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
    25dc:	9702      	str	r7, [sp, #8]
    25de:	9f01      	ldr	r7, [sp, #4]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)					/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    25e0:	1ad3      	subs	r3, r2, r3
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
    25e2:	429f      	cmp	r7, r3
    25e4:	d97f      	bls.n	26e6 <f_read+0x138>
    25e6:	1c1f      	adds	r7, r3, #0
    25e8:	e07d      	b.n	26e6 <f_read+0x138>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    25ea:	68a3      	ldr	r3, [r4, #8]
    25ec:	05da      	lsls	r2, r3, #23
    25ee:	2a00      	cmp	r2, #0
    25f0:	d14d      	bne.n	268e <f_read+0xe0>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    25f2:	6820      	ldr	r0, [r4, #0]
    25f4:	0a59      	lsrs	r1, r3, #9
    25f6:	7882      	ldrb	r2, [r0, #2]
    25f8:	3a01      	subs	r2, #1
    25fa:	400a      	ands	r2, r1
    25fc:	b2d2      	uxtb	r2, r2
    25fe:	9201      	str	r2, [sp, #4]
			if (!csect) {						/* On the cluster boundary? */
    2600:	2a00      	cmp	r2, #0
    2602:	d10b      	bne.n	261c <f_read+0x6e>
				if (fp->fptr == 0) {			/* On the top of the file? */
    2604:	2b00      	cmp	r3, #0
    2606:	d101      	bne.n	260c <f_read+0x5e>
					clst = fp->sclust;			/* Follow from the origin */
    2608:	6920      	ldr	r0, [r4, #16]
    260a:	e002      	b.n	2612 <f_read+0x64>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    260c:	6961      	ldr	r1, [r4, #20]
    260e:	f7ff fb63 	bl	1cd8 <get_fat>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    2612:	2801      	cmp	r0, #1
    2614:	d90a      	bls.n	262c <f_read+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2616:	1c42      	adds	r2, r0, #1
    2618:	d040      	beq.n	269c <f_read+0xee>
				fp->clust = clst;				/* Update current cluster */
    261a:	6160      	str	r0, [r4, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    261c:	6823      	ldr	r3, [r4, #0]
    261e:	6961      	ldr	r1, [r4, #20]
    2620:	1c18      	adds	r0, r3, #0
    2622:	9303      	str	r3, [sp, #12]
    2624:	f7ff fb4b 	bl	1cbe <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    2628:	2800      	cmp	r0, #0
    262a:	d105      	bne.n	2638 <f_read+0x8a>
    262c:	79a2      	ldrb	r2, [r4, #6]
    262e:	2380      	movs	r3, #128	; 0x80
    2630:	425b      	negs	r3, r3
    2632:	4313      	orrs	r3, r2
    2634:	71a3      	strb	r3, [r4, #6]
    2636:	e05c      	b.n	26f2 <f_read+0x144>
			sect += csect;
    2638:	9901      	ldr	r1, [sp, #4]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    263a:	0a7d      	lsrs	r5, r7, #9
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
			sect += csect;
    263c:	1809      	adds	r1, r1, r0
    263e:	9104      	str	r1, [sp, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
    2640:	2d00      	cmp	r5, #0
    2642:	d022      	beq.n	268a <f_read+0xdc>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    2644:	9a03      	ldr	r2, [sp, #12]
    2646:	9901      	ldr	r1, [sp, #4]
    2648:	7893      	ldrb	r3, [r2, #2]
    264a:	186a      	adds	r2, r5, r1
    264c:	429a      	cmp	r2, r3
    264e:	d900      	bls.n	2652 <f_read+0xa4>
					cc = fp->fs->csize - csect;
    2650:	1a5d      	subs	r5, r3, r1
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    2652:	9a03      	ldr	r2, [sp, #12]
    2654:	b2eb      	uxtb	r3, r5
    2656:	7850      	ldrb	r0, [r2, #1]
    2658:	9902      	ldr	r1, [sp, #8]
    265a:	9a04      	ldr	r2, [sp, #16]
    265c:	f7fe fc7c 	bl	f58 <disk_read>
    2660:	2800      	cmp	r0, #0
    2662:	d11b      	bne.n	269c <f_read+0xee>
					ABORT(fp->fs, FR_DISK_ERR);
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    2664:	6821      	ldr	r1, [r4, #0]
    2666:	790b      	ldrb	r3, [r1, #4]
    2668:	2b00      	cmp	r3, #0
    266a:	d00c      	beq.n	2686 <f_read+0xd8>
    266c:	6b08      	ldr	r0, [r1, #48]	; 0x30
    266e:	9b04      	ldr	r3, [sp, #16]
    2670:	1ac0      	subs	r0, r0, r3
    2672:	42a8      	cmp	r0, r5
    2674:	d207      	bcs.n	2686 <f_read+0xd8>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    2676:	9a02      	ldr	r2, [sp, #8]
    2678:	0240      	lsls	r0, r0, #9
    267a:	1880      	adds	r0, r0, r2
    267c:	2280      	movs	r2, #128	; 0x80
    267e:	3134      	adds	r1, #52	; 0x34
    2680:	0092      	lsls	r2, r2, #2
    2682:	f7fe ffe9 	bl	1658 <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    2686:	026d      	lsls	r5, r5, #9
				continue;
    2688:	e022      	b.n	26d0 <f_read+0x122>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    268a:	9b04      	ldr	r3, [sp, #16]
    268c:	61a3      	str	r3, [r4, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    268e:	6820      	ldr	r0, [r4, #0]
    2690:	69a1      	ldr	r1, [r4, #24]
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    2692:	68a5      	ldr	r5, [r4, #8]
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    2694:	f7ff fa66 	bl	1b64 <move_window>
    2698:	2800      	cmp	r0, #0
    269a:	d006      	beq.n	26aa <f_read+0xfc>
			ABORT(fp->fs, FR_DISK_ERR);
    269c:	79a2      	ldrb	r2, [r4, #6]
    269e:	2380      	movs	r3, #128	; 0x80
    26a0:	425b      	negs	r3, r3
    26a2:	4313      	orrs	r3, r2
    26a4:	71a3      	strb	r3, [r4, #6]
    26a6:	2501      	movs	r5, #1
    26a8:	e026      	b.n	26f8 <f_read+0x14a>
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    26aa:	05ed      	lsls	r5, r5, #23
    26ac:	2380      	movs	r3, #128	; 0x80
    26ae:	0ded      	lsrs	r5, r5, #23
    26b0:	009b      	lsls	r3, r3, #2
    26b2:	1b5b      	subs	r3, r3, r5
    26b4:	1c3d      	adds	r5, r7, #0
    26b6:	429f      	cmp	r7, r3
    26b8:	d900      	bls.n	26bc <f_read+0x10e>
    26ba:	1c1d      	adds	r5, r3, #0
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    26bc:	68a1      	ldr	r1, [r4, #8]
    26be:	6823      	ldr	r3, [r4, #0]
    26c0:	05c9      	lsls	r1, r1, #23
    26c2:	3334      	adds	r3, #52	; 0x34
    26c4:	0dc9      	lsrs	r1, r1, #23
    26c6:	1859      	adds	r1, r3, r1
    26c8:	9802      	ldr	r0, [sp, #8]
    26ca:	1c2a      	adds	r2, r5, #0
    26cc:	f7fe ffc4 	bl	1658 <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    26d0:	68a3      	ldr	r3, [r4, #8]
    26d2:	9902      	ldr	r1, [sp, #8]
    26d4:	195b      	adds	r3, r3, r5
    26d6:	60a3      	str	r3, [r4, #8]
    26d8:	6833      	ldr	r3, [r6, #0]
    26da:	1949      	adds	r1, r1, r5
    26dc:	195b      	adds	r3, r3, r5
    26de:	9102      	str	r1, [sp, #8]
    26e0:	6033      	str	r3, [r6, #0]
    26e2:	1b7f      	subs	r7, r7, r5
    26e4:	e000      	b.n	26e8 <f_read+0x13a>
    26e6:	9505      	str	r5, [sp, #20]
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    26e8:	2f00      	cmp	r7, #0
    26ea:	d000      	beq.n	26ee <f_read+0x140>
    26ec:	e77d      	b.n	25ea <f_read+0x3c>
    26ee:	9d05      	ldr	r5, [sp, #20]
    26f0:	e002      	b.n	26f8 <f_read+0x14a>
	*br = 0;	/* Clear read byte counter */

	res = validate(fp);							/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)					/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    26f2:	2502      	movs	r5, #2
    26f4:	e000      	b.n	26f8 <f_read+0x14a>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    26f6:	2507      	movs	r5, #7
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    26f8:	b007      	add	sp, #28
    26fa:	1c28      	adds	r0, r5, #0
    26fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000026fe <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    26fe:	b5f0      	push	{r4, r5, r6, r7, lr}
    2700:	1c1f      	adds	r7, r3, #0
    2702:	b087      	sub	sp, #28
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    2704:	2300      	movs	r3, #0
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    2706:	9101      	str	r1, [sp, #4]
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    2708:	603b      	str	r3, [r7, #0]
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    270a:	1c04      	adds	r4, r0, #0
    270c:	1c16      	adds	r6, r2, #0
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */

	res = validate(fp);						/* Check validity */
    270e:	f7fe fff8 	bl	1702 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2712:	1e05      	subs	r5, r0, #0
    2714:	d000      	beq.n	2718 <f_write+0x1a>
    2716:	e0c7      	b.n	28a8 <f_write+0x1aa>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    2718:	79a2      	ldrb	r2, [r4, #6]
    271a:	2302      	movs	r3, #2
    271c:	b251      	sxtb	r1, r2
    271e:	2900      	cmp	r1, #0
    2720:	da00      	bge.n	2724 <f_write+0x26>
    2722:	e0be      	b.n	28a2 <f_write+0x1a4>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    2724:	421a      	tst	r2, r3
    2726:	d100      	bne.n	272a <f_write+0x2c>
    2728:	e0bd      	b.n	28a6 <f_write+0x1a8>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    272a:	68e3      	ldr	r3, [r4, #12]
    272c:	1c29      	adds	r1, r5, #0
    272e:	18f2      	adds	r2, r6, r3
    2730:	429a      	cmp	r2, r3
    2732:	4169      	adcs	r1, r5
    2734:	424b      	negs	r3, r1
    2736:	401e      	ands	r6, r3
    2738:	9505      	str	r5, [sp, #20]
    273a:	e0a4      	b.n	2886 <f_write+0x188>

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    273c:	68a3      	ldr	r3, [r4, #8]
    273e:	05da      	lsls	r2, r3, #23
    2740:	2a00      	cmp	r2, #0
    2742:	d172      	bne.n	282a <f_write+0x12c>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    2744:	6820      	ldr	r0, [r4, #0]
    2746:	0a59      	lsrs	r1, r3, #9
    2748:	7882      	ldrb	r2, [r0, #2]
    274a:	3a01      	subs	r2, #1
    274c:	400a      	ands	r2, r1
    274e:	b2d2      	uxtb	r2, r2
    2750:	9202      	str	r2, [sp, #8]
			if (!csect) {					/* On the cluster boundary? */
    2752:	2a00      	cmp	r2, #0
    2754:	d115      	bne.n	2782 <f_write+0x84>
				if (fp->fptr == 0) {		/* On the top of the file? */
    2756:	2b00      	cmp	r3, #0
    2758:	d107      	bne.n	276a <f_write+0x6c>
					clst = fp->sclust;		/* Follow from the origin */
    275a:	6921      	ldr	r1, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    275c:	2900      	cmp	r1, #0
    275e:	d10b      	bne.n	2778 <f_write+0x7a>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    2760:	f7ff fbf7 	bl	1f52 <create_chain>
    2764:	1c01      	adds	r1, r0, #0
    2766:	6120      	str	r0, [r4, #16]
    2768:	e003      	b.n	2772 <f_write+0x74>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    276a:	6961      	ldr	r1, [r4, #20]
    276c:	f7ff fbf1 	bl	1f52 <create_chain>
    2770:	1c01      	adds	r1, r0, #0
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    2772:	2900      	cmp	r1, #0
    2774:	d100      	bne.n	2778 <f_write+0x7a>
    2776:	e089      	b.n	288c <f_write+0x18e>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2778:	2901      	cmp	r1, #1
    277a:	d014      	beq.n	27a6 <f_write+0xa8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    277c:	1c4a      	adds	r2, r1, #1
    277e:	d05b      	beq.n	2838 <f_write+0x13a>
				fp->clust = clst;			/* Update current cluster */
    2780:	6161      	str	r1, [r4, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    2782:	6820      	ldr	r0, [r4, #0]
    2784:	69a3      	ldr	r3, [r4, #24]
    2786:	6b02      	ldr	r2, [r0, #48]	; 0x30
    2788:	429a      	cmp	r2, r3
    278a:	d104      	bne.n	2796 <f_write+0x98>
    278c:	2100      	movs	r1, #0
    278e:	f7ff f9e9 	bl	1b64 <move_window>
    2792:	2800      	cmp	r0, #0
    2794:	d150      	bne.n	2838 <f_write+0x13a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    2796:	6823      	ldr	r3, [r4, #0]
    2798:	6961      	ldr	r1, [r4, #20]
    279a:	1c18      	adds	r0, r3, #0
    279c:	9303      	str	r3, [sp, #12]
    279e:	f7ff fa8e 	bl	1cbe <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    27a2:	2800      	cmp	r0, #0
    27a4:	d106      	bne.n	27b4 <f_write+0xb6>
    27a6:	79a2      	ldrb	r2, [r4, #6]
    27a8:	2380      	movs	r3, #128	; 0x80
    27aa:	425b      	negs	r3, r3
    27ac:	4313      	orrs	r3, r2
    27ae:	71a3      	strb	r3, [r4, #6]
    27b0:	2502      	movs	r5, #2
    27b2:	e079      	b.n	28a8 <f_write+0x1aa>
			sect += csect;
    27b4:	9902      	ldr	r1, [sp, #8]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    27b6:	0a75      	lsrs	r5, r6, #9
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
			sect += csect;
    27b8:	1809      	adds	r1, r1, r0
    27ba:	9104      	str	r1, [sp, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
			if (cc) {						/* Write maximum contiguous sectors directly */
    27bc:	2d00      	cmp	r5, #0
    27be:	d025      	beq.n	280c <f_write+0x10e>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    27c0:	9b03      	ldr	r3, [sp, #12]
    27c2:	9902      	ldr	r1, [sp, #8]
    27c4:	789a      	ldrb	r2, [r3, #2]
    27c6:	186b      	adds	r3, r5, r1
    27c8:	4293      	cmp	r3, r2
    27ca:	d900      	bls.n	27ce <f_write+0xd0>
					cc = fp->fs->csize - csect;
    27cc:	1a55      	subs	r5, r2, r1
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    27ce:	9a03      	ldr	r2, [sp, #12]
    27d0:	b2eb      	uxtb	r3, r5
    27d2:	7850      	ldrb	r0, [r2, #1]
    27d4:	9901      	ldr	r1, [sp, #4]
    27d6:	9a04      	ldr	r2, [sp, #16]
    27d8:	f7fe fc04 	bl	fe4 <disk_write>
    27dc:	9002      	str	r0, [sp, #8]
    27de:	2800      	cmp	r0, #0
    27e0:	d12a      	bne.n	2838 <f_write+0x13a>
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    27e2:	6820      	ldr	r0, [r4, #0]
    27e4:	9b04      	ldr	r3, [sp, #16]
    27e6:	6b01      	ldr	r1, [r0, #48]	; 0x30
    27e8:	1ac9      	subs	r1, r1, r3
    27ea:	42a9      	cmp	r1, r5
    27ec:	d20c      	bcs.n	2808 <f_write+0x10a>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    27ee:	9a01      	ldr	r2, [sp, #4]
    27f0:	0249      	lsls	r1, r1, #9
    27f2:	1889      	adds	r1, r1, r2
    27f4:	2280      	movs	r2, #128	; 0x80
    27f6:	0092      	lsls	r2, r2, #2
    27f8:	3034      	adds	r0, #52	; 0x34
    27fa:	f7fe ff2d 	bl	1658 <mem_cpy>
					fp->fs->wflag = 0;
    27fe:	4669      	mov	r1, sp
    2800:	2208      	movs	r2, #8
    2802:	6823      	ldr	r3, [r4, #0]
    2804:	5c51      	ldrb	r1, [r2, r1]
    2806:	7119      	strb	r1, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    2808:	026d      	lsls	r5, r5, #9
				continue;
    280a:	e032      	b.n	2872 <f_write+0x174>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    280c:	68a2      	ldr	r2, [r4, #8]
    280e:	68e3      	ldr	r3, [r4, #12]
    2810:	429a      	cmp	r2, r3
    2812:	d308      	bcc.n	2826 <f_write+0x128>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    2814:	9803      	ldr	r0, [sp, #12]
    2816:	1c29      	adds	r1, r5, #0
    2818:	f7ff f9a4 	bl	1b64 <move_window>
    281c:	2800      	cmp	r0, #0
    281e:	d10b      	bne.n	2838 <f_write+0x13a>
				fp->fs->winsect = sect;
    2820:	6823      	ldr	r3, [r4, #0]
    2822:	9a04      	ldr	r2, [sp, #16]
    2824:	631a      	str	r2, [r3, #48]	; 0x30
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    2826:	9b04      	ldr	r3, [sp, #16]
    2828:	61a3      	str	r3, [r4, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    282a:	6820      	ldr	r0, [r4, #0]
    282c:	69a1      	ldr	r1, [r4, #24]
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    282e:	68a5      	ldr	r5, [r4, #8]
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    2830:	f7ff f998 	bl	1b64 <move_window>
    2834:	2800      	cmp	r0, #0
    2836:	d006      	beq.n	2846 <f_write+0x148>
			ABORT(fp->fs, FR_DISK_ERR);
    2838:	79a2      	ldrb	r2, [r4, #6]
    283a:	2380      	movs	r3, #128	; 0x80
    283c:	425b      	negs	r3, r3
    283e:	4313      	orrs	r3, r2
    2840:	71a3      	strb	r3, [r4, #6]
    2842:	2501      	movs	r5, #1
    2844:	e030      	b.n	28a8 <f_write+0x1aa>
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    2846:	05ed      	lsls	r5, r5, #23
    2848:	2380      	movs	r3, #128	; 0x80
    284a:	0ded      	lsrs	r5, r5, #23
    284c:	009b      	lsls	r3, r3, #2
    284e:	1b5b      	subs	r3, r3, r5
    2850:	1c35      	adds	r5, r6, #0
    2852:	429e      	cmp	r6, r3
    2854:	d900      	bls.n	2858 <f_write+0x15a>
    2856:	1c1d      	adds	r5, r3, #0
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    2858:	68a0      	ldr	r0, [r4, #8]
    285a:	6823      	ldr	r3, [r4, #0]
    285c:	05c0      	lsls	r0, r0, #23
    285e:	3334      	adds	r3, #52	; 0x34
    2860:	0dc0      	lsrs	r0, r0, #23
    2862:	1818      	adds	r0, r3, r0
    2864:	1c2a      	adds	r2, r5, #0
    2866:	9901      	ldr	r1, [sp, #4]
    2868:	f7fe fef6 	bl	1658 <mem_cpy>
		fp->fs->wflag = 1;
    286c:	6823      	ldr	r3, [r4, #0]
    286e:	2201      	movs	r2, #1
    2870:	711a      	strb	r2, [r3, #4]
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    2872:	68a3      	ldr	r3, [r4, #8]
    2874:	9901      	ldr	r1, [sp, #4]
    2876:	195b      	adds	r3, r3, r5
    2878:	60a3      	str	r3, [r4, #8]
    287a:	683b      	ldr	r3, [r7, #0]
    287c:	1949      	adds	r1, r1, r5
    287e:	195b      	adds	r3, r3, r5
    2880:	9101      	str	r1, [sp, #4]
    2882:	1b76      	subs	r6, r6, r5
    2884:	603b      	str	r3, [r7, #0]
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    2886:	2e00      	cmp	r6, #0
    2888:	d000      	beq.n	288c <f_write+0x18e>
    288a:	e757      	b.n	273c <f_write+0x3e>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    288c:	68a3      	ldr	r3, [r4, #8]
    288e:	68e2      	ldr	r2, [r4, #12]
    2890:	9d05      	ldr	r5, [sp, #20]
    2892:	4293      	cmp	r3, r2
    2894:	d900      	bls.n	2898 <f_write+0x19a>
    2896:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    2898:	79a3      	ldrb	r3, [r4, #6]
    289a:	2220      	movs	r2, #32
    289c:	4313      	orrs	r3, r2
    289e:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    28a0:	e002      	b.n	28a8 <f_write+0x1aa>
	*bw = 0;	/* Clear write byte counter */

	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)				/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    28a2:	1c1d      	adds	r5, r3, #0
    28a4:	e000      	b.n	28a8 <f_write+0x1aa>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    28a6:	2507      	movs	r5, #7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    28a8:	b007      	add	sp, #28
    28aa:	1c28      	adds	r0, r5, #0
    28ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

000028ae <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    28ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28b0:	1c04      	adds	r4, r0, #0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    28b2:	f7fe ff26 	bl	1702 <validate>
	if (res == FR_OK) {
    28b6:	1e06      	subs	r6, r0, #0
    28b8:	d12f      	bne.n	291a <f_sync+0x6c>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    28ba:	79a3      	ldrb	r3, [r4, #6]
    28bc:	2720      	movs	r7, #32
    28be:	423b      	tst	r3, r7
    28c0:	d02b      	beq.n	291a <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    28c2:	6820      	ldr	r0, [r4, #0]
    28c4:	69e1      	ldr	r1, [r4, #28]
    28c6:	f7ff f94d 	bl	1b64 <move_window>
			if (res == FR_OK) {
    28ca:	1e06      	subs	r6, r0, #0
    28cc:	d125      	bne.n	291a <f_sync+0x6c>
				dir = fp->dir_ptr;
    28ce:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    28d0:	7aeb      	ldrb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
				st_clust(dir, fp->sclust);					/* Update start cluster */
    28d2:	1c28      	adds	r0, r5, #0
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
			if (res == FR_OK) {
				dir = fp->dir_ptr;
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    28d4:	433b      	orrs	r3, r7
    28d6:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    28d8:	68e3      	ldr	r3, [r4, #12]
    28da:	772b      	strb	r3, [r5, #28]
    28dc:	89a3      	ldrh	r3, [r4, #12]
    28de:	0a1b      	lsrs	r3, r3, #8
    28e0:	776b      	strb	r3, [r5, #29]
    28e2:	89e3      	ldrh	r3, [r4, #14]
    28e4:	77ab      	strb	r3, [r5, #30]
    28e6:	7be3      	ldrb	r3, [r4, #15]
    28e8:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
    28ea:	6921      	ldr	r1, [r4, #16]
    28ec:	f7fe fec4 	bl	1678 <st_clust>
				tim = get_fattime();						/* Update updated time */
    28f0:	f7fe fc36 	bl	1160 <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    28f4:	0a03      	lsrs	r3, r0, #8
    28f6:	75a8      	strb	r0, [r5, #22]
    28f8:	75eb      	strb	r3, [r5, #23]
    28fa:	0c03      	lsrs	r3, r0, #16
    28fc:	0e00      	lsrs	r0, r0, #24
				ST_WORD(dir+DIR_LstAccDate, 0);
    28fe:	74ae      	strb	r6, [r5, #18]
    2900:	74ee      	strb	r6, [r5, #19]
				dir = fp->dir_ptr;
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
				st_clust(dir, fp->sclust);					/* Update start cluster */
				tim = get_fattime();						/* Update updated time */
				ST_DWORD(dir+DIR_WrtTime, tim);
    2902:	762b      	strb	r3, [r5, #24]
    2904:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir+DIR_LstAccDate, 0);
				fp->flag &= ~FA__WRITTEN;
    2906:	79a3      	ldrb	r3, [r4, #6]
				fp->fs->wflag = 1;
    2908:	2201      	movs	r2, #1
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
				st_clust(dir, fp->sclust);					/* Update start cluster */
				tim = get_fattime();						/* Update updated time */
				ST_DWORD(dir+DIR_WrtTime, tim);
				ST_WORD(dir+DIR_LstAccDate, 0);
				fp->flag &= ~FA__WRITTEN;
    290a:	43bb      	bics	r3, r7
    290c:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    290e:	6823      	ldr	r3, [r4, #0]
    2910:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
    2912:	6820      	ldr	r0, [r4, #0]
    2914:	f7ff f95f 	bl	1bd6 <sync>
    2918:	1c06      	adds	r6, r0, #0
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    291a:	1c30      	adds	r0, r6, #0
    291c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000291e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    291e:	b510      	push	{r4, lr}
    2920:	1c04      	adds	r4, r0, #0
#endif
		if (res == FR_OK) fp->fs = 0;	/* Discard file object */
		LEAVE_FF(fs, res);
	}
#else
	res = f_sync(fp);		/* Flush cached data */
    2922:	f7ff ffc4 	bl	28ae <f_sync>
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    2926:	2800      	cmp	r0, #0
    2928:	d100      	bne.n	292c <f_close+0xe>
    292a:	6020      	str	r0, [r4, #0]
	return res;
#endif
}
    292c:	bd10      	pop	{r4, pc}

0000292e <f_chdrive>:
#if _FS_RPATH >= 1

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
    292e:	b500      	push	{lr}
    2930:	1c03      	adds	r3, r0, #0
	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
    2932:	200b      	movs	r0, #11
    2934:	2b00      	cmp	r3, #0
    2936:	d102      	bne.n	293e <f_chdrive+0x10>

	CurrVol = drv;
    2938:	4a01      	ldr	r2, [pc, #4]	; (2940 <f_chdrive+0x12>)

	return FR_OK;
    293a:	1c18      	adds	r0, r3, #0
	BYTE drv		/* Drive number */
)
{
	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;

	CurrVol = drv;
    293c:	7013      	strb	r3, [r2, #0]

	return FR_OK;
}
    293e:	bd00      	pop	{pc}
    2940:	10000120 	.word	0x10000120

00002944 <f_chdir>:


FRESULT f_chdir (
	const TCHAR *path	/* Pointer to the directory path */
)
{
    2944:	b530      	push	{r4, r5, lr}
    2946:	b08d      	sub	sp, #52	; 0x34
    2948:	9001      	str	r0, [sp, #4]
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    294a:	a902      	add	r1, sp, #8
    294c:	a801      	add	r0, sp, #4
    294e:	2200      	movs	r2, #0
    2950:	f7fe ff3a 	bl	17c8 <chk_mounted>
	if (res == FR_OK) {
    2954:	1e04      	subs	r4, r0, #0
    2956:	d11a      	bne.n	298e <f_chdir+0x4a>
		INIT_BUF(dj);
    2958:	ab09      	add	r3, sp, #36	; 0x24
		res = follow_path(&dj, path);		/* Follow the path */
    295a:	a802      	add	r0, sp, #8
    295c:	9901      	ldr	r1, [sp, #4]
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
	if (res == FR_OK) {
		INIT_BUF(dj);
    295e:	9308      	str	r3, [sp, #32]
		res = follow_path(&dj, path);		/* Follow the path */
    2960:	f7ff fbc6 	bl	20f0 <follow_path>
		FREE_BUF();
		if (res == FR_OK) {					/* Follow completed */
    2964:	1e04      	subs	r4, r0, #0
    2966:	d10f      	bne.n	2988 <f_chdir+0x44>
			if (!dj.dir) {
    2968:	9907      	ldr	r1, [sp, #28]
    296a:	2900      	cmp	r1, #0
    296c:	d103      	bne.n	2976 <f_chdir+0x32>
				dj.fs->cdir = dj.sclust;	/* Start directory itself */
    296e:	9b02      	ldr	r3, [sp, #8]
    2970:	9a04      	ldr	r2, [sp, #16]
    2972:	619a      	str	r2, [r3, #24]
    2974:	e00b      	b.n	298e <f_chdir+0x4a>
			} else {
				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
    2976:	7acb      	ldrb	r3, [r1, #11]
    2978:	06da      	lsls	r2, r3, #27
    297a:	d50b      	bpl.n	2994 <f_chdir+0x50>
					dj.fs->cdir = ld_clust(dj.fs, dj.dir);
    297c:	9d02      	ldr	r5, [sp, #8]
    297e:	7828      	ldrb	r0, [r5, #0]
    2980:	f7ff f98e 	bl	1ca0 <ld_clust.clone.0>
    2984:	61a8      	str	r0, [r5, #24]
    2986:	e002      	b.n	298e <f_chdir+0x4a>
				else
					res = FR_NO_PATH;		/* Reached but a file */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2988:	2c04      	cmp	r4, #4
    298a:	d100      	bne.n	298e <f_chdir+0x4a>
    298c:	3401      	adds	r4, #1
	}

	LEAVE_FF(dj.fs, res);
}
    298e:	b00d      	add	sp, #52	; 0x34
    2990:	1c20      	adds	r0, r4, #0
    2992:	bd30      	pop	{r4, r5, pc}
				dj.fs->cdir = dj.sclust;	/* Start directory itself */
			} else {
				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
					dj.fs->cdir = ld_clust(dj.fs, dj.dir);
				else
					res = FR_NO_PATH;		/* Reached but a file */
    2994:	2405      	movs	r4, #5
    2996:	e7fa      	b.n	298e <f_chdir+0x4a>

00002998 <f_getcwd>:
#if _FS_RPATH >= 2
FRESULT f_getcwd (
	TCHAR *path,	/* Pointer to the directory path */
	UINT sz_path	/* Size of path */
)
{
    2998:	b5f0      	push	{r4, r5, r6, r7, lr}
    299a:	b093      	sub	sp, #76	; 0x4c
	TCHAR *tp;
	FILINFO fno;
	DEF_NAMEBUF;


	*path = 0;
    299c:	2200      	movs	r2, #0
#if _FS_RPATH >= 2
FRESULT f_getcwd (
	TCHAR *path,	/* Pointer to the directory path */
	UINT sz_path	/* Size of path */
)
{
    299e:	9001      	str	r0, [sp, #4]
    29a0:	1c0f      	adds	r7, r1, #0
	TCHAR *tp;
	FILINFO fno;
	DEF_NAMEBUF;


	*path = 0;
    29a2:	7002      	strb	r2, [r0, #0]
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
    29a4:	a902      	add	r1, sp, #8
    29a6:	a801      	add	r0, sp, #4
    29a8:	f7fe ff0e 	bl	17c8 <chk_mounted>
	if (res == FR_OK) {
    29ac:	1e05      	subs	r5, r0, #0
    29ae:	d177      	bne.n	2aa0 <f_getcwd+0x108>
		INIT_BUF(dj);
    29b0:	ab0f      	add	r3, sp, #60	; 0x3c
    29b2:	9308      	str	r3, [sp, #32]
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
    29b4:	9b02      	ldr	r3, [sp, #8]
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
    29b6:	1c3c      	adds	r4, r7, #0
	*path = 0;
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
    29b8:	699b      	ldr	r3, [r3, #24]
    29ba:	9304      	str	r3, [sp, #16]
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
    29bc:	e04c      	b.n	2a58 <f_getcwd+0xc0>
			res = dir_sdi(&dj, 1);			/* Get parent dir */
    29be:	a802      	add	r0, sp, #8
    29c0:	2101      	movs	r1, #1
    29c2:	f7ff f9f0 	bl	1da6 <dir_sdi>
			if (res != FR_OK) break;
    29c6:	2800      	cmp	r0, #0
    29c8:	d14d      	bne.n	2a66 <f_getcwd+0xce>
			res = dir_read(&dj);
    29ca:	a802      	add	r0, sp, #8
    29cc:	f7ff fced 	bl	23aa <dir_read>
			if (res != FR_OK) break;
    29d0:	1e06      	subs	r6, r0, #0
    29d2:	d146      	bne.n	2a62 <f_getcwd+0xca>
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(djo.fs, res);
}
    29d4:	9b02      	ldr	r3, [sp, #8]
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
			res = dir_sdi(&dj, 1);			/* Get parent dir */
			if (res != FR_OK) break;
			res = dir_read(&dj);
			if (res != FR_OK) break;
			dj.sclust = ld_clust(dj.fs, dj.dir);	/* Goto parent dir */
    29d6:	9907      	ldr	r1, [sp, #28]
    29d8:	7818      	ldrb	r0, [r3, #0]
    29da:	f7ff f961 	bl	1ca0 <ld_clust.clone.0>
			res = dir_sdi(&dj, 0);
    29de:	1c31      	adds	r1, r6, #0
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
			res = dir_sdi(&dj, 1);			/* Get parent dir */
			if (res != FR_OK) break;
			res = dir_read(&dj);
			if (res != FR_OK) break;
			dj.sclust = ld_clust(dj.fs, dj.dir);	/* Goto parent dir */
    29e0:	9004      	str	r0, [sp, #16]
			res = dir_sdi(&dj, 0);
    29e2:	a802      	add	r0, sp, #8
    29e4:	f7ff f9df 	bl	1da6 <dir_sdi>
			if (res != FR_OK) break;
    29e8:	2800      	cmp	r0, #0
    29ea:	d13c      	bne.n	2a66 <f_getcwd+0xce>
			do {							/* Find the entry links to the child dir */
				res = dir_read(&dj);
    29ec:	a802      	add	r0, sp, #8
    29ee:	f7ff fcdc 	bl	23aa <dir_read>
				if (res != FR_OK) break;
    29f2:	1e06      	subs	r6, r0, #0
    29f4:	d10d      	bne.n	2a12 <f_getcwd+0x7a>
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(djo.fs, res);
}
    29f6:	9b02      	ldr	r3, [sp, #8]
			res = dir_sdi(&dj, 0);
			if (res != FR_OK) break;
			do {							/* Find the entry links to the child dir */
				res = dir_read(&dj);
				if (res != FR_OK) break;
				if (ccl == ld_clust(dj.fs, dj.dir)) break;	/* Found the entry */
    29f8:	9907      	ldr	r1, [sp, #28]
    29fa:	7818      	ldrb	r0, [r3, #0]
    29fc:	f7ff f950 	bl	1ca0 <ld_clust.clone.0>
    2a00:	9900      	ldr	r1, [sp, #0]
    2a02:	4281      	cmp	r1, r0
    2a04:	d009      	beq.n	2a1a <f_getcwd+0x82>
				res = dir_next(&dj, 0);	
    2a06:	1c31      	adds	r1, r6, #0
    2a08:	a802      	add	r0, sp, #8
    2a0a:	f7ff faf9 	bl	2000 <dir_next>
			} while (res == FR_OK);
    2a0e:	1e06      	subs	r6, r0, #0
    2a10:	d0ec      	beq.n	29ec <f_getcwd+0x54>
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
    2a12:	2502      	movs	r5, #2
    2a14:	2e04      	cmp	r6, #4
    2a16:	d124      	bne.n	2a62 <f_getcwd+0xca>
    2a18:	e028      	b.n	2a6c <f_getcwd+0xd4>
			if (res != FR_OK) break;
#if _USE_LFN
			fno.lfname = path;
			fno.lfsize = i;
#endif
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
    2a1a:	a802      	add	r0, sp, #8
    2a1c:	a909      	add	r1, sp, #36	; 0x24
    2a1e:	f7fe fe33 	bl	1688 <get_fileinfo>
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
    2a22:	e000      	b.n	2a26 <f_getcwd+0x8e>
    2a24:	3601      	adds	r6, #1
	LEAVE_FF(dj.fs, res);
}


#if _FS_RPATH >= 2
FRESULT f_getcwd (
    2a26:	aa09      	add	r2, sp, #36	; 0x24
    2a28:	1993      	adds	r3, r2, r6
			fno.lfsize = i;
#endif
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
    2a2a:	7a5b      	ldrb	r3, [r3, #9]
    2a2c:	2b00      	cmp	r3, #0
    2a2e:	d1f9      	bne.n	2a24 <f_getcwd+0x8c>
			if (i < n + 3) {
    2a30:	1cf3      	adds	r3, r6, #3
			fno.lfsize = i;
#endif
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
    2a32:	46b4      	mov	ip, r6
			if (i < n + 3) {
    2a34:	429c      	cmp	r4, r3
    2a36:	d318      	bcc.n	2a6a <f_getcwd+0xd2>
    2a38:	1c23      	adds	r3, r4, #0
    2a3a:	e005      	b.n	2a48 <f_getcwd+0xb0>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
    2a3c:	3e01      	subs	r6, #1
	LEAVE_FF(dj.fs, res);
}


#if _FS_RPATH >= 2
FRESULT f_getcwd (
    2a3e:	a909      	add	r1, sp, #36	; 0x24
    2a40:	1988      	adds	r0, r1, r6
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
			if (i < n + 3) {
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
    2a42:	7a40      	ldrb	r0, [r0, #9]
    2a44:	3b01      	subs	r3, #1
    2a46:	54d0      	strb	r0, [r2, r3]
    2a48:	9a01      	ldr	r2, [sp, #4]
    2a4a:	2e00      	cmp	r6, #0
    2a4c:	d1f6      	bne.n	2a3c <f_getcwd+0xa4>
    2a4e:	4661      	mov	r1, ip
    2a50:	43cb      	mvns	r3, r1
			path[--i] = '/';
    2a52:	18e4      	adds	r4, r4, r3
    2a54:	232f      	movs	r3, #47	; 0x2f
    2a56:	5513      	strb	r3, [r2, r4]
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
    2a58:	9a04      	ldr	r2, [sp, #16]
    2a5a:	9200      	str	r2, [sp, #0]
    2a5c:	2a00      	cmp	r2, #0
    2a5e:	d1ae      	bne.n	29be <f_getcwd+0x26>
    2a60:	e004      	b.n	2a6c <f_getcwd+0xd4>
			res = dir_sdi(&dj, 1);			/* Get parent dir */
			if (res != FR_OK) break;
			res = dir_read(&dj);
    2a62:	1c35      	adds	r5, r6, #0
    2a64:	e002      	b.n	2a6c <f_getcwd+0xd4>
			if (res != FR_OK) break;
			dj.sclust = ld_clust(dj.fs, dj.dir);	/* Goto parent dir */
			res = dir_sdi(&dj, 0);
    2a66:	1c05      	adds	r5, r0, #0
    2a68:	e000      	b.n	2a6c <f_getcwd+0xd4>
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
			if (i < n + 3) {
				res = FR_NOT_ENOUGH_CORE; break;
    2a6a:	2511      	movs	r5, #17
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    2a6c:	9b01      	ldr	r3, [sp, #4]
		if (res == FR_OK) {
    2a6e:	2d00      	cmp	r5, #0
    2a70:	d114      	bne.n	2a9c <f_getcwd+0x104>
			*tp++ = '0' + CurrVol;			/* Put drive number */
    2a72:	4a0d      	ldr	r2, [pc, #52]	; (2aa8 <f_getcwd+0x110>)
			*tp++ = ':';
    2a74:	213a      	movs	r1, #58	; 0x3a
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
    2a76:	7812      	ldrb	r2, [r2, #0]
			*tp++ = ':';
    2a78:	7059      	strb	r1, [r3, #1]
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
    2a7a:	3230      	adds	r2, #48	; 0x30
    2a7c:	701a      	strb	r2, [r3, #0]
    2a7e:	1c5a      	adds	r2, r3, #1
			*tp++ = ':';
    2a80:	3302      	adds	r3, #2
			if (i == sz_path) {				/* Root-dir */
    2a82:	42bc      	cmp	r4, r7
    2a84:	d103      	bne.n	2a8e <f_getcwd+0xf6>
				*tp++ = '/';
    2a86:	390b      	subs	r1, #11
    2a88:	7051      	strb	r1, [r2, #1]
    2a8a:	3301      	adds	r3, #1
    2a8c:	e006      	b.n	2a9c <f_getcwd+0x104>
			} else {						/* Sub-dir */
				do		/* Add stacked path str */
					*tp++ = path[i++];
    2a8e:	9a01      	ldr	r2, [sp, #4]
    2a90:	5d12      	ldrb	r2, [r2, r4]
    2a92:	3401      	adds	r4, #1
    2a94:	701a      	strb	r2, [r3, #0]
    2a96:	3301      	adds	r3, #1
				while (i < sz_path);
    2a98:	42bc      	cmp	r4, r7
    2a9a:	d3f8      	bcc.n	2a8e <f_getcwd+0xf6>
			}
		}
		*tp = 0;
    2a9c:	2200      	movs	r2, #0
    2a9e:	701a      	strb	r2, [r3, #0]
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    2aa0:	b013      	add	sp, #76	; 0x4c
    2aa2:	1c28      	adds	r0, r5, #0
    2aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2aa6:	46c0      	nop			; (mov r8, r8)
    2aa8:	10000120 	.word	0x10000120

00002aac <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    2aac:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aae:	b085      	sub	sp, #20
    2ab0:	1c04      	adds	r4, r0, #0
    2ab2:	1c0d      	adds	r5, r1, #0
	FRESULT res;


	res = validate(fp);					/* Check validity of the object */
    2ab4:	f7fe fe25 	bl	1702 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2ab8:	1e06      	subs	r6, r0, #0
    2aba:	d000      	beq.n	2abe <f_lseek+0x12>
    2abc:	e086      	b.n	2bcc <f_lseek+0x120>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    2abe:	79a2      	ldrb	r2, [r4, #6]
    2ac0:	b253      	sxtb	r3, r2
    2ac2:	2b00      	cmp	r3, #0
    2ac4:	da00      	bge.n	2ac8 <f_lseek+0x1c>
    2ac6:	e080      	b.n	2bca <f_lseek+0x11e>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    2ac8:	68e3      	ldr	r3, [r4, #12]
    2aca:	429d      	cmp	r5, r3
    2acc:	d902      	bls.n	2ad4 <f_lseek+0x28>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    2ace:	0791      	lsls	r1, r2, #30
    2ad0:	d400      	bmi.n	2ad4 <f_lseek+0x28>
    2ad2:	1c1d      	adds	r5, r3, #0
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    2ad4:	2200      	movs	r2, #0
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    2ad6:	68a3      	ldr	r3, [r4, #8]
		fp->fptr = nsect = 0;
    2ad8:	1c28      	adds	r0, r5, #0
    2ada:	60a2      	str	r2, [r4, #8]
		if (ofs) {
    2adc:	4295      	cmp	r5, r2
    2ade:	d063      	beq.n	2ba8 <f_lseek+0xfc>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    2ae0:	6822      	ldr	r2, [r4, #0]
    2ae2:	9201      	str	r2, [sp, #4]
    2ae4:	7897      	ldrb	r7, [r2, #2]
    2ae6:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
    2ae8:	2b00      	cmp	r3, #0
    2aea:	d014      	beq.n	2b16 <f_lseek+0x6a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    2aec:	3b01      	subs	r3, #1
    2aee:	1c39      	adds	r1, r7, #0
    2af0:	1e68      	subs	r0, r5, #1
    2af2:	9302      	str	r3, [sp, #8]
    2af4:	f000 fcaa 	bl	344c <__aeabi_uidiv>
    2af8:	1c39      	adds	r1, r7, #0
    2afa:	9003      	str	r0, [sp, #12]
    2afc:	9802      	ldr	r0, [sp, #8]
    2afe:	f000 fca5 	bl	344c <__aeabi_uidiv>

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    2b02:	9b03      	ldr	r3, [sp, #12]
    2b04:	4283      	cmp	r3, r0
    2b06:	d306      	bcc.n	2b16 <f_lseek+0x6a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    2b08:	9902      	ldr	r1, [sp, #8]
    2b0a:	427b      	negs	r3, r7
    2b0c:	400b      	ands	r3, r1
    2b0e:	60a3      	str	r3, [r4, #8]
				ofs -= fp->fptr;
    2b10:	1aed      	subs	r5, r5, r3
				clst = fp->clust;
    2b12:	6961      	ldr	r1, [r4, #20]
    2b14:	e00c      	b.n	2b30 <f_lseek+0x84>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    2b16:	6921      	ldr	r1, [r4, #16]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    2b18:	2900      	cmp	r1, #0
    2b1a:	d108      	bne.n	2b2e <f_lseek+0x82>
					clst = create_chain(fp->fs, 0);
    2b1c:	9801      	ldr	r0, [sp, #4]
    2b1e:	f7ff fa18 	bl	1f52 <create_chain>
    2b22:	1c01      	adds	r1, r0, #0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2b24:	2801      	cmp	r0, #1
    2b26:	d037      	beq.n	2b98 <f_lseek+0xec>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2b28:	1c42      	adds	r2, r0, #1
    2b2a:	d013      	beq.n	2b54 <f_lseek+0xa8>
					fp->sclust = clst;
    2b2c:	6120      	str	r0, [r4, #16]
				}
#endif
				fp->clust = clst;
    2b2e:	6161      	str	r1, [r4, #20]
			}
			if (clst != 0) {
    2b30:	1e08      	subs	r0, r1, #0
    2b32:	d039      	beq.n	2ba8 <f_lseek+0xfc>
    2b34:	e020      	b.n	2b78 <f_lseek+0xcc>
				while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    2b36:	79a3      	ldrb	r3, [r4, #6]
    2b38:	079a      	lsls	r2, r3, #30
    2b3a:	d505      	bpl.n	2b48 <f_lseek+0x9c>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    2b3c:	6820      	ldr	r0, [r4, #0]
    2b3e:	f7ff fa08 	bl	1f52 <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
    2b42:	1e01      	subs	r1, r0, #0
    2b44:	d104      	bne.n	2b50 <f_lseek+0xa4>
    2b46:	e01a      	b.n	2b7e <f_lseek+0xd2>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    2b48:	6820      	ldr	r0, [r4, #0]
    2b4a:	f7ff f8c5 	bl	1cd8 <get_fat>
    2b4e:	1c01      	adds	r1, r0, #0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2b50:	1c4b      	adds	r3, r1, #1
    2b52:	d106      	bne.n	2b62 <f_lseek+0xb6>
    2b54:	79a2      	ldrb	r2, [r4, #6]
    2b56:	2380      	movs	r3, #128	; 0x80
    2b58:	425b      	negs	r3, r3
    2b5a:	4313      	orrs	r3, r2
    2b5c:	71a3      	strb	r3, [r4, #6]
    2b5e:	2601      	movs	r6, #1
    2b60:	e034      	b.n	2bcc <f_lseek+0x120>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    2b62:	2901      	cmp	r1, #1
    2b64:	d918      	bls.n	2b98 <f_lseek+0xec>
    2b66:	6823      	ldr	r3, [r4, #0]
    2b68:	69db      	ldr	r3, [r3, #28]
    2b6a:	4299      	cmp	r1, r3
    2b6c:	d214      	bcs.n	2b98 <f_lseek+0xec>
					fp->clust = clst;
					fp->fptr += bcs;
    2b6e:	68a3      	ldr	r3, [r4, #8]
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
    2b70:	6161      	str	r1, [r4, #20]
					fp->fptr += bcs;
    2b72:	19db      	adds	r3, r3, r7
    2b74:	60a3      	str	r3, [r4, #8]
					ofs -= bcs;
    2b76:	1bed      	subs	r5, r5, r7
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    2b78:	42bd      	cmp	r5, r7
    2b7a:	d8dc      	bhi.n	2b36 <f_lseek+0x8a>
    2b7c:	e000      	b.n	2b80 <f_lseek+0xd4>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
    2b7e:	1c3d      	adds	r5, r7, #0
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    2b80:	68a3      	ldr	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
    2b82:	05e8      	lsls	r0, r5, #23
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    2b84:	195b      	adds	r3, r3, r5
				if (ofs % SS(fp->fs)) {
    2b86:	0dc0      	lsrs	r0, r0, #23
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    2b88:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
    2b8a:	2800      	cmp	r0, #0
    2b8c:	d00c      	beq.n	2ba8 <f_lseek+0xfc>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    2b8e:	6820      	ldr	r0, [r4, #0]
    2b90:	f7ff f895 	bl	1cbe <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    2b94:	2800      	cmp	r0, #0
    2b96:	d105      	bne.n	2ba4 <f_lseek+0xf8>
    2b98:	79a2      	ldrb	r2, [r4, #6]
    2b9a:	2380      	movs	r3, #128	; 0x80
    2b9c:	425b      	negs	r3, r3
    2b9e:	4313      	orrs	r3, r2
    2ba0:	71a3      	strb	r3, [r4, #6]
    2ba2:	e012      	b.n	2bca <f_lseek+0x11e>
					nsect += ofs / SS(fp->fs);
    2ba4:	0a6d      	lsrs	r5, r5, #9
    2ba6:	1940      	adds	r0, r0, r5
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    2ba8:	68a3      	ldr	r3, [r4, #8]
    2baa:	05da      	lsls	r2, r3, #23
    2bac:	2a00      	cmp	r2, #0
    2bae:	d003      	beq.n	2bb8 <f_lseek+0x10c>
    2bb0:	69a2      	ldr	r2, [r4, #24]
    2bb2:	4290      	cmp	r0, r2
    2bb4:	d000      	beq.n	2bb8 <f_lseek+0x10c>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    2bb6:	61a0      	str	r0, [r4, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    2bb8:	68e2      	ldr	r2, [r4, #12]
    2bba:	4293      	cmp	r3, r2
    2bbc:	d906      	bls.n	2bcc <f_lseek+0x120>
			fp->fsize = fp->fptr;
    2bbe:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA__WRITTEN;
    2bc0:	79a3      	ldrb	r3, [r4, #6]
    2bc2:	2220      	movs	r2, #32
    2bc4:	4313      	orrs	r3, r2
    2bc6:	71a3      	strb	r3, [r4, #6]
    2bc8:	e000      	b.n	2bcc <f_lseek+0x120>


	res = validate(fp);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    2bca:	2602      	movs	r6, #2
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    2bcc:	b005      	add	sp, #20
    2bce:	1c30      	adds	r0, r6, #0
    2bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002bd2 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
    2bd2:	b530      	push	{r4, r5, lr}
    2bd4:	b087      	sub	sp, #28
    2bd6:	1c04      	adds	r4, r0, #0
    2bd8:	9101      	str	r1, [sp, #4]
	FRESULT res;
	FATFS *fs;
	DEF_NAMEBUF;


	if (!dj) return FR_INVALID_OBJECT;
    2bda:	2009      	movs	r0, #9
    2bdc:	2c00      	cmp	r4, #0
    2bde:	d028      	beq.n	2c32 <f_opendir+0x60>

	res = chk_mounted(&path, &dj->fs, 0);
    2be0:	a801      	add	r0, sp, #4
    2be2:	1c21      	adds	r1, r4, #0
    2be4:	2200      	movs	r2, #0
    2be6:	f7fe fdef 	bl	17c8 <chk_mounted>
	fs = dj->fs;
    2bea:	6825      	ldr	r5, [r4, #0]
	if (res == FR_OK) {
    2bec:	2800      	cmp	r0, #0
    2bee:	d11e      	bne.n	2c2e <f_opendir+0x5c>
		INIT_BUF(*dj);
    2bf0:	ab03      	add	r3, sp, #12
    2bf2:	61a3      	str	r3, [r4, #24]
		res = follow_path(dj, path);			/* Follow the path to the directory */
    2bf4:	1c20      	adds	r0, r4, #0
    2bf6:	9901      	ldr	r1, [sp, #4]
    2bf8:	f7ff fa7a 	bl	20f0 <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
    2bfc:	2800      	cmp	r0, #0
    2bfe:	d110      	bne.n	2c22 <f_opendir+0x50>
			if (dj->dir) {						/* It is not the root dir */
    2c00:	6961      	ldr	r1, [r4, #20]
    2c02:	2900      	cmp	r1, #0
    2c04:	d007      	beq.n	2c16 <f_opendir+0x44>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    2c06:	7acb      	ldrb	r3, [r1, #11]
					dj->sclust = ld_clust(fs, dj->dir);
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
    2c08:	3005      	adds	r0, #5
		INIT_BUF(*dj);
		res = follow_path(dj, path);			/* Follow the path to the directory */
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
			if (dj->dir) {						/* It is not the root dir */
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    2c0a:	06da      	lsls	r2, r3, #27
    2c0c:	d50f      	bpl.n	2c2e <f_opendir+0x5c>
					dj->sclust = ld_clust(fs, dj->dir);
    2c0e:	7828      	ldrb	r0, [r5, #0]
    2c10:	f7ff f846 	bl	1ca0 <ld_clust.clone.0>
    2c14:	60a0      	str	r0, [r4, #8]
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = fs->id;
    2c16:	88eb      	ldrh	r3, [r5, #6]
				res = dir_sdi(dj, 0);			/* Rewind dir */
    2c18:	1c20      	adds	r0, r4, #0
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = fs->id;
    2c1a:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dj, 0);			/* Rewind dir */
    2c1c:	2100      	movs	r1, #0
    2c1e:	f7ff f8c2 	bl	1da6 <dir_sdi>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2c22:	2804      	cmp	r0, #4
    2c24:	d002      	beq.n	2c2c <f_opendir+0x5a>
		if (res != FR_OK) dj->fs = 0;			/* Invalidate the dir object if function faild */
    2c26:	2800      	cmp	r0, #0
    2c28:	d003      	beq.n	2c32 <f_opendir+0x60>
    2c2a:	e000      	b.n	2c2e <f_opendir+0x5c>
			if (res == FR_OK) {
				dj->id = fs->id;
				res = dir_sdi(dj, 0);			/* Rewind dir */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2c2c:	2005      	movs	r0, #5
		if (res != FR_OK) dj->fs = 0;			/* Invalidate the dir object if function faild */
	} else {
		dj->fs = 0;
    2c2e:	2300      	movs	r3, #0
    2c30:	6023      	str	r3, [r4, #0]
	}

	LEAVE_FF(fs, res);
}
    2c32:	b007      	add	sp, #28
    2c34:	bd30      	pop	{r4, r5, pc}

00002c36 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    2c36:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    2c38:	1c04      	adds	r4, r0, #0
    2c3a:	1c0e      	adds	r6, r1, #0
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj);						/* Check validity of the object */
    2c3c:	f7fe fd61 	bl	1702 <validate>
	if (res == FR_OK) {
    2c40:	1e05      	subs	r5, r0, #0
    2c42:	d11f      	bne.n	2c84 <f_readdir+0x4e>
		if (!fno) {
    2c44:	2e00      	cmp	r6, #0
    2c46:	d104      	bne.n	2c52 <f_readdir+0x1c>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
    2c48:	1c20      	adds	r0, r4, #0
    2c4a:	1c29      	adds	r1, r5, #0
    2c4c:	f7ff f8ab 	bl	1da6 <dir_sdi>
    2c50:	e017      	b.n	2c82 <f_readdir+0x4c>
		} else {
			INIT_BUF(*dj);
    2c52:	ab01      	add	r3, sp, #4
    2c54:	61a3      	str	r3, [r4, #24]
			res = dir_read(dj);				/* Read an directory item */
    2c56:	1c20      	adds	r0, r4, #0
    2c58:	f7ff fba7 	bl	23aa <dir_read>
			if (res == FR_NO_FILE) {		/* Reached end of dir */
    2c5c:	2804      	cmp	r0, #4
    2c5e:	d101      	bne.n	2c64 <f_readdir+0x2e>
				dj->sect = 0;
    2c60:	6125      	str	r5, [r4, #16]
    2c62:	e001      	b.n	2c68 <f_readdir+0x32>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    2c64:	2800      	cmp	r0, #0
    2c66:	d10c      	bne.n	2c82 <f_readdir+0x4c>
				get_fileinfo(dj, fno);		/* Get the object information */
    2c68:	1c20      	adds	r0, r4, #0
    2c6a:	1c31      	adds	r1, r6, #0
    2c6c:	f7fe fd0c 	bl	1688 <get_fileinfo>
				res = dir_next(dj, 0);		/* Increment index for next */
    2c70:	1c20      	adds	r0, r4, #0
    2c72:	2100      	movs	r1, #0
    2c74:	f7ff f9c4 	bl	2000 <dir_next>
				if (res == FR_NO_FILE) {
    2c78:	2804      	cmp	r0, #4
    2c7a:	d102      	bne.n	2c82 <f_readdir+0x4c>
					dj->sect = 0;
    2c7c:	2300      	movs	r3, #0
    2c7e:	6123      	str	r3, [r4, #16]
    2c80:	e000      	b.n	2c84 <f_readdir+0x4e>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, 0);		/* Increment index for next */
				if (res == FR_NO_FILE) {
    2c82:	1c05      	adds	r5, r0, #0
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
    2c84:	b004      	add	sp, #16
    2c86:	1c28      	adds	r0, r5, #0
    2c88:	bd70      	pop	{r4, r5, r6, pc}

00002c8a <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    2c8a:	b530      	push	{r4, r5, lr}
    2c8c:	b08d      	sub	sp, #52	; 0x34
    2c8e:	9001      	str	r0, [sp, #4]
    2c90:	1c0d      	adds	r5, r1, #0
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    2c92:	a801      	add	r0, sp, #4
    2c94:	a902      	add	r1, sp, #8
    2c96:	2200      	movs	r2, #0
    2c98:	f7fe fd96 	bl	17c8 <chk_mounted>
	if (res == FR_OK) {
    2c9c:	1e04      	subs	r4, r0, #0
    2c9e:	d110      	bne.n	2cc2 <f_stat+0x38>
		INIT_BUF(dj);
    2ca0:	ab09      	add	r3, sp, #36	; 0x24
		res = follow_path(&dj, path);	/* Follow the file path */
    2ca2:	a802      	add	r0, sp, #8
    2ca4:	9901      	ldr	r1, [sp, #4]
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
	if (res == FR_OK) {
		INIT_BUF(dj);
    2ca6:	9308      	str	r3, [sp, #32]
		res = follow_path(&dj, path);	/* Follow the file path */
    2ca8:	f7ff fa22 	bl	20f0 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
    2cac:	1e04      	subs	r4, r0, #0
    2cae:	d108      	bne.n	2cc2 <f_stat+0x38>
			if (dj.dir)		/* Found an object */
    2cb0:	9b07      	ldr	r3, [sp, #28]
    2cb2:	2b00      	cmp	r3, #0
    2cb4:	d004      	beq.n	2cc0 <f_stat+0x36>
				get_fileinfo(&dj, fno);
    2cb6:	a802      	add	r0, sp, #8
    2cb8:	1c29      	adds	r1, r5, #0
    2cba:	f7fe fce5 	bl	1688 <get_fileinfo>
    2cbe:	e000      	b.n	2cc2 <f_stat+0x38>
			else			/* It is root dir */
				res = FR_INVALID_NAME;
    2cc0:	2406      	movs	r4, #6
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    2cc2:	b00d      	add	sp, #52	; 0x34
    2cc4:	1c20      	adds	r0, r4, #0
    2cc6:	bd30      	pop	{r4, r5, pc}

00002cc8 <f_getfree>:
FRESULT f_getfree (
	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    2cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cca:	b089      	sub	sp, #36	; 0x24
    2ccc:	9007      	str	r0, [sp, #28]
    2cce:	9105      	str	r1, [sp, #20]
    2cd0:	1c14      	adds	r4, r2, #0
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    2cd2:	1c11      	adds	r1, r2, #0
    2cd4:	a807      	add	r0, sp, #28
    2cd6:	2200      	movs	r2, #0
    2cd8:	f7fe fd76 	bl	17c8 <chk_mounted>
	fs = *fatfs;
    2cdc:	6824      	ldr	r4, [r4, #0]
	if (res == FR_OK) {
    2cde:	1e06      	subs	r6, r0, #0
    2ce0:	d166      	bne.n	2db0 <f_getfree+0xe8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
    2ce2:	69e7      	ldr	r7, [r4, #28]
    2ce4:	6923      	ldr	r3, [r4, #16]
    2ce6:	1eba      	subs	r2, r7, #2
    2ce8:	4293      	cmp	r3, r2
    2cea:	d802      	bhi.n	2cf2 <f_getfree+0x2a>
			*nclst = fs->free_clust;
    2cec:	9805      	ldr	r0, [sp, #20]
    2cee:	6003      	str	r3, [r0, #0]
    2cf0:	e05e      	b.n	2db0 <f_getfree+0xe8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
    2cf2:	7821      	ldrb	r1, [r4, #0]
    2cf4:	9104      	str	r1, [sp, #16]
			n = 0;
			if (fat == FS_FAT12) {
    2cf6:	2901      	cmp	r1, #1
    2cf8:	d111      	bne.n	2d1e <f_getfree+0x56>
    2cfa:	2702      	movs	r7, #2
    2cfc:	1c05      	adds	r5, r0, #0
				clst = 2;
				do {
					stat = get_fat(fs, clst);
    2cfe:	1c20      	adds	r0, r4, #0
    2d00:	1c39      	adds	r1, r7, #0
    2d02:	f7fe ffe9 	bl	1cd8 <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    2d06:	1c42      	adds	r2, r0, #1
    2d08:	d045      	beq.n	2d96 <f_getfree+0xce>
					if (stat == 1) { res = FR_INT_ERR; break; }
    2d0a:	2801      	cmp	r0, #1
    2d0c:	d045      	beq.n	2d9a <f_getfree+0xd2>
					if (stat == 0) n++;
    2d0e:	4243      	negs	r3, r0
    2d10:	4143      	adcs	r3, r0
    2d12:	18ed      	adds	r5, r5, r3
				} while (++clst < fs->n_fatent);
    2d14:	69e3      	ldr	r3, [r4, #28]
    2d16:	3701      	adds	r7, #1
    2d18:	429f      	cmp	r7, r3
    2d1a:	d3f0      	bcc.n	2cfe <f_getfree+0x36>
    2d1c:	e040      	b.n	2da0 <f_getfree+0xd8>
			} else {
				clst = fs->n_fatent;
				sect = fs->fatbase;
    2d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
				i = 0; p = 0;
    2d20:	1c02      	adds	r2, r0, #0
					if (stat == 1) { res = FR_INT_ERR; break; }
					if (stat == 0) n++;
				} while (++clst < fs->n_fatent);
			} else {
				clst = fs->n_fatent;
				sect = fs->fatbase;
    2d22:	9303      	str	r3, [sp, #12]
		if (fs->free_clust <= fs->n_fatent - 2) {
			*nclst = fs->free_clust;
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
			n = 0;
    2d24:	1c05      	adds	r5, r0, #0
					if (stat == 0) n++;
				} while (++clst < fs->n_fatent);
			} else {
				clst = fs->n_fatent;
				sect = fs->fatbase;
				i = 0; p = 0;
    2d26:	1c03      	adds	r3, r0, #0
				do {
					if (!i) {
    2d28:	2a00      	cmp	r2, #0
    2d2a:	d10c      	bne.n	2d46 <f_getfree+0x7e>
						res = move_window(fs, sect++);
    2d2c:	1c20      	adds	r0, r4, #0
    2d2e:	9903      	ldr	r1, [sp, #12]
    2d30:	f7fe ff18 	bl	1b64 <move_window>
						if (res != FR_OK) break;
    2d34:	2800      	cmp	r0, #0
    2d36:	d132      	bne.n	2d9e <f_getfree+0xd6>
				clst = fs->n_fatent;
				sect = fs->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(fs, sect++);
    2d38:	9803      	ldr	r0, [sp, #12]
						if (res != FR_OK) break;
						p = fs->win;
    2d3a:	1c23      	adds	r3, r4, #0
				clst = fs->n_fatent;
				sect = fs->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(fs, sect++);
    2d3c:	3001      	adds	r0, #1
						if (res != FR_OK) break;
						p = fs->win;
						i = SS(fs);
    2d3e:	2280      	movs	r2, #128	; 0x80
				clst = fs->n_fatent;
				sect = fs->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(fs, sect++);
    2d40:	9003      	str	r0, [sp, #12]
						if (res != FR_OK) break;
						p = fs->win;
    2d42:	3334      	adds	r3, #52	; 0x34
						i = SS(fs);
    2d44:	0092      	lsls	r2, r2, #2
    2d46:	7859      	ldrb	r1, [r3, #1]
    2d48:	9101      	str	r1, [sp, #4]
    2d4a:	7818      	ldrb	r0, [r3, #0]
					}
					if (fat == FS_FAT16) {
    2d4c:	9904      	ldr	r1, [sp, #16]
    2d4e:	9000      	str	r0, [sp, #0]
    2d50:	2902      	cmp	r1, #2
    2d52:	d10a      	bne.n	2d6a <f_getfree+0xa2>
						if (LD_WORD(p) == 0) n++;
    2d54:	9801      	ldr	r0, [sp, #4]
						p += 2; i -= 2;
    2d56:	3302      	adds	r3, #2
						if (res != FR_OK) break;
						p = fs->win;
						i = SS(fs);
					}
					if (fat == FS_FAT16) {
						if (LD_WORD(p) == 0) n++;
    2d58:	0201      	lsls	r1, r0, #8
    2d5a:	9800      	ldr	r0, [sp, #0]
						p += 2; i -= 2;
    2d5c:	3a02      	subs	r2, #2
						if (res != FR_OK) break;
						p = fs->win;
						i = SS(fs);
					}
					if (fat == FS_FAT16) {
						if (LD_WORD(p) == 0) n++;
    2d5e:	4301      	orrs	r1, r0
    2d60:	b209      	sxth	r1, r1
    2d62:	4248      	negs	r0, r1
    2d64:	4141      	adcs	r1, r0
    2d66:	186d      	adds	r5, r5, r1
    2d68:	e011      	b.n	2d8e <f_getfree+0xc6>
						p += 2; i -= 2;
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    2d6a:	78d9      	ldrb	r1, [r3, #3]
    2d6c:	7898      	ldrb	r0, [r3, #2]
    2d6e:	0609      	lsls	r1, r1, #24
    2d70:	0400      	lsls	r0, r0, #16
    2d72:	4301      	orrs	r1, r0
    2d74:	9800      	ldr	r0, [sp, #0]
						p += 4; i -= 4;
    2d76:	3304      	adds	r3, #4
					}
					if (fat == FS_FAT16) {
						if (LD_WORD(p) == 0) n++;
						p += 2; i -= 2;
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    2d78:	4308      	orrs	r0, r1
    2d7a:	4684      	mov	ip, r0
    2d7c:	9801      	ldr	r0, [sp, #4]
						p += 4; i -= 4;
    2d7e:	3a04      	subs	r2, #4
					}
					if (fat == FS_FAT16) {
						if (LD_WORD(p) == 0) n++;
						p += 2; i -= 2;
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    2d80:	0201      	lsls	r1, r0, #8
    2d82:	4660      	mov	r0, ip
    2d84:	4301      	orrs	r1, r0
    2d86:	0109      	lsls	r1, r1, #4
    2d88:	4248      	negs	r0, r1
    2d8a:	4141      	adcs	r1, r0
    2d8c:	186d      	adds	r5, r5, r1
						p += 4; i -= 4;
					}
				} while (--clst);
    2d8e:	3f01      	subs	r7, #1
    2d90:	2f00      	cmp	r7, #0
    2d92:	d1c9      	bne.n	2d28 <f_getfree+0x60>
    2d94:	e004      	b.n	2da0 <f_getfree+0xd8>
			n = 0;
			if (fat == FS_FAT12) {
				clst = 2;
				do {
					stat = get_fat(fs, clst);
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    2d96:	2601      	movs	r6, #1
    2d98:	e002      	b.n	2da0 <f_getfree+0xd8>
					if (stat == 1) { res = FR_INT_ERR; break; }
    2d9a:	2602      	movs	r6, #2
    2d9c:	e000      	b.n	2da0 <f_getfree+0xd8>
				clst = fs->n_fatent;
				sect = fs->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(fs, sect++);
    2d9e:	1c06      	adds	r6, r0, #0
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			fs->free_clust = n;
			if (fat == FS_FAT32) fs->fsi_flag = 1;
    2da0:	9904      	ldr	r1, [sp, #16]
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			fs->free_clust = n;
    2da2:	6125      	str	r5, [r4, #16]
			if (fat == FS_FAT32) fs->fsi_flag = 1;
    2da4:	2903      	cmp	r1, #3
    2da6:	d101      	bne.n	2dac <f_getfree+0xe4>
    2da8:	2301      	movs	r3, #1
    2daa:	7163      	strb	r3, [r4, #5]
			*nclst = n;
    2dac:	9a05      	ldr	r2, [sp, #20]
    2dae:	6015      	str	r5, [r2, #0]
		}
	}
	LEAVE_FF(fs, res);
}
    2db0:	b009      	add	sp, #36	; 0x24
    2db2:	1c30      	adds	r0, r6, #0
    2db4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002db6 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    2db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2db8:	1c04      	adds	r4, r0, #0
	FRESULT res;
	DWORD ncl;


	if (!fp) return FR_INVALID_OBJECT;
    2dba:	2509      	movs	r5, #9
    2dbc:	2800      	cmp	r0, #0
    2dbe:	d037      	beq.n	2e30 <f_truncate+0x7a>

	res = validate(fp);						/* Check validity of the object */
    2dc0:	f7fe fc9f 	bl	1702 <validate>
	if (res == FR_OK) {
    2dc4:	1e05      	subs	r5, r0, #0
    2dc6:	d133      	bne.n	2e30 <f_truncate+0x7a>
		if (fp->flag & FA__ERROR) {			/* Check abort flag */
    2dc8:	79a3      	ldrb	r3, [r4, #6]
    2dca:	2702      	movs	r7, #2
    2dcc:	b25a      	sxtb	r2, r3
    2dce:	2a00      	cmp	r2, #0
    2dd0:	db03      	blt.n	2dda <f_truncate+0x24>
			res = FR_INT_ERR;
		} else {
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
    2dd2:	423b      	tst	r3, r7
    2dd4:	d12e      	bne.n	2e34 <f_truncate+0x7e>
				res = FR_DENIED;
    2dd6:	3507      	adds	r5, #7
    2dd8:	e02a      	b.n	2e30 <f_truncate+0x7a>
	if (!fp) return FR_INVALID_OBJECT;

	res = validate(fp);						/* Check validity of the object */
	if (res == FR_OK) {
		if (fp->flag & FA__ERROR) {			/* Check abort flag */
			res = FR_INT_ERR;
    2dda:	1c3d      	adds	r5, r7, #0
    2ddc:	e028      	b.n	2e30 <f_truncate+0x7a>
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
			fp->flag |= FA__WRITTEN;
    2dde:	2220      	movs	r2, #32
    2de0:	4313      	orrs	r3, r2
				res = FR_DENIED;
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    2de2:	60e6      	str	r6, [r4, #12]
			fp->flag |= FA__WRITTEN;
    2de4:	71a3      	strb	r3, [r4, #6]
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    2de6:	2e00      	cmp	r6, #0
    2de8:	d106      	bne.n	2df8 <f_truncate+0x42>
				res = remove_chain(fp->fs, fp->sclust);
    2dea:	6820      	ldr	r0, [r4, #0]
    2dec:	6921      	ldr	r1, [r4, #16]
    2dee:	f7ff fb00 	bl	23f2 <remove_chain>
				fp->sclust = 0;
    2df2:	6126      	str	r6, [r4, #16]
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
			fp->flag |= FA__WRITTEN;
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
				res = remove_chain(fp->fs, fp->sclust);
    2df4:	1c05      	adds	r5, r0, #0
    2df6:	e014      	b.n	2e22 <f_truncate+0x6c>
				fp->sclust = 0;
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
    2df8:	6820      	ldr	r0, [r4, #0]
    2dfa:	6961      	ldr	r1, [r4, #20]
    2dfc:	f7fe ff6c 	bl	1cd8 <get_fat>
    2e00:	1c06      	adds	r6, r0, #0
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    2e02:	1c43      	adds	r3, r0, #1
    2e04:	d01b      	beq.n	2e3e <f_truncate+0x88>
				if (ncl == 1) res = FR_INT_ERR;
    2e06:	2801      	cmp	r0, #1
    2e08:	d11d      	bne.n	2e46 <f_truncate+0x90>
    2e0a:	e01a      	b.n	2e42 <f_truncate+0x8c>
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
    2e0c:	6961      	ldr	r1, [r4, #20]
    2e0e:	4a10      	ldr	r2, [pc, #64]	; (2e50 <f_truncate+0x9a>)
    2e10:	f7ff f823 	bl	1e5a <put_fat>
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    2e14:	1e05      	subs	r5, r0, #0
    2e16:	d106      	bne.n	2e26 <f_truncate+0x70>
    2e18:	6820      	ldr	r0, [r4, #0]
    2e1a:	1c31      	adds	r1, r6, #0
    2e1c:	f7ff fae9 	bl	23f2 <remove_chain>
    2e20:	1c05      	adds	r5, r0, #0
				}
			}
		}
		if (res != FR_OK) fp->flag |= FA__ERROR;
    2e22:	2d00      	cmp	r5, #0
    2e24:	d004      	beq.n	2e30 <f_truncate+0x7a>
    2e26:	79a2      	ldrb	r2, [r4, #6]
    2e28:	2380      	movs	r3, #128	; 0x80
    2e2a:	425b      	negs	r3, r3
    2e2c:	4313      	orrs	r3, r2
    2e2e:	71a3      	strb	r3, [r4, #6]
	}

	LEAVE_FF(fp->fs, res);
}
    2e30:	1c28      	adds	r0, r5, #0
    2e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
				res = FR_DENIED;
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
    2e34:	68a6      	ldr	r6, [r4, #8]
    2e36:	68e2      	ldr	r2, [r4, #12]
    2e38:	42b2      	cmp	r2, r6
    2e3a:	d8d0      	bhi.n	2dde <f_truncate+0x28>
    2e3c:	e7f8      	b.n	2e30 <f_truncate+0x7a>
				res = remove_chain(fp->fs, fp->sclust);
				fp->sclust = 0;
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    2e3e:	2501      	movs	r5, #1
    2e40:	e7f1      	b.n	2e26 <f_truncate+0x70>
				if (ncl == 1) res = FR_INT_ERR;
    2e42:	1c3d      	adds	r5, r7, #0
    2e44:	e7ef      	b.n	2e26 <f_truncate+0x70>
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
    2e46:	6820      	ldr	r0, [r4, #0]
    2e48:	69c3      	ldr	r3, [r0, #28]
    2e4a:	429e      	cmp	r6, r3
    2e4c:	d2f0      	bcs.n	2e30 <f_truncate+0x7a>
    2e4e:	e7dd      	b.n	2e0c <f_truncate+0x56>
    2e50:	0fffffff 	.word	0x0fffffff

00002e54 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    2e54:	b570      	push	{r4, r5, r6, lr}
    2e56:	b094      	sub	sp, #80	; 0x50
    2e58:	9001      	str	r0, [sp, #4]
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    2e5a:	a90a      	add	r1, sp, #40	; 0x28
    2e5c:	a801      	add	r0, sp, #4
    2e5e:	2201      	movs	r2, #1
    2e60:	f7fe fcb2 	bl	17c8 <chk_mounted>
	if (res == FR_OK) {
    2e64:	1e04      	subs	r4, r0, #0
    2e66:	d147      	bne.n	2ef8 <f_unlink+0xa4>
		INIT_BUF(dj);
    2e68:	ab11      	add	r3, sp, #68	; 0x44
		res = follow_path(&dj, path);		/* Follow the file path */
    2e6a:	a80a      	add	r0, sp, #40	; 0x28
    2e6c:	9901      	ldr	r1, [sp, #4]
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
    2e6e:	9310      	str	r3, [sp, #64]	; 0x40
		res = follow_path(&dj, path);		/* Follow the file path */
    2e70:	f7ff f93e 	bl	20f0 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    2e74:	1e04      	subs	r4, r0, #0
    2e76:	d13f      	bne.n	2ef8 <f_unlink+0xa4>
    2e78:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2e7a:	7adb      	ldrb	r3, [r3, #11]
    2e7c:	069a      	lsls	r2, r3, #26
    2e7e:	d53e      	bpl.n	2efe <f_unlink+0xaa>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
    2e80:	3406      	adds	r4, #6
    2e82:	e039      	b.n	2ef8 <f_unlink+0xa4>
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    2e84:	7af3      	ldrb	r3, [r6, #11]
    2e86:	07da      	lsls	r2, r3, #31
    2e88:	d502      	bpl.n	2e90 <f_unlink+0x3c>
					res = FR_DENIED;		/* Cannot remove R/O object */
    2e8a:	2407      	movs	r4, #7
    2e8c:	e000      	b.n	2e90 <f_unlink+0x3c>
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    2e8e:	2406      	movs	r4, #6
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(djo.fs, res);
}
    2e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = ld_clust(dj.fs, dir);
    2e92:	1c31      	adds	r1, r6, #0
    2e94:	7818      	ldrb	r0, [r3, #0]
    2e96:	f7fe ff03 	bl	1ca0 <ld_clust.clone.0>
    2e9a:	1c05      	adds	r5, r0, #0
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    2e9c:	2c00      	cmp	r4, #0
    2e9e:	d12b      	bne.n	2ef8 <f_unlink+0xa4>
    2ea0:	7af3      	ldrb	r3, [r6, #11]
    2ea2:	06da      	lsls	r2, r3, #27
    2ea4:	d52f      	bpl.n	2f06 <f_unlink+0xb2>
				if (dclst < 2) {
					res = FR_INT_ERR;
    2ea6:	3402      	adds	r4, #2
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = ld_clust(dj.fs, dir);
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
				if (dclst < 2) {
    2ea8:	2801      	cmp	r0, #1
    2eaa:	d925      	bls.n	2ef8 <f_unlink+0xa4>
					res = FR_INT_ERR;
				} else {
					mem_cpy(&sdj, &dj, sizeof (DIR));	/* Check if the sub-dir is empty or not */
    2eac:	a803      	add	r0, sp, #12
    2eae:	a90a      	add	r1, sp, #40	; 0x28
    2eb0:	221c      	movs	r2, #28
    2eb2:	f7fe fbd1 	bl	1658 <mem_cpy>
					sdj.sclust = dclst;
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    2eb6:	1c21      	adds	r1, r4, #0
    2eb8:	a803      	add	r0, sp, #12
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
				if (dclst < 2) {
					res = FR_INT_ERR;
				} else {
					mem_cpy(&sdj, &dj, sizeof (DIR));	/* Check if the sub-dir is empty or not */
					sdj.sclust = dclst;
    2eba:	9505      	str	r5, [sp, #20]
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    2ebc:	f7fe ff73 	bl	1da6 <dir_sdi>
					if (res == FR_OK) {
    2ec0:	1e04      	subs	r4, r0, #0
    2ec2:	d119      	bne.n	2ef8 <f_unlink+0xa4>
						res = dir_read(&sdj);
    2ec4:	a803      	add	r0, sp, #12
    2ec6:	f7ff fa70 	bl	23aa <dir_read>
						if (res == FR_OK		/* Not empty dir */
    2eca:	1e04      	subs	r4, r0, #0
    2ecc:	d006      	beq.n	2edc <f_unlink+0x88>
#if _FS_RPATH
						|| dclst == dj.fs->cdir	/* Current dir */
    2ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2ed0:	699b      	ldr	r3, [r3, #24]
    2ed2:	429d      	cmp	r5, r3
    2ed4:	d002      	beq.n	2edc <f_unlink+0x88>
#endif
						) res = FR_DENIED;
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    2ed6:	2c04      	cmp	r4, #4
    2ed8:	d015      	beq.n	2f06 <f_unlink+0xb2>
    2eda:	e00d      	b.n	2ef8 <f_unlink+0xa4>
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
					if (res == FR_OK) {
						res = dir_read(&sdj);
						if (res == FR_OK		/* Not empty dir */
#if _FS_RPATH
						|| dclst == dj.fs->cdir	/* Current dir */
    2edc:	2407      	movs	r4, #7
    2ede:	e00b      	b.n	2ef8 <f_unlink+0xa4>
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
				if (res == FR_OK) {
					if (dclst)				/* Remove the cluster chain if exist */
    2ee0:	2d00      	cmp	r5, #0
    2ee2:	d005      	beq.n	2ef0 <f_unlink+0x9c>
						res = remove_chain(dj.fs, dclst);
    2ee4:	980a      	ldr	r0, [sp, #40]	; 0x28
    2ee6:	1c29      	adds	r1, r5, #0
    2ee8:	f7ff fa83 	bl	23f2 <remove_chain>
					if (res == FR_OK) res = sync(dj.fs);
    2eec:	1e04      	subs	r4, r0, #0
    2eee:	d103      	bne.n	2ef8 <f_unlink+0xa4>
    2ef0:	980a      	ldr	r0, [sp, #40]	; 0x28
    2ef2:	f7fe fe70 	bl	1bd6 <sync>
    2ef6:	1c04      	adds	r4, r0, #0
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
}
    2ef8:	b014      	add	sp, #80	; 0x50
    2efa:	1c20      	adds	r0, r4, #0
    2efc:	bd70      	pop	{r4, r5, r6, pc}
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
    2efe:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
			if (!dir) {
    2f00:	2e00      	cmp	r6, #0
    2f02:	d1bf      	bne.n	2e84 <f_unlink+0x30>
    2f04:	e7c3      	b.n	2e8e <f_unlink+0x3a>
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
    2f06:	a80a      	add	r0, sp, #40	; 0x28
    2f08:	f7fe ff93 	bl	1e32 <dir_remove>
				if (res == FR_OK) {
    2f0c:	1e04      	subs	r4, r0, #0
    2f0e:	d0e7      	beq.n	2ee0 <f_unlink+0x8c>
    2f10:	e7f2      	b.n	2ef8 <f_unlink+0xa4>

00002f12 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR *path		/* Pointer to the directory path */
)
{
    2f12:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f14:	b091      	sub	sp, #68	; 0x44
    2f16:	9005      	str	r0, [sp, #20]
	FRESULT res;
	DIR dj;
	BYTE *dir, n;
	DWORD dsc, dcl, pcl, tim = get_fattime();
    2f18:	f7fe f922 	bl	1160 <get_fattime>
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    2f1c:	a906      	add	r1, sp, #24
)
{
	FRESULT res;
	DIR dj;
	BYTE *dir, n;
	DWORD dsc, dcl, pcl, tim = get_fattime();
    2f1e:	9000      	str	r0, [sp, #0]
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    2f20:	2201      	movs	r2, #1
    2f22:	a805      	add	r0, sp, #20
    2f24:	f7fe fc50 	bl	17c8 <chk_mounted>
	if (res == FR_OK) {
    2f28:	1e04      	subs	r4, r0, #0
    2f2a:	d000      	beq.n	2f2e <f_mkdir+0x1c>
    2f2c:	e0a7      	b.n	307e <f_mkdir+0x16c>
		INIT_BUF(dj);
    2f2e:	ab0d      	add	r3, sp, #52	; 0x34
		res = follow_path(&dj, path);			/* Follow the file path */
    2f30:	a806      	add	r0, sp, #24
    2f32:	9905      	ldr	r1, [sp, #20]
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
    2f34:	930c      	str	r3, [sp, #48]	; 0x30
		res = follow_path(&dj, path);			/* Follow the file path */
    2f36:	f7ff f8db 	bl	20f0 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    2f3a:	1e04      	subs	r4, r0, #0
    2f3c:	d00a      	beq.n	2f54 <f_mkdir+0x42>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
    2f3e:	2c04      	cmp	r4, #4
    2f40:	d000      	beq.n	2f44 <f_mkdir+0x32>
    2f42:	e09c      	b.n	307e <f_mkdir+0x16c>
    2f44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2f46:	2120      	movs	r1, #32
    2f48:	7ade      	ldrb	r6, [r3, #11]
			res = FR_INVALID_NAME;
    2f4a:	3402      	adds	r4, #2
	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
    2f4c:	400e      	ands	r6, r1
    2f4e:	d000      	beq.n	2f52 <f_mkdir+0x40>
    2f50:	e095      	b.n	307e <f_mkdir+0x16c>
    2f52:	e097      	b.n	3084 <f_mkdir+0x172>

	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    2f54:	2408      	movs	r4, #8
    2f56:	e092      	b.n	307e <f_mkdir+0x16c>
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
			if (dcl == 1) res = FR_INT_ERR;
    2f58:	2402      	movs	r4, #2
    2f5a:	2d01      	cmp	r5, #1
    2f5c:	d072      	beq.n	3044 <f_mkdir+0x132>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    2f5e:	3c01      	subs	r4, #1
    2f60:	1c6a      	adds	r2, r5, #1
    2f62:	d06f      	beq.n	3044 <f_mkdir+0x132>
    2f64:	e097      	b.n	3096 <f_mkdir+0x184>
			if (res == FR_OK)					/* Flush FAT */
				res = move_window(dj.fs, 0);
			if (res == FR_OK) {					/* Initialize the new directory table */
				dsc = clust2sect(dj.fs, dcl);
    2f66:	9c06      	ldr	r4, [sp, #24]
    2f68:	1c29      	adds	r1, r5, #0
    2f6a:	1c20      	adds	r0, r4, #0
    2f6c:	f7fe fea7 	bl	1cbe <clust2sect>
				dir = dj.fs->win;
    2f70:	1c26      	adds	r6, r4, #0
    2f72:	3634      	adds	r6, #52	; 0x34
				mem_set(dir, 0, SS(dj.fs));
    2f74:	2280      	movs	r2, #128	; 0x80
    2f76:	1c39      	adds	r1, r7, #0
			if (dcl == 1) res = FR_INT_ERR;
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
			if (res == FR_OK)					/* Flush FAT */
				res = move_window(dj.fs, 0);
			if (res == FR_OK) {					/* Initialize the new directory table */
				dsc = clust2sect(dj.fs, dcl);
    2f78:	9001      	str	r0, [sp, #4]
				dir = dj.fs->win;
				mem_set(dir, 0, SS(dj.fs));
    2f7a:	0092      	lsls	r2, r2, #2
    2f7c:	1c30      	adds	r0, r6, #0
    2f7e:	f7fe fb74 	bl	166a <mem_set>
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
    2f82:	1c30      	adds	r0, r6, #0
    2f84:	2120      	movs	r1, #32
    2f86:	220b      	movs	r2, #11
    2f88:	f7fe fb6f 	bl	166a <mem_set>
				dir[DIR_Name] = '.';
    2f8c:	232e      	movs	r3, #46	; 0x2e
    2f8e:	7033      	strb	r3, [r6, #0]
				dir[DIR_Attr] = AM_DIR;
    2f90:	1c23      	adds	r3, r4, #0
    2f92:	333f      	adds	r3, #63	; 0x3f
    2f94:	2210      	movs	r2, #16
    2f96:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_WrtTime, tim);
    2f98:	9f00      	ldr	r7, [sp, #0]
    2f9a:	1c22      	adds	r2, r4, #0
    2f9c:	72df      	strb	r7, [r3, #11]
    2f9e:	b2bb      	uxth	r3, r7
    2fa0:	4669      	mov	r1, sp
    2fa2:	0a1b      	lsrs	r3, r3, #8
    2fa4:	324b      	adds	r2, #75	; 0x4b
    2fa6:	7013      	strb	r3, [r2, #0]
    2fa8:	74cb      	strb	r3, [r1, #19]
    2faa:	0c3b      	lsrs	r3, r7, #16
    2fac:	9302      	str	r3, [sp, #8]
    2fae:	2208      	movs	r2, #8
    2fb0:	5c52      	ldrb	r2, [r2, r1]
    2fb2:	1c23      	adds	r3, r4, #0
    2fb4:	334c      	adds	r3, #76	; 0x4c
    2fb6:	701a      	strb	r2, [r3, #0]
    2fb8:	0e3b      	lsrs	r3, r7, #24
    2fba:	9303      	str	r3, [sp, #12]
    2fbc:	220c      	movs	r2, #12
    2fbe:	5c52      	ldrb	r2, [r2, r1]
    2fc0:	1c23      	adds	r3, r4, #0
    2fc2:	334d      	adds	r3, #77	; 0x4d
    2fc4:	701a      	strb	r2, [r3, #0]
				st_clust(dir, dcl);
    2fc6:	1c30      	adds	r0, r6, #0
    2fc8:	1c29      	adds	r1, r5, #0
    2fca:	f7fe fb55 	bl	1678 <st_clust>
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
    2fce:	2354      	movs	r3, #84	; 0x54
    2fd0:	191b      	adds	r3, r3, r4
    2fd2:	1c18      	adds	r0, r3, #0
    2fd4:	1c31      	adds	r1, r6, #0
    2fd6:	2220      	movs	r2, #32
    2fd8:	9300      	str	r3, [sp, #0]
				dir[33] = '.'; pcl = dj.sclust;
    2fda:	3455      	adds	r4, #85	; 0x55
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
				dir[DIR_Name] = '.';
				dir[DIR_Attr] = AM_DIR;
				ST_DWORD(dir+DIR_WrtTime, tim);
				st_clust(dir, dcl);
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
    2fdc:	f7fe fb3c 	bl	1658 <mem_cpy>
				dir[33] = '.'; pcl = dj.sclust;
    2fe0:	212e      	movs	r1, #46	; 0x2e
    2fe2:	7021      	strb	r1, [r4, #0]
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
    2fe4:	9b06      	ldr	r3, [sp, #24]
				dir[DIR_Name] = '.';
				dir[DIR_Attr] = AM_DIR;
				ST_DWORD(dir+DIR_WrtTime, tim);
				st_clust(dir, dcl);
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
    2fe6:	9908      	ldr	r1, [sp, #32]
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
    2fe8:	781a      	ldrb	r2, [r3, #0]
    2fea:	2a03      	cmp	r2, #3
    2fec:	d105      	bne.n	2ffa <f_mkdir+0xe8>
    2fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
					pcl = 0;
    2ff0:	1acb      	subs	r3, r1, r3
    2ff2:	1e5a      	subs	r2, r3, #1
    2ff4:	4193      	sbcs	r3, r2
    2ff6:	425b      	negs	r3, r3
    2ff8:	4019      	ands	r1, r3
				st_clust(dir+SZ_DIR, pcl);
    2ffa:	9800      	ldr	r0, [sp, #0]
    2ffc:	f7fe fb3c 	bl	1678 <st_clust>
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    3000:	9b06      	ldr	r3, [sp, #24]
    3002:	789b      	ldrb	r3, [r3, #2]
    3004:	e015      	b.n	3032 <f_mkdir+0x120>
					dj.fs->winsect = dsc++;
    3006:	9806      	ldr	r0, [sp, #24]
    3008:	9a01      	ldr	r2, [sp, #4]
					dj.fs->wflag = 1;
    300a:	2301      	movs	r3, #1
					res = move_window(dj.fs, 0);
    300c:	2100      	movs	r1, #0
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				st_clust(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					dj.fs->winsect = dsc++;
    300e:	6302      	str	r2, [r0, #48]	; 0x30
					dj.fs->wflag = 1;
    3010:	7103      	strb	r3, [r0, #4]
					res = move_window(dj.fs, 0);
    3012:	f7fe fda7 	bl	1b64 <move_window>
    3016:	1c01      	adds	r1, r0, #0
					if (res != FR_OK) break;
    3018:	1e04      	subs	r4, r0, #0
    301a:	d113      	bne.n	3044 <f_mkdir+0x132>
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				st_clust(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					dj.fs->winsect = dsc++;
    301c:	9b01      	ldr	r3, [sp, #4]
					dj.fs->wflag = 1;
					res = move_window(dj.fs, 0);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(dj.fs));
    301e:	2280      	movs	r2, #128	; 0x80
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				st_clust(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					dj.fs->winsect = dsc++;
    3020:	3301      	adds	r3, #1
					dj.fs->wflag = 1;
					res = move_window(dj.fs, 0);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(dj.fs));
    3022:	1c30      	adds	r0, r6, #0
    3024:	0092      	lsls	r2, r2, #2
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				st_clust(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					dj.fs->winsect = dsc++;
    3026:	9301      	str	r3, [sp, #4]
					dj.fs->wflag = 1;
					res = move_window(dj.fs, 0);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(dj.fs));
    3028:	f7fe fb1f 	bl	166a <mem_set>
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				st_clust(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    302c:	9b00      	ldr	r3, [sp, #0]
    302e:	3b01      	subs	r3, #1
    3030:	b2db      	uxtb	r3, r3
    3032:	9300      	str	r3, [sp, #0]
    3034:	9900      	ldr	r1, [sp, #0]
    3036:	2900      	cmp	r1, #0
    3038:	d1e5      	bne.n	3006 <f_mkdir+0xf4>
					res = move_window(dj.fs, 0);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
    303a:	a806      	add	r0, sp, #24
    303c:	f7ff f986 	bl	234c <dir_register>
			if (res != FR_OK) {
    3040:	1e04      	subs	r4, r0, #0
    3042:	d004      	beq.n	304e <f_mkdir+0x13c>
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
    3044:	9806      	ldr	r0, [sp, #24]
    3046:	1c29      	adds	r1, r5, #0
    3048:	f7ff f9d3 	bl	23f2 <remove_chain>
    304c:	e017      	b.n	307e <f_mkdir+0x16c>
			} else {
				dir = dj.dir;
    304e:	980b      	ldr	r0, [sp, #44]	; 0x2c
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
    3050:	2310      	movs	r3, #16
    3052:	72c3      	strb	r3, [r0, #11]
				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
    3054:	7587      	strb	r7, [r0, #22]
    3056:	466a      	mov	r2, sp
    3058:	7cd2      	ldrb	r2, [r2, #19]
    305a:	2108      	movs	r1, #8
    305c:	75c2      	strb	r2, [r0, #23]
    305e:	466b      	mov	r3, sp
    3060:	5ccb      	ldrb	r3, [r1, r3]
    3062:	220c      	movs	r2, #12
    3064:	7603      	strb	r3, [r0, #24]
    3066:	4669      	mov	r1, sp
    3068:	5c51      	ldrb	r1, [r2, r1]
    306a:	7641      	strb	r1, [r0, #25]
				st_clust(dir, dcl);					/* Table start cluster */
    306c:	1c29      	adds	r1, r5, #0
    306e:	f7fe fb03 	bl	1678 <st_clust>
				dj.fs->wflag = 1;
    3072:	9806      	ldr	r0, [sp, #24]
    3074:	2301      	movs	r3, #1
    3076:	7103      	strb	r3, [r0, #4]
				res = sync(dj.fs);
    3078:	f7fe fdad 	bl	1bd6 <sync>
    307c:	1c04      	adds	r4, r0, #0
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    307e:	b011      	add	sp, #68	; 0x44
    3080:	1c20      	adds	r0, r4, #0
    3082:	bdf0      	pop	{r4, r5, r6, r7, pc}
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
    3084:	9806      	ldr	r0, [sp, #24]
    3086:	1c31      	adds	r1, r6, #0
    3088:	f7fe ff63 	bl	1f52 <create_chain>
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    308c:	1e05      	subs	r5, r0, #0
    308e:	d000      	beq.n	3092 <f_mkdir+0x180>
    3090:	e762      	b.n	2f58 <f_mkdir+0x46>
    3092:	2407      	movs	r4, #7
    3094:	e7d6      	b.n	3044 <f_mkdir+0x132>
			if (dcl == 1) res = FR_INT_ERR;
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
			if (res == FR_OK)					/* Flush FAT */
				res = move_window(dj.fs, 0);
    3096:	9806      	ldr	r0, [sp, #24]
    3098:	1c31      	adds	r1, r6, #0
    309a:	f7fe fd63 	bl	1b64 <move_window>
    309e:	1c07      	adds	r7, r0, #0
			if (res == FR_OK) {					/* Initialize the new directory table */
    30a0:	1e04      	subs	r4, r0, #0
    30a2:	d100      	bne.n	30a6 <f_mkdir+0x194>
    30a4:	e75f      	b.n	2f66 <f_mkdir+0x54>
    30a6:	e7cd      	b.n	3044 <f_mkdir+0x132>

000030a8 <f_chmod>:
FRESULT f_chmod (
	const TCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    30a8:	b530      	push	{r4, r5, lr}
    30aa:	b08d      	sub	sp, #52	; 0x34
    30ac:	9001      	str	r0, [sp, #4]
    30ae:	1c0d      	adds	r5, r1, #0
    30b0:	1c14      	adds	r4, r2, #0
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    30b2:	a801      	add	r0, sp, #4
    30b4:	a902      	add	r1, sp, #8
    30b6:	2201      	movs	r2, #1
    30b8:	f7fe fb86 	bl	17c8 <chk_mounted>
	if (res == FR_OK) {
    30bc:	2800      	cmp	r0, #0
    30be:	d119      	bne.n	30f4 <f_chmod+0x4c>
		INIT_BUF(dj);
    30c0:	ab09      	add	r3, sp, #36	; 0x24
		res = follow_path(&dj, path);		/* Follow the file path */
    30c2:	a802      	add	r0, sp, #8
    30c4:	9901      	ldr	r1, [sp, #4]
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
    30c6:	9308      	str	r3, [sp, #32]
		res = follow_path(&dj, path);		/* Follow the file path */
    30c8:	f7ff f812 	bl	20f0 <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    30cc:	2800      	cmp	r0, #0
    30ce:	d111      	bne.n	30f4 <f_chmod+0x4c>
    30d0:	9b08      	ldr	r3, [sp, #32]
			res = FR_INVALID_NAME;
    30d2:	3006      	adds	r0, #6
	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);		/* Follow the file path */
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    30d4:	7adb      	ldrb	r3, [r3, #11]
    30d6:	069a      	lsls	r2, r3, #26
    30d8:	d40c      	bmi.n	30f4 <f_chmod+0x4c>
    30da:	e00d      	b.n	30f8 <f_chmod+0x50>
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {						/* Is it a root directory? */
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    30dc:	2227      	movs	r2, #39	; 0x27
    30de:	4014      	ands	r4, r2
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    30e0:	7ada      	ldrb	r2, [r3, #11]
    30e2:	43a2      	bics	r2, r4
    30e4:	402c      	ands	r4, r5
    30e6:	4314      	orrs	r4, r2
    30e8:	72dc      	strb	r4, [r3, #11]
				dj.fs->wflag = 1;
    30ea:	9802      	ldr	r0, [sp, #8]
    30ec:	2301      	movs	r3, #1
    30ee:	7103      	strb	r3, [r0, #4]
				res = sync(dj.fs);
    30f0:	f7fe fd71 	bl	1bd6 <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    30f4:	b00d      	add	sp, #52	; 0x34
    30f6:	bd30      	pop	{r4, r5, pc}
		res = follow_path(&dj, path);		/* Follow the file path */
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    30f8:	9b07      	ldr	r3, [sp, #28]
			if (!dir) {						/* Is it a root directory? */
				res = FR_INVALID_NAME;
    30fa:	2006      	movs	r0, #6
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {						/* Is it a root directory? */
    30fc:	2b00      	cmp	r3, #0
    30fe:	d1ed      	bne.n	30dc <f_chmod+0x34>
    3100:	e7f8      	b.n	30f4 <f_chmod+0x4c>

00003102 <f_utime>:

FRESULT f_utime (
	const TCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the time stamp to be set */
)
{
    3102:	b510      	push	{r4, lr}
    3104:	b08c      	sub	sp, #48	; 0x30
    3106:	9001      	str	r0, [sp, #4]
    3108:	1c0c      	adds	r4, r1, #0
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    310a:	a801      	add	r0, sp, #4
    310c:	a902      	add	r1, sp, #8
    310e:	2201      	movs	r2, #1
    3110:	f7fe fb5a 	bl	17c8 <chk_mounted>
	if (res == FR_OK) {
    3114:	2800      	cmp	r0, #0
    3116:	d11c      	bne.n	3152 <f_utime+0x50>
		INIT_BUF(dj);
    3118:	ab09      	add	r3, sp, #36	; 0x24
		res = follow_path(&dj, path);	/* Follow the file path */
    311a:	a802      	add	r0, sp, #8
    311c:	9901      	ldr	r1, [sp, #4]
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
    311e:	9308      	str	r3, [sp, #32]
		res = follow_path(&dj, path);	/* Follow the file path */
    3120:	f7fe ffe6 	bl	20f0 <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    3124:	2800      	cmp	r0, #0
    3126:	d114      	bne.n	3152 <f_utime+0x50>
    3128:	9b08      	ldr	r3, [sp, #32]
			res = FR_INVALID_NAME;
    312a:	3006      	adds	r0, #6
	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    312c:	7adb      	ldrb	r3, [r3, #11]
    312e:	069a      	lsls	r2, r3, #26
    3130:	d40f      	bmi.n	3152 <f_utime+0x50>
    3132:	e010      	b.n	3156 <f_utime+0x54>
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {					/* Root directory */
				res = FR_INVALID_NAME;
			} else {					/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    3134:	88e2      	ldrh	r2, [r4, #6]
    3136:	759a      	strb	r2, [r3, #22]
    3138:	88e2      	ldrh	r2, [r4, #6]
    313a:	0a12      	lsrs	r2, r2, #8
    313c:	75da      	strb	r2, [r3, #23]
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    313e:	88a2      	ldrh	r2, [r4, #4]
    3140:	761a      	strb	r2, [r3, #24]
    3142:	88a2      	ldrh	r2, [r4, #4]
    3144:	0a12      	lsrs	r2, r2, #8
    3146:	765a      	strb	r2, [r3, #25]
				dj.fs->wflag = 1;
    3148:	9802      	ldr	r0, [sp, #8]
    314a:	2301      	movs	r3, #1
    314c:	7103      	strb	r3, [r0, #4]
				res = sync(dj.fs);
    314e:	f7fe fd42 	bl	1bd6 <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    3152:	b00c      	add	sp, #48	; 0x30
    3154:	bd10      	pop	{r4, pc}
		res = follow_path(&dj, path);	/* Follow the file path */
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    3156:	9b07      	ldr	r3, [sp, #28]
			if (!dir) {					/* Root directory */
				res = FR_INVALID_NAME;
    3158:	2006      	movs	r0, #6
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {					/* Root directory */
    315a:	2b00      	cmp	r3, #0
    315c:	d1ea      	bne.n	3134 <f_utime+0x32>
    315e:	e7f8      	b.n	3152 <f_utime+0x50>

00003160 <f_rename>:

FRESULT f_rename (
	const TCHAR *path_old,	/* Pointer to the old name */
	const TCHAR *path_new	/* Pointer to the new name */
)
{
    3160:	b570      	push	{r4, r5, r6, lr}
    3162:	b09a      	sub	sp, #104	; 0x68
    3164:	9001      	str	r0, [sp, #4]
    3166:	1c0c      	adds	r4, r1, #0
	BYTE buf[21], *dir;
	DWORD dw;
	DEF_NAMEBUF;


	res = chk_mounted(&path_old, &djo.fs, 1);
    3168:	a801      	add	r0, sp, #4
    316a:	a90a      	add	r1, sp, #40	; 0x28
    316c:	2201      	movs	r2, #1
    316e:	f7fe fb2b 	bl	17c8 <chk_mounted>
	if (res == FR_OK) {
    3172:	2800      	cmp	r0, #0
    3174:	d16e      	bne.n	3254 <f_rename+0xf4>
		djn.fs = djo.fs;
    3176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		INIT_BUF(djo);
		res = follow_path(&djo, path_old);		/* Check old object */
    3178:	a80a      	add	r0, sp, #40	; 0x28
	DEF_NAMEBUF;


	res = chk_mounted(&path_old, &djo.fs, 1);
	if (res == FR_OK) {
		djn.fs = djo.fs;
    317a:	9303      	str	r3, [sp, #12]
		INIT_BUF(djo);
		res = follow_path(&djo, path_old);		/* Check old object */
    317c:	9901      	ldr	r1, [sp, #4]


	res = chk_mounted(&path_old, &djo.fs, 1);
	if (res == FR_OK) {
		djn.fs = djo.fs;
		INIT_BUF(djo);
    317e:	ab17      	add	r3, sp, #92	; 0x5c
    3180:	9310      	str	r3, [sp, #64]	; 0x40
		res = follow_path(&djo, path_old);		/* Check old object */
    3182:	f7fe ffb5 	bl	20f0 <follow_path>
		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
    3186:	2800      	cmp	r0, #0
    3188:	d164      	bne.n	3254 <f_rename+0xf4>
    318a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    318c:	2620      	movs	r6, #32
    318e:	7adb      	ldrb	r3, [r3, #11]
			res = FR_INVALID_NAME;
    3190:	3006      	adds	r0, #6
	res = chk_mounted(&path_old, &djo.fs, 1);
	if (res == FR_OK) {
		djn.fs = djo.fs;
		INIT_BUF(djo);
		res = follow_path(&djo, path_old);		/* Check old object */
		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
    3192:	4233      	tst	r3, r6
    3194:	d15e      	bne.n	3254 <f_rename+0xf4>
    3196:	e05f      	b.n	3258 <f_rename+0xf8>
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
    3198:	ad11      	add	r5, sp, #68	; 0x44
    319a:	310b      	adds	r1, #11
    319c:	1c28      	adds	r0, r5, #0
    319e:	2215      	movs	r2, #21
    31a0:	f7fe fa5a 	bl	1658 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Check new object */
    31a4:	a803      	add	r0, sp, #12
    31a6:	a90a      	add	r1, sp, #40	; 0x28
    31a8:	221c      	movs	r2, #28
    31aa:	f7fe fa55 	bl	1658 <mem_cpy>
				res = follow_path(&djn, path_new);
    31ae:	a803      	add	r0, sp, #12
    31b0:	1c21      	adds	r1, r4, #0
    31b2:	f7fe ff9d 	bl	20f0 <follow_path>
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
    31b6:	2800      	cmp	r0, #0
    31b8:	d04b      	beq.n	3252 <f_rename+0xf2>
				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
    31ba:	2804      	cmp	r0, #4
    31bc:	d14a      	bne.n	3254 <f_rename+0xf4>
/* Start critical section that an interruption or error can cause cross-link */
					res = dir_register(&djn);			/* Register the new entry */
    31be:	a803      	add	r0, sp, #12
    31c0:	f7ff f8c4 	bl	234c <dir_register>
					if (res == FR_OK) {
    31c4:	2800      	cmp	r0, #0
    31c6:	d145      	bne.n	3254 <f_rename+0xf4>
						dir = djn.dir;					/* Copy object information except for name */
    31c8:	9c08      	ldr	r4, [sp, #32]
						mem_cpy(dir+13, buf+2, 19);
    31ca:	4669      	mov	r1, sp
    31cc:	1c20      	adds	r0, r4, #0
    31ce:	2213      	movs	r2, #19
    31d0:	300d      	adds	r0, #13
    31d2:	3146      	adds	r1, #70	; 0x46
    31d4:	f7fe fa40 	bl	1658 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
    31d8:	782b      	ldrb	r3, [r5, #0]
    31da:	431e      	orrs	r6, r3
    31dc:	72e6      	strb	r6, [r4, #11]
						djo.fs->wflag = 1;
    31de:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    31e0:	2301      	movs	r3, #1
    31e2:	712b      	strb	r3, [r5, #4]
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
    31e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    31e6:	9b05      	ldr	r3, [sp, #20]
    31e8:	429a      	cmp	r2, r3
    31ea:	d029      	beq.n	3240 <f_rename+0xe0>
    31ec:	7ae3      	ldrb	r3, [r4, #11]
    31ee:	06da      	lsls	r2, r3, #27
    31f0:	d526      	bpl.n	3240 <f_rename+0xe0>
							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
    31f2:	1c21      	adds	r1, r4, #0
    31f4:	7828      	ldrb	r0, [r5, #0]
    31f6:	f7fe fd53 	bl	1ca0 <ld_clust.clone.0>
    31fa:	1c01      	adds	r1, r0, #0
    31fc:	1c28      	adds	r0, r5, #0
    31fe:	f7fe fd5e 	bl	1cbe <clust2sect>
    3202:	1c01      	adds	r1, r0, #0
							if (!dw) {
								res = FR_INT_ERR;
    3204:	2002      	movs	r0, #2
						mem_cpy(dir+13, buf+2, 19);
						dir[DIR_Attr] = buf[0] | AM_ARC;
						djo.fs->wflag = 1;
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
							if (!dw) {
    3206:	2900      	cmp	r1, #0
    3208:	d024      	beq.n	3254 <f_rename+0xf4>
								res = FR_INT_ERR;
							} else {
								res = move_window(djo.fs, dw);
    320a:	1c28      	adds	r0, r5, #0
    320c:	f7fe fcaa 	bl	1b64 <move_window>
								dir = djo.fs->win+SZ_DIR;	/* .. entry */
    3210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
								if (res == FR_OK && dir[1] == '.') {
    3212:	2800      	cmp	r0, #0
    3214:	d11e      	bne.n	3254 <f_rename+0xf4>
    3216:	1c1a      	adds	r2, r3, #0
    3218:	3255      	adds	r2, #85	; 0x55
    321a:	7812      	ldrb	r2, [r2, #0]
    321c:	2a2e      	cmp	r2, #46	; 0x2e
    321e:	d10f      	bne.n	3240 <f_rename+0xe0>
									dw = (djo.fs->fs_type == FS_FAT32 && djn.sclust == djo.fs->dirbase) ? 0 : djn.sclust;
    3220:	781a      	ldrb	r2, [r3, #0]
    3222:	2a03      	cmp	r2, #3
    3224:	d104      	bne.n	3230 <f_rename+0xd0>
    3226:	1c01      	adds	r1, r0, #0
    3228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    322a:	9805      	ldr	r0, [sp, #20]
    322c:	4290      	cmp	r0, r2
    322e:	d000      	beq.n	3232 <f_rename+0xd2>
    3230:	9905      	ldr	r1, [sp, #20]
							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
							if (!dw) {
								res = FR_INT_ERR;
							} else {
								res = move_window(djo.fs, dw);
								dir = djo.fs->win+SZ_DIR;	/* .. entry */
    3232:	1c18      	adds	r0, r3, #0
    3234:	3054      	adds	r0, #84	; 0x54
								if (res == FR_OK && dir[1] == '.') {
									dw = (djo.fs->fs_type == FS_FAT32 && djn.sclust == djo.fs->dirbase) ? 0 : djn.sclust;
									st_clust(dir, dw);
    3236:	f7fe fa1f 	bl	1678 <st_clust>
									djo.fs->wflag = 1;
    323a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    323c:	2201      	movs	r2, #1
    323e:	711a      	strb	r2, [r3, #4]
								}
							}
						}
						if (res == FR_OK) {
							res = dir_remove(&djo);		/* Remove old entry */
    3240:	a80a      	add	r0, sp, #40	; 0x28
    3242:	f7fe fdf6 	bl	1e32 <dir_remove>
							if (res == FR_OK)
    3246:	2800      	cmp	r0, #0
    3248:	d104      	bne.n	3254 <f_rename+0xf4>
								res = sync(djo.fs);
    324a:	980a      	ldr	r0, [sp, #40]	; 0x28
    324c:	f7fe fcc3 	bl	1bd6 <sync>
    3250:	e000      	b.n	3254 <f_rename+0xf4>
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Check new object */
				res = follow_path(&djn, path_new);
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
    3252:	2008      	movs	r0, #8
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(djo.fs, res);
}
    3254:	b01a      	add	sp, #104	; 0x68
    3256:	bd70      	pop	{r4, r5, r6, pc}
			res = FR_INVALID_NAME;
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
    3258:	990f      	ldr	r1, [sp, #60]	; 0x3c
				res = FR_NO_FILE;
    325a:	2004      	movs	r0, #4
			res = FR_INVALID_NAME;
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
    325c:	2900      	cmp	r1, #0
    325e:	d19b      	bne.n	3198 <f_rename+0x38>
    3260:	e7f8      	b.n	3254 <f_rename+0xf4>
    3262:	46c0      	nop			; (mov r8, r8)

00003264 <Reset_Handler>:
void Reset_Handler (void)
{
	long *s, *d;

	/* Configure BOD control (Reset on Vcc dips below 2.7V) */
	BODCTRL = 0x13;
    3264:	4b1e      	ldr	r3, [pc, #120]	; (32e0 <Reset_Handler+0x7c>)
    3266:	2213      	movs	r2, #19
    3268:	601a      	str	r2, [r3, #0]

	/* Configure system clock generator */

	MAINCLKSEL = 0;		/* Select IRC as main clock */
    326a:	481e      	ldr	r0, [pc, #120]	; (32e4 <Reset_Handler+0x80>)
	MAINCLKUEN = 0; MAINCLKUEN = 1;
    326c:	4a1e      	ldr	r2, [pc, #120]	; (32e8 <Reset_Handler+0x84>)
	/* Configure BOD control (Reset on Vcc dips below 2.7V) */
	BODCTRL = 0x13;

	/* Configure system clock generator */

	MAINCLKSEL = 0;		/* Select IRC as main clock */
    326e:	2300      	movs	r3, #0
	MAINCLKUEN = 0; MAINCLKUEN = 1;
    3270:	2101      	movs	r1, #1

	FLASHCFG = (FLASHCFG & 0xFFFFFFFC) | FLASH_WAIT;	/* Configure flash access timing */
    3272:	4c1e      	ldr	r4, [pc, #120]	; (32ec <Reset_Handler+0x88>)
	/* Configure BOD control (Reset on Vcc dips below 2.7V) */
	BODCTRL = 0x13;

	/* Configure system clock generator */

	MAINCLKSEL = 0;		/* Select IRC as main clock */
    3274:	6003      	str	r3, [r0, #0]
	MAINCLKUEN = 0; MAINCLKUEN = 1;
    3276:	6013      	str	r3, [r2, #0]
    3278:	6011      	str	r1, [r2, #0]

	FLASHCFG = (FLASHCFG & 0xFFFFFFFC) | FLASH_WAIT;	/* Configure flash access timing */
    327a:	6825      	ldr	r5, [r4, #0]
    327c:	2603      	movs	r6, #3
    327e:	43b5      	bics	r5, r6
    3280:	430d      	orrs	r5, r1
    3282:	6025      	str	r5, [r4, #0]
#endif
#if CLK_SEL == 2		/* Enable WDT oscillator if needed */
	PDRUNCFG &= ~0x40;
#endif
#if CLK_SEL == 3	/* Configure PLL if needed */
	SYSPLLCLKSEL = OSC_SEL;
    3284:	4c1a      	ldr	r4, [pc, #104]	; (32f0 <Reset_Handler+0x8c>)
    3286:	6023      	str	r3, [r4, #0]
	SYSPLLCLKUEN = 0; SYSPLLCLKUEN = 1;
    3288:	6063      	str	r3, [r4, #4]
	SYSPLLCTRL = (PLL_M - 1) | (P_SEL << 6);
    328a:	4b1a      	ldr	r3, [pc, #104]	; (32f4 <Reset_Handler+0x90>)
#if CLK_SEL == 2		/* Enable WDT oscillator if needed */
	PDRUNCFG &= ~0x40;
#endif
#if CLK_SEL == 3	/* Configure PLL if needed */
	SYSPLLCLKSEL = OSC_SEL;
	SYSPLLCLKUEN = 0; SYSPLLCLKUEN = 1;
    328c:	6061      	str	r1, [r4, #4]
	SYSPLLCTRL = (PLL_M - 1) | (P_SEL << 6);
    328e:	3181      	adds	r1, #129	; 0x81
    3290:	6019      	str	r1, [r3, #0]
	PDRUNCFG &= ~0x80;
    3292:	4b19      	ldr	r3, [pc, #100]	; (32f8 <Reset_Handler+0x94>)
    3294:	2480      	movs	r4, #128	; 0x80
    3296:	6819      	ldr	r1, [r3, #0]
    3298:	43a1      	bics	r1, r4
    329a:	6019      	str	r1, [r3, #0]
	while ((SYSPLLSTAT & 1) == 0) ;
    329c:	4b17      	ldr	r3, [pc, #92]	; (32fc <Reset_Handler+0x98>)
    329e:	6819      	ldr	r1, [r3, #0]
    32a0:	2301      	movs	r3, #1
    32a2:	4219      	tst	r1, r3
    32a4:	d0fa      	beq.n	329c <Reset_Handler+0x38>
#endif

	SYSAHBCLKDIV = MCLK / SYSCLK;	/* Select system clock divisor */
    32a6:	4916      	ldr	r1, [pc, #88]	; (3300 <Reset_Handler+0x9c>)
    32a8:	600b      	str	r3, [r1, #0]
	MAINCLKSEL = CLK_SEL;				/* Select desired main clock source */
    32aa:	2103      	movs	r1, #3
    32ac:	6001      	str	r1, [r0, #0]
	MAINCLKUEN = 0; MAINCLKUEN = 1;
    32ae:	3903      	subs	r1, #3
    32b0:	6011      	str	r1, [r2, #0]
    32b2:	6013      	str	r3, [r2, #0]

	SYSAHBCLKCTRL = 0x1005F;		/* Enable clock for only SYS, ROM, RAM, FLASH, GPIO and IOCON */
    32b4:	4a13      	ldr	r2, [pc, #76]	; (3304 <Reset_Handler+0xa0>)
    32b6:	4b14      	ldr	r3, [pc, #80]	; (3308 <Reset_Handler+0xa4>)
    32b8:	601a      	str	r2, [r3, #0]
    32ba:	4a14      	ldr	r2, [pc, #80]	; (330c <Reset_Handler+0xa8>)


	/* Initialize .data/.bss section and static objects get ready to use after this process */
	for (s = _sidata, d = _sdata; d < _edata; *d++ = *s++) ;
    32bc:	4b14      	ldr	r3, [pc, #80]	; (3310 <Reset_Handler+0xac>)
    32be:	e001      	b.n	32c4 <Reset_Handler+0x60>
    32c0:	ca02      	ldmia	r2!, {r1}
    32c2:	c302      	stmia	r3!, {r1}
    32c4:	4913      	ldr	r1, [pc, #76]	; (3314 <Reset_Handler+0xb0>)
    32c6:	428b      	cmp	r3, r1
    32c8:	d3fa      	bcc.n	32c0 <Reset_Handler+0x5c>
    32ca:	4b13      	ldr	r3, [pc, #76]	; (3318 <Reset_Handler+0xb4>)
    32cc:	e001      	b.n	32d2 <Reset_Handler+0x6e>
	for (d = _sbss; d < _ebss; *d++ = 0) ;
    32ce:	2200      	movs	r2, #0
    32d0:	c304      	stmia	r3!, {r2}
    32d2:	4a12      	ldr	r2, [pc, #72]	; (331c <Reset_Handler+0xb8>)
    32d4:	4293      	cmp	r3, r2
    32d6:	d3fa      	bcc.n	32ce <Reset_Handler+0x6a>


	main();		/* Start main() with MSP */
    32d8:	f7fc fef2 	bl	c0 <main>
    32dc:	e7fe      	b.n	32dc <Reset_Handler+0x78>
    32de:	46c0      	nop			; (mov r8, r8)
    32e0:	40048150 	.word	0x40048150
    32e4:	40048070 	.word	0x40048070
    32e8:	40048074 	.word	0x40048074
    32ec:	4003c010 	.word	0x4003c010
    32f0:	40048040 	.word	0x40048040
    32f4:	40048008 	.word	0x40048008
    32f8:	40048238 	.word	0x40048238
    32fc:	4004800c 	.word	0x4004800c
    3300:	40048078 	.word	0x40048078
    3304:	0001005f 	.word	0x0001005f
    3308:	40048080 	.word	0x40048080
    330c:	000037b8 	.word	0x000037b8
    3310:	10000000 	.word	0x10000000
    3314:	10000004 	.word	0x10000004
    3318:	10000004 	.word	0x10000004
    331c:	100013b0 	.word	0x100013b0

00003320 <Exception_Trap>:
/*--------------------------------------------------------------------/
/ Unexpected Exception/IRQ Trap                                       /
/--------------------------------------------------------------------*/

void Exception_Trap (void)
{
    3320:	b500      	push	{lr}
	GPIO1DATA &= ~_BV(5);	// Blue
    3322:	4b03      	ldr	r3, [pc, #12]	; (3330 <Exception_Trap+0x10>)
    3324:	2120      	movs	r1, #32
    3326:	681a      	ldr	r2, [r3, #0]
    3328:	438a      	bics	r2, r1
    332a:	601a      	str	r2, [r3, #0]
    332c:	e7fe      	b.n	332c <Exception_Trap+0xc>
    332e:	46c0      	nop			; (mov r8, r8)
    3330:	50013ffc 	.word	0x50013ffc

00003334 <IRQ_Trap>:
	for (;;) ;
}


void IRQ_Trap (void)
{
    3334:	b500      	push	{lr}
	GPIO2DATA &= ~_BV(0);	// Red
    3336:	4b03      	ldr	r3, [pc, #12]	; (3344 <IRQ_Trap+0x10>)
    3338:	2101      	movs	r1, #1
    333a:	681a      	ldr	r2, [r3, #0]
    333c:	438a      	bics	r2, r1
    333e:	601a      	str	r2, [r3, #0]
    3340:	e7fe      	b.n	3340 <IRQ_Trap+0xc>
    3342:	46c0      	nop			; (mov r8, r8)
    3344:	50023ffc 	.word	0x50023ffc

00003348 <strchr>:
    3348:	b5f0      	push	{r4, r5, r6, r7, lr}
    334a:	b2c9      	uxtb	r1, r1
    334c:	1c03      	adds	r3, r0, #0
    334e:	2900      	cmp	r1, #0
    3350:	d03c      	beq.n	33cc <strchr+0x84>
    3352:	2203      	movs	r2, #3
    3354:	4210      	tst	r0, r2
    3356:	d00e      	beq.n	3376 <strchr+0x2e>
    3358:	7800      	ldrb	r0, [r0, #0]
    335a:	1e04      	subs	r4, r0, #0
    335c:	d035      	beq.n	33ca <strchr+0x82>
    335e:	1c18      	adds	r0, r3, #0
    3360:	42a1      	cmp	r1, r4
    3362:	d105      	bne.n	3370 <strchr+0x28>
    3364:	e031      	b.n	33ca <strchr+0x82>
    3366:	7803      	ldrb	r3, [r0, #0]
    3368:	2b00      	cmp	r3, #0
    336a:	d055      	beq.n	3418 <strchr+0xd0>
    336c:	4299      	cmp	r1, r3
    336e:	d02c      	beq.n	33ca <strchr+0x82>
    3370:	3001      	adds	r0, #1
    3372:	4210      	tst	r0, r2
    3374:	d1f7      	bne.n	3366 <strchr+0x1e>
    3376:	020e      	lsls	r6, r1, #8
    3378:	430e      	orrs	r6, r1
    337a:	0433      	lsls	r3, r6, #16
    337c:	431e      	orrs	r6, r3
    337e:	4f27      	ldr	r7, [pc, #156]	; (341c <strchr+0xd4>)
    3380:	6803      	ldr	r3, [r0, #0]
    3382:	4a27      	ldr	r2, [pc, #156]	; (3420 <strchr+0xd8>)
    3384:	19dc      	adds	r4, r3, r7
    3386:	439c      	bics	r4, r3
    3388:	1c05      	adds	r5, r0, #0
    338a:	4214      	tst	r4, r2
    338c:	d112      	bne.n	33b4 <strchr+0x6c>
    338e:	4073      	eors	r3, r6
    3390:	19dc      	adds	r4, r3, r7
    3392:	439c      	bics	r4, r3
    3394:	4214      	tst	r4, r2
    3396:	d10d      	bne.n	33b4 <strchr+0x6c>
    3398:	3004      	adds	r0, #4
    339a:	e004      	b.n	33a6 <strchr+0x5e>
    339c:	4073      	eors	r3, r6
    339e:	19dc      	adds	r4, r3, r7
    33a0:	439c      	bics	r4, r3
    33a2:	4214      	tst	r4, r2
    33a4:	d106      	bne.n	33b4 <strchr+0x6c>
    33a6:	1c05      	adds	r5, r0, #0
    33a8:	4f1c      	ldr	r7, [pc, #112]	; (341c <strchr+0xd4>)
    33aa:	c808      	ldmia	r0!, {r3}
    33ac:	19dc      	adds	r4, r3, r7
    33ae:	439c      	bics	r4, r3
    33b0:	4214      	tst	r4, r2
    33b2:	d0f3      	beq.n	339c <strchr+0x54>
    33b4:	782b      	ldrb	r3, [r5, #0]
    33b6:	1c28      	adds	r0, r5, #0
    33b8:	2b00      	cmp	r3, #0
    33ba:	d104      	bne.n	33c6 <strchr+0x7e>
    33bc:	e02c      	b.n	3418 <strchr+0xd0>
    33be:	3001      	adds	r0, #1
    33c0:	7803      	ldrb	r3, [r0, #0]
    33c2:	2b00      	cmp	r3, #0
    33c4:	d028      	beq.n	3418 <strchr+0xd0>
    33c6:	4299      	cmp	r1, r3
    33c8:	d1f9      	bne.n	33be <strchr+0x76>
    33ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33cc:	2203      	movs	r2, #3
    33ce:	4210      	tst	r0, r2
    33d0:	d009      	beq.n	33e6 <strchr+0x9e>
    33d2:	7801      	ldrb	r1, [r0, #0]
    33d4:	2900      	cmp	r1, #0
    33d6:	d103      	bne.n	33e0 <strchr+0x98>
    33d8:	e7f7      	b.n	33ca <strchr+0x82>
    33da:	7803      	ldrb	r3, [r0, #0]
    33dc:	2b00      	cmp	r3, #0
    33de:	d0f4      	beq.n	33ca <strchr+0x82>
    33e0:	3001      	adds	r0, #1
    33e2:	4210      	tst	r0, r2
    33e4:	d1f9      	bne.n	33da <strchr+0x92>
    33e6:	6803      	ldr	r3, [r0, #0]
    33e8:	4c0c      	ldr	r4, [pc, #48]	; (341c <strchr+0xd4>)
    33ea:	1c01      	adds	r1, r0, #0
    33ec:	191a      	adds	r2, r3, r4
    33ee:	4c0c      	ldr	r4, [pc, #48]	; (3420 <strchr+0xd8>)
    33f0:	439a      	bics	r2, r3
    33f2:	4222      	tst	r2, r4
    33f4:	d107      	bne.n	3406 <strchr+0xbe>
    33f6:	3004      	adds	r0, #4
    33f8:	1c01      	adds	r1, r0, #0
    33fa:	4d08      	ldr	r5, [pc, #32]	; (341c <strchr+0xd4>)
    33fc:	c808      	ldmia	r0!, {r3}
    33fe:	195a      	adds	r2, r3, r5
    3400:	439a      	bics	r2, r3
    3402:	4222      	tst	r2, r4
    3404:	d0f8      	beq.n	33f8 <strchr+0xb0>
    3406:	780b      	ldrb	r3, [r1, #0]
    3408:	1c08      	adds	r0, r1, #0
    340a:	2b00      	cmp	r3, #0
    340c:	d0dd      	beq.n	33ca <strchr+0x82>
    340e:	3001      	adds	r0, #1
    3410:	7803      	ldrb	r3, [r0, #0]
    3412:	2b00      	cmp	r3, #0
    3414:	d1fb      	bne.n	340e <strchr+0xc6>
    3416:	e7d8      	b.n	33ca <strchr+0x82>
    3418:	1c18      	adds	r0, r3, #0
    341a:	e7d6      	b.n	33ca <strchr+0x82>
    341c:	fefefeff 	.word	0xfefefeff
    3420:	80808080 	.word	0x80808080

00003424 <__gnu_thumb1_case_uqi>:
    3424:	b402      	push	{r1}
    3426:	4671      	mov	r1, lr
    3428:	0849      	lsrs	r1, r1, #1
    342a:	0049      	lsls	r1, r1, #1
    342c:	5c09      	ldrb	r1, [r1, r0]
    342e:	0049      	lsls	r1, r1, #1
    3430:	448e      	add	lr, r1
    3432:	bc02      	pop	{r1}
    3434:	4770      	bx	lr
    3436:	46c0      	nop			; (mov r8, r8)

00003438 <__gnu_thumb1_case_uhi>:
    3438:	b403      	push	{r0, r1}
    343a:	4671      	mov	r1, lr
    343c:	0849      	lsrs	r1, r1, #1
    343e:	0040      	lsls	r0, r0, #1
    3440:	0049      	lsls	r1, r1, #1
    3442:	5a09      	ldrh	r1, [r1, r0]
    3444:	0049      	lsls	r1, r1, #1
    3446:	448e      	add	lr, r1
    3448:	bc03      	pop	{r0, r1}
    344a:	4770      	bx	lr

0000344c <__aeabi_uidiv>:
    344c:	2900      	cmp	r1, #0
    344e:	d034      	beq.n	34ba <.udivsi3_skip_div0_test+0x6a>

00003450 <.udivsi3_skip_div0_test>:
    3450:	2301      	movs	r3, #1
    3452:	2200      	movs	r2, #0
    3454:	b410      	push	{r4}
    3456:	4288      	cmp	r0, r1
    3458:	d32c      	bcc.n	34b4 <.udivsi3_skip_div0_test+0x64>
    345a:	2401      	movs	r4, #1
    345c:	0724      	lsls	r4, r4, #28
    345e:	42a1      	cmp	r1, r4
    3460:	d204      	bcs.n	346c <.udivsi3_skip_div0_test+0x1c>
    3462:	4281      	cmp	r1, r0
    3464:	d202      	bcs.n	346c <.udivsi3_skip_div0_test+0x1c>
    3466:	0109      	lsls	r1, r1, #4
    3468:	011b      	lsls	r3, r3, #4
    346a:	e7f8      	b.n	345e <.udivsi3_skip_div0_test+0xe>
    346c:	00e4      	lsls	r4, r4, #3
    346e:	42a1      	cmp	r1, r4
    3470:	d204      	bcs.n	347c <.udivsi3_skip_div0_test+0x2c>
    3472:	4281      	cmp	r1, r0
    3474:	d202      	bcs.n	347c <.udivsi3_skip_div0_test+0x2c>
    3476:	0049      	lsls	r1, r1, #1
    3478:	005b      	lsls	r3, r3, #1
    347a:	e7f8      	b.n	346e <.udivsi3_skip_div0_test+0x1e>
    347c:	4288      	cmp	r0, r1
    347e:	d301      	bcc.n	3484 <.udivsi3_skip_div0_test+0x34>
    3480:	1a40      	subs	r0, r0, r1
    3482:	431a      	orrs	r2, r3
    3484:	084c      	lsrs	r4, r1, #1
    3486:	42a0      	cmp	r0, r4
    3488:	d302      	bcc.n	3490 <.udivsi3_skip_div0_test+0x40>
    348a:	1b00      	subs	r0, r0, r4
    348c:	085c      	lsrs	r4, r3, #1
    348e:	4322      	orrs	r2, r4
    3490:	088c      	lsrs	r4, r1, #2
    3492:	42a0      	cmp	r0, r4
    3494:	d302      	bcc.n	349c <.udivsi3_skip_div0_test+0x4c>
    3496:	1b00      	subs	r0, r0, r4
    3498:	089c      	lsrs	r4, r3, #2
    349a:	4322      	orrs	r2, r4
    349c:	08cc      	lsrs	r4, r1, #3
    349e:	42a0      	cmp	r0, r4
    34a0:	d302      	bcc.n	34a8 <.udivsi3_skip_div0_test+0x58>
    34a2:	1b00      	subs	r0, r0, r4
    34a4:	08dc      	lsrs	r4, r3, #3
    34a6:	4322      	orrs	r2, r4
    34a8:	2800      	cmp	r0, #0
    34aa:	d003      	beq.n	34b4 <.udivsi3_skip_div0_test+0x64>
    34ac:	091b      	lsrs	r3, r3, #4
    34ae:	d001      	beq.n	34b4 <.udivsi3_skip_div0_test+0x64>
    34b0:	0909      	lsrs	r1, r1, #4
    34b2:	e7e3      	b.n	347c <.udivsi3_skip_div0_test+0x2c>
    34b4:	1c10      	adds	r0, r2, #0
    34b6:	bc10      	pop	{r4}
    34b8:	4770      	bx	lr
    34ba:	2800      	cmp	r0, #0
    34bc:	d001      	beq.n	34c2 <.udivsi3_skip_div0_test+0x72>
    34be:	2000      	movs	r0, #0
    34c0:	43c0      	mvns	r0, r0
    34c2:	b407      	push	{r0, r1, r2}
    34c4:	4802      	ldr	r0, [pc, #8]	; (34d0 <.udivsi3_skip_div0_test+0x80>)
    34c6:	a102      	add	r1, pc, #8	; (adr r1, 34d0 <.udivsi3_skip_div0_test+0x80>)
    34c8:	1840      	adds	r0, r0, r1
    34ca:	9002      	str	r0, [sp, #8]
    34cc:	bd03      	pop	{r0, r1, pc}
    34ce:	46c0      	nop			; (mov r8, r8)
    34d0:	000000d9 	.word	0x000000d9

000034d4 <__aeabi_uidivmod>:
    34d4:	2900      	cmp	r1, #0
    34d6:	d0f0      	beq.n	34ba <.udivsi3_skip_div0_test+0x6a>
    34d8:	b503      	push	{r0, r1, lr}
    34da:	f7ff ffb9 	bl	3450 <.udivsi3_skip_div0_test>
    34de:	bc0e      	pop	{r1, r2, r3}
    34e0:	4342      	muls	r2, r0
    34e2:	1a89      	subs	r1, r1, r2
    34e4:	4718      	bx	r3
    34e6:	46c0      	nop			; (mov r8, r8)

000034e8 <__aeabi_idiv>:
    34e8:	2900      	cmp	r1, #0
    34ea:	d041      	beq.n	3570 <.divsi3_skip_div0_test+0x84>

000034ec <.divsi3_skip_div0_test>:
    34ec:	b410      	push	{r4}
    34ee:	1c04      	adds	r4, r0, #0
    34f0:	404c      	eors	r4, r1
    34f2:	46a4      	mov	ip, r4
    34f4:	2301      	movs	r3, #1
    34f6:	2200      	movs	r2, #0
    34f8:	2900      	cmp	r1, #0
    34fa:	d500      	bpl.n	34fe <.divsi3_skip_div0_test+0x12>
    34fc:	4249      	negs	r1, r1
    34fe:	2800      	cmp	r0, #0
    3500:	d500      	bpl.n	3504 <.divsi3_skip_div0_test+0x18>
    3502:	4240      	negs	r0, r0
    3504:	4288      	cmp	r0, r1
    3506:	d32c      	bcc.n	3562 <.divsi3_skip_div0_test+0x76>
    3508:	2401      	movs	r4, #1
    350a:	0724      	lsls	r4, r4, #28
    350c:	42a1      	cmp	r1, r4
    350e:	d204      	bcs.n	351a <.divsi3_skip_div0_test+0x2e>
    3510:	4281      	cmp	r1, r0
    3512:	d202      	bcs.n	351a <.divsi3_skip_div0_test+0x2e>
    3514:	0109      	lsls	r1, r1, #4
    3516:	011b      	lsls	r3, r3, #4
    3518:	e7f8      	b.n	350c <.divsi3_skip_div0_test+0x20>
    351a:	00e4      	lsls	r4, r4, #3
    351c:	42a1      	cmp	r1, r4
    351e:	d204      	bcs.n	352a <.divsi3_skip_div0_test+0x3e>
    3520:	4281      	cmp	r1, r0
    3522:	d202      	bcs.n	352a <.divsi3_skip_div0_test+0x3e>
    3524:	0049      	lsls	r1, r1, #1
    3526:	005b      	lsls	r3, r3, #1
    3528:	e7f8      	b.n	351c <.divsi3_skip_div0_test+0x30>
    352a:	4288      	cmp	r0, r1
    352c:	d301      	bcc.n	3532 <.divsi3_skip_div0_test+0x46>
    352e:	1a40      	subs	r0, r0, r1
    3530:	431a      	orrs	r2, r3
    3532:	084c      	lsrs	r4, r1, #1
    3534:	42a0      	cmp	r0, r4
    3536:	d302      	bcc.n	353e <.divsi3_skip_div0_test+0x52>
    3538:	1b00      	subs	r0, r0, r4
    353a:	085c      	lsrs	r4, r3, #1
    353c:	4322      	orrs	r2, r4
    353e:	088c      	lsrs	r4, r1, #2
    3540:	42a0      	cmp	r0, r4
    3542:	d302      	bcc.n	354a <.divsi3_skip_div0_test+0x5e>
    3544:	1b00      	subs	r0, r0, r4
    3546:	089c      	lsrs	r4, r3, #2
    3548:	4322      	orrs	r2, r4
    354a:	08cc      	lsrs	r4, r1, #3
    354c:	42a0      	cmp	r0, r4
    354e:	d302      	bcc.n	3556 <.divsi3_skip_div0_test+0x6a>
    3550:	1b00      	subs	r0, r0, r4
    3552:	08dc      	lsrs	r4, r3, #3
    3554:	4322      	orrs	r2, r4
    3556:	2800      	cmp	r0, #0
    3558:	d003      	beq.n	3562 <.divsi3_skip_div0_test+0x76>
    355a:	091b      	lsrs	r3, r3, #4
    355c:	d001      	beq.n	3562 <.divsi3_skip_div0_test+0x76>
    355e:	0909      	lsrs	r1, r1, #4
    3560:	e7e3      	b.n	352a <.divsi3_skip_div0_test+0x3e>
    3562:	1c10      	adds	r0, r2, #0
    3564:	4664      	mov	r4, ip
    3566:	2c00      	cmp	r4, #0
    3568:	d500      	bpl.n	356c <.divsi3_skip_div0_test+0x80>
    356a:	4240      	negs	r0, r0
    356c:	bc10      	pop	{r4}
    356e:	4770      	bx	lr
    3570:	2800      	cmp	r0, #0
    3572:	d006      	beq.n	3582 <.divsi3_skip_div0_test+0x96>
    3574:	db03      	blt.n	357e <.divsi3_skip_div0_test+0x92>
    3576:	2000      	movs	r0, #0
    3578:	43c0      	mvns	r0, r0
    357a:	0840      	lsrs	r0, r0, #1
    357c:	e001      	b.n	3582 <.divsi3_skip_div0_test+0x96>
    357e:	2080      	movs	r0, #128	; 0x80
    3580:	0600      	lsls	r0, r0, #24
    3582:	b407      	push	{r0, r1, r2}
    3584:	4802      	ldr	r0, [pc, #8]	; (3590 <.divsi3_skip_div0_test+0xa4>)
    3586:	a102      	add	r1, pc, #8	; (adr r1, 3590 <.divsi3_skip_div0_test+0xa4>)
    3588:	1840      	adds	r0, r0, r1
    358a:	9002      	str	r0, [sp, #8]
    358c:	bd03      	pop	{r0, r1, pc}
    358e:	46c0      	nop			; (mov r8, r8)
    3590:	00000019 	.word	0x00000019

00003594 <__aeabi_idivmod>:
    3594:	2900      	cmp	r1, #0
    3596:	d0eb      	beq.n	3570 <.divsi3_skip_div0_test+0x84>
    3598:	b503      	push	{r0, r1, lr}
    359a:	f7ff ffa7 	bl	34ec <.divsi3_skip_div0_test>
    359e:	bc0e      	pop	{r1, r2, r3}
    35a0:	4342      	muls	r2, r0
    35a2:	1a89      	subs	r1, r1, r2
    35a4:	4718      	bx	r3
    35a6:	46c0      	nop			; (mov r8, r8)

000035a8 <__aeabi_idiv0>:
    35a8:	4770      	bx	lr
    35aa:	46c0      	nop			; (mov r8, r8)
    35ac:	5952414d 	.word	0x5952414d
    35b0:	2f424d2d 	.word	0x2f424d2d
    35b4:	532f424f 	.word	0x532f424f
    35b8:	65742052 	.word	0x65742052
    35bc:	6d207473 	.word	0x6d207473
    35c0:	74696e6f 	.word	0x74696e6f
    35c4:	000a726f 	.word	0x000a726f
    35c8:	6c383025 	.word	0x6c383025
    35cc:	20002058 	.word	0x20002058
    35d0:	58323025 	.word	0x58323025
    35d4:	30252000 	.word	0x30252000
    35d8:	20005834 	.word	0x20005834
    35dc:	4c383025 	.word	0x4c383025
    35e0:	0058      	.short	0x0058
    35e2:	4b4f      	.short	0x4b4f
    35e4:	53494400 	.word	0x53494400
    35e8:	52455f4b 	.word	0x52455f4b
    35ec:	4e490052 	.word	0x4e490052
    35f0:	52455f54 	.word	0x52455f54
    35f4:	4f4e0052 	.word	0x4f4e0052
    35f8:	45525f54 	.word	0x45525f54
    35fc:	00594441 	.word	0x00594441
    3600:	465f4f4e 	.word	0x465f4f4e
    3604:	00454c49 	.word	0x00454c49
    3608:	505f4f4e 	.word	0x505f4f4e
    360c:	00485441 	.word	0x00485441
    3610:	41564e49 	.word	0x41564e49
    3614:	5f44494c 	.word	0x5f44494c
    3618:	454d414e 	.word	0x454d414e
    361c:	4e454400 	.word	0x4e454400
    3620:	00444549 	.word	0x00444549
    3624:	53495845 	.word	0x53495845
    3628:	4e490054 	.word	0x4e490054
    362c:	494c4156 	.word	0x494c4156
    3630:	424f5f44 	.word	0x424f5f44
    3634:	5443454a 	.word	0x5443454a
    3638:	49525700 	.word	0x49525700
    363c:	505f4554 	.word	0x505f4554
    3640:	45544f52 	.word	0x45544f52
    3644:	44455443 	.word	0x44455443
    3648:	564e4900 	.word	0x564e4900
    364c:	44494c41 	.word	0x44494c41
    3650:	4952445f 	.word	0x4952445f
    3654:	4e004556 	.word	0x4e004556
    3658:	455f544f 	.word	0x455f544f
    365c:	4c42414e 	.word	0x4c42414e
    3660:	4e004445 	.word	0x4e004445
    3664:	49465f4f 	.word	0x49465f4f
    3668:	535f454c 	.word	0x535f454c
    366c:	45545359 	.word	0x45545359
    3670:	4b4d004d 	.word	0x4b4d004d
    3674:	415f5346 	.word	0x415f5346
    3678:	54524f42 	.word	0x54524f42
    367c:	54004445 	.word	0x54004445
    3680:	4f454d49 	.word	0x4f454d49
    3684:	4c005455 	.word	0x4c005455
    3688:	454b434f 	.word	0x454b434f
    368c:	4f4e0044 	.word	0x4f4e0044
    3690:	4e455f54 	.word	0x4e455f54
    3694:	4847554f 	.word	0x4847554f
    3698:	524f435f 	.word	0x524f435f
    369c:	4f540045 	.word	0x4f540045
    36a0:	414d5f4f 	.word	0x414d5f4f
    36a4:	4f5f594e 	.word	0x4f5f594e
    36a8:	5f4e4550 	.word	0x5f4e4550
    36ac:	454c4946 	.word	0x454c4946
    36b0:	0053      	.short	0x0053
    36b2:	00          	.byte	0x00
    36b3:	72          	.byte	0x72
    36b4:	75253d63 	.word	0x75253d63
    36b8:	5f524620 	.word	0x5f524620
    36bc:	000a7325 	.word	0x000a7325
    36c0:	253d6372 	.word	0x253d6372
    36c4:	53000a64 	.word	0x53000a64
    36c8:	6f746365 	.word	0x6f746365
    36cc:	6c253a72 	.word	0x6c253a72
    36d0:	25000a75 	.word	0x25000a75
    36d4:	25632563 	.word	0x25632563
    36d8:	25632563 	.word	0x25632563
    36dc:	75252063 	.word	0x75252063
    36e0:	3230252f 	.word	0x3230252f
    36e4:	30252f75 	.word	0x30252f75
    36e8:	25207532 	.word	0x25207532
    36ec:	3a753230 	.word	0x3a753230
    36f0:	75323025 	.word	0x75323025
    36f4:	6c392520 	.word	0x6c392520
    36f8:	25202075 	.word	0x25202075
    36fc:	25000a73 	.word	0x25000a73
    3700:	46207534 	.word	0x46207534
    3704:	28656c69 	.word	0x28656c69
    3708:	252c2973 	.word	0x252c2973
    370c:	756c3031 	.word	0x756c3031
    3710:	74796220 	.word	0x74796220
    3714:	250a7365 	.word	0x250a7365
    3718:	44207534 	.word	0x44207534
    371c:	73287269 	.word	0x73287269
    3720:	202c0029 	.word	0x202c0029
    3724:	6c303125 	.word	0x6c303125
    3728:	62204b75 	.word	0x62204b75
    372c:	73657479 	.word	0x73657479
    3730:	65726620 	.word	0x65726620
    3734:	66000a65 	.word	0x66000a65
    3738:	20727470 	.word	0x20727470
    373c:	6c25203d 	.word	0x6c25203d
    3740:	78302875 	.word	0x78302875
    3744:	29586c25 	.word	0x29586c25
    3748:	6c25000a 	.word	0x6c25000a
    374c:	79622075 	.word	0x79622075
    3750:	20736574 	.word	0x20736574
    3754:	64616572 	.word	0x64616572
    3758:	74697720 	.word	0x74697720
    375c:	6c252068 	.word	0x6c252068
    3760:	426b2075 	.word	0x426b2075
    3764:	6365732f 	.word	0x6365732f
    3768:	25000a2e 	.word	0x25000a2e
    376c:	6220756c 	.word	0x6220756c
    3770:	73657479 	.word	0x73657479
    3774:	69727720 	.word	0x69727720
    3778:	6e657474 	.word	0x6e657474
    377c:	74697720 	.word	0x74697720
    3780:	6c252068 	.word	0x6c252068
    3784:	426b2075 	.word	0x426b2075
    3788:	6365732f 	.word	0x6365732f
    378c:	25000a2e 	.word	0x25000a2e
    3790:	75252f75 	.word	0x75252f75
    3794:	2075252f 	.word	0x2075252f
    3798:	75323025 	.word	0x75323025
    379c:	3230253a 	.word	0x3230253a
    37a0:	30253a75 	.word	0x30253a75
    37a4:	000a7532 	.word	0x000a7532
    37a8:	2c2b2a22 	.word	0x2c2b2a22
    37ac:	3d3c3b3a 	.word	0x3d3c3b3a
    37b0:	5d5b3f3e 	.word	0x5d5b3f3e
    37b4:	Address 0x000037b4 is out of bounds.

